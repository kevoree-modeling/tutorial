var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var System = (function () {
    function System() {
    }
    System.gc = function () {
    };
    System.arraycopy = function (src, srcPos, dest, destPos, numElements) {
        if (src instanceof Float64Array && dest instanceof Float64Array) {
            for (var i = 0; i < numElements; i++) {
                dest[destPos + i] = src[srcPos + i];
            }
        }
        else if (src instanceof Int32Array && dest instanceof Int32Array) {
            for (var i = 0; i < numElements; i++) {
                dest[destPos + i] = src[srcPos + i];
            }
        }
        else {
            for (var i = 0; i < numElements; i++) {
                dest[destPos + i] = src[srcPos + i];
            }
        }
    };
    System.out = {
        println: function (obj) {
            console.log(obj);
        },
        print: function (obj) {
            console.log(obj);
        }
    };
    System.err = {
        println: function (obj) {
            console.error(obj);
        },
        print: function (obj) {
            console.error(obj);
        }
    };
    return System;
})();
Number.prototype.equals = function (other) {
    return this == other;
};
var StringUtils = (function () {
    function StringUtils() {
    }
    StringUtils.copyValueOf = function (data, offset, count) {
        var result = "";
        for (var i = offset; i < offset + count; i++) {
            result += data[i];
        }
        return result;
    };
    return StringUtils;
})();
String.prototype.matches = function (regEx) {
    if (regEx == null) {
        return false;
    }
    else {
        var m = this.match(regEx);
        return m != null && m.length > 0;
    }
};
String.prototype.isEmpty = function () {
    return this.length == 0;
};
String.prototype.equals = function (other) {
    return this == other;
};
String.prototype.hashCode = function () {
    var hash = 0, i, chr, len;
    if (this.length == 0)
        return hash;
    for (i = 0, len = this.length; i < len; i++) {
        chr = this.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
};
String.prototype.startsWith = function (other) {
    return this.slice(0, other.length) == other;
};
String.prototype.endsWith = function (other) {
    return this.slice(-other.length) == other;
};
Boolean.prototype.equals = function (other) {
    return this == other;
};
var java;
(function (java) {
    var lang;
    (function (lang) {
        var Double = (function () {
            function Double() {
            }
            Double.parseDouble = function (val) {
                return +val;
            };
            Double.isNaN = function (val) {
                return isNaN(val);
            };
            Double.MIN_VALUE = Number.MIN_VALUE;
            Double.MAX_VALUE = Number.MAX_VALUE;
            return Double;
        })();
        lang.Double = Double;
        var Float = (function () {
            function Float() {
            }
            Float.parseFloat = function (val) {
                return +val;
            };
            return Float;
        })();
        lang.Float = Float;
        var Integer = (function () {
            function Integer() {
            }
            Integer.parseInt = function (val) {
                return +val;
            };
            return Integer;
        })();
        lang.Integer = Integer;
        var Long = (function () {
            function Long() {
            }
            Long.parseLong = function (val) {
                return +val;
            };
            return Long;
        })();
        lang.Long = Long;
        var Boolean = (function () {
            function Boolean() {
            }
            Boolean.parseBoolean = function (val) {
                return val == "true";
            };
            return Boolean;
        })();
        lang.Boolean = Boolean;
        var Short = (function () {
            function Short() {
            }
            Short.parseShort = function (val) {
                return +val;
            };
            Short.MIN_VALUE = -0x8000;
            Short.MAX_VALUE = 0x7FFF;
            return Short;
        })();
        lang.Short = Short;
        var Throwable = (function () {
            function Throwable(message) {
                this.message = message;
                this.error = new Error(message);
            }
            Throwable.prototype.printStackTrace = function () {
                //console.error(this.error['stack']);
                console.error(this.error);
            };
            return Throwable;
        })();
        lang.Throwable = Throwable;
        var Exception = (function (_super) {
            __extends(Exception, _super);
            function Exception() {
                _super.apply(this, arguments);
            }
            return Exception;
        })(Throwable);
        lang.Exception = Exception;
        var RuntimeException = (function (_super) {
            __extends(RuntimeException, _super);
            function RuntimeException() {
                _super.apply(this, arguments);
            }
            return RuntimeException;
        })(Exception);
        lang.RuntimeException = RuntimeException;
        var IndexOutOfBoundsException = (function (_super) {
            __extends(IndexOutOfBoundsException, _super);
            function IndexOutOfBoundsException() {
                _super.apply(this, arguments);
            }
            return IndexOutOfBoundsException;
        })(Exception);
        lang.IndexOutOfBoundsException = IndexOutOfBoundsException;
        var StringBuilder = (function () {
            function StringBuilder() {
                this.buffer = "";
                this.length = 0;
            }
            StringBuilder.prototype.append = function (val) {
                this.buffer = this.buffer + val;
                length = this.buffer.length;
                return this;
            };
            StringBuilder.prototype.toString = function () {
                return this.buffer;
            };
            return StringBuilder;
        })();
        lang.StringBuilder = StringBuilder;
        var ref;
        (function (ref) {
            var WeakReference = (function () {
                function WeakReference() {
                }
                return WeakReference;
            })();
            ref.WeakReference = WeakReference;
        })(ref = lang.ref || (lang.ref = {}));
    })(lang = java.lang || (java.lang = {}));
    var util;
    (function (util) {
        var concurrent;
        (function (concurrent) {
            var atomic;
            (function (atomic) {
                var AtomicIntegerArray = (function () {
                    function AtomicIntegerArray(p) {
                        this._internal = p;
                    }
                    AtomicIntegerArray.prototype.set = function (index, newVal) {
                        this._internal[index] = newVal;
                    };
                    AtomicIntegerArray.prototype.get = function (index) {
                        return this._internal[index];
                    };
                    AtomicIntegerArray.prototype.getAndSet = function (index, newVal) {
                        var temp = this._internal[index];
                        this._internal[index] = newVal;
                        return temp;
                    };
                    AtomicIntegerArray.prototype.compareAndSet = function (index, expect, update) {
                        if (this._internal[index] == expect) {
                            this._internal[index] = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    return AtomicIntegerArray;
                })();
                atomic.AtomicIntegerArray = AtomicIntegerArray;
                var AtomicReference = (function () {
                    function AtomicReference() {
                        this._internal = null;
                    }
                    AtomicReference.prototype.compareAndSet = function (expect, update) {
                        if (this._internal == expect) {
                            this._internal = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    AtomicReference.prototype.get = function () {
                        return this._internal;
                    };
                    AtomicReference.prototype.set = function (newRef) {
                        this._internal = newRef;
                    };
                    AtomicReference.prototype.getAndSet = function (newVal) {
                        var temp = this._internal;
                        this._internal = newVal;
                        return temp;
                    };
                    return AtomicReference;
                })();
                atomic.AtomicReference = AtomicReference;
                var AtomicLong = (function () {
                    function AtomicLong(init) {
                        this._internal = 0;
                        this._internal = init;
                    }
                    AtomicLong.prototype.compareAndSet = function (expect, update) {
                        if (this._internal == expect) {
                            this._internal = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    AtomicLong.prototype.get = function () {
                        return this._internal;
                    };
                    AtomicLong.prototype.incrementAndGet = function () {
                        this._internal++;
                        return this._internal;
                    };
                    AtomicLong.prototype.decrementAndGet = function () {
                        this._internal--;
                        return this._internal;
                    };
                    return AtomicLong;
                })();
                atomic.AtomicLong = AtomicLong;
                var AtomicInteger = (function () {
                    function AtomicInteger(init) {
                        this._internal = 0;
                        this._internal = init;
                    }
                    AtomicInteger.prototype.compareAndSet = function (expect, update) {
                        if (this._internal == expect) {
                            this._internal = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    AtomicInteger.prototype.get = function () {
                        return this._internal;
                    };
                    AtomicInteger.prototype.set = function (newVal) {
                        this._internal = newVal;
                    };
                    AtomicInteger.prototype.getAndSet = function (newVal) {
                        var temp = this._internal;
                        this._internal = newVal;
                        return temp;
                    };
                    AtomicInteger.prototype.incrementAndGet = function () {
                        this._internal++;
                        return this._internal;
                    };
                    AtomicInteger.prototype.decrementAndGet = function () {
                        this._internal--;
                        return this._internal;
                    };
                    AtomicInteger.prototype.getAndIncrement = function () {
                        var temp = this._internal;
                        this._internal++;
                        return temp;
                    };
                    AtomicInteger.prototype.getAndDecrement = function () {
                        var temp = this._internal;
                        this._internal--;
                        return temp;
                    };
                    return AtomicInteger;
                })();
                atomic.AtomicInteger = AtomicInteger;
            })(atomic = concurrent.atomic || (concurrent.atomic = {}));
        })(concurrent = util.concurrent || (util.concurrent = {}));
        var Random = (function () {
            function Random() {
            }
            Random.prototype.nextInt = function (max) {
                return Math.random() * max;
            };
            Random.prototype.nextDouble = function () {
                return Math.random();
            };
            Random.prototype.nextBoolean = function () {
                return Math.random() >= 0.5;
            };
            return Random;
        })();
        util.Random = Random;
        var Arrays = (function () {
            function Arrays() {
            }
            Arrays.fill = function (data, begin, nbElem, param) {
                var max = begin + nbElem;
                for (var i = begin; i < max; i++) {
                    data[i] = param;
                }
            };
            return Arrays;
        })();
        util.Arrays = Arrays;
        var Collections = (function () {
            function Collections() {
            }
            Collections.reverse = function (p) {
                var temp = new List();
                for (var i = 0; i < p.size(); i++) {
                    temp.add(p.get(i));
                }
                p.clear();
                for (var i = temp.size() - 1; i >= 0; i--) {
                    p.add(temp.get(i));
                }
            };
            Collections.sort = function (p) {
                p.sort();
            };
            return Collections;
        })();
        util.Collections = Collections;
        var XArray = (function () {
            function XArray() {
                Array.apply(this, arguments);
                return new Array();
            }
            XArray.prototype.pop = function () {
                return "";
            };
            XArray.prototype.push = function (val) {
                return 0;
            };
            XArray.prototype.splice = function (newS, arrL) {
            };
            XArray.prototype.indexOf = function (val) {
                return 0;
            };
            XArray.prototype.shift = function () {
                return "";
            };
            XArray.prototype.sort = function () {
            };
            return XArray;
        })();
        util.XArray = XArray;
        XArray["prototype"] = new Array();
        var List = (function (_super) {
            __extends(List, _super);
            function List() {
                _super.apply(this, arguments);
            }
            List.prototype.addAll = function (vals) {
                var tempArray = vals.toArray(null);
                for (var i = 0; i < tempArray.length; i++) {
                    this.push(tempArray[i]);
                }
            };
            List.prototype.clear = function () {
                this.length = 0;
            };
            List.prototype.poll = function () {
                return this.shift();
            };
            List.prototype.remove = function (val) {
            };
            List.prototype.toArray = function (a) {
                return this;
            };
            List.prototype.size = function () {
                return this.length;
            };
            List.prototype.add = function (val) {
                this.push(val);
            };
            List.prototype.get = function (index) {
                return this[index];
            };
            List.prototype.contains = function (val) {
                return this.indexOf(val) != -1;
            };
            List.prototype.isEmpty = function () {
                return this.length == 0;
            };
            return List;
        })(XArray);
        util.List = List;
        var ArrayList = (function (_super) {
            __extends(ArrayList, _super);
            function ArrayList() {
                _super.apply(this, arguments);
            }
            return ArrayList;
        })(List);
        util.ArrayList = ArrayList;
        var LinkedList = (function (_super) {
            __extends(LinkedList, _super);
            function LinkedList() {
                _super.apply(this, arguments);
            }
            return LinkedList;
        })(List);
        util.LinkedList = LinkedList;
        var Stack = (function () {
            function Stack() {
                this.content = new Array();
            }
            Stack.prototype.pop = function () {
                return this.content.pop();
            };
            Stack.prototype.push = function (t) {
                this.content.push(t);
            };
            Stack.prototype.isEmpty = function () {
                return this.content.length == 0;
            };
            Stack.prototype.peek = function () {
                return this.content.slice(-1)[0];
            };
            return Stack;
        })();
        util.Stack = Stack;
        var Map = (function () {
            function Map() {
            }
            Map.prototype.get = function (key) {
                return this[key];
            };
            Map.prototype.put = function (key, value) {
                var previous_val = this[key];
                this[key] = value;
                return previous_val;
            };
            Map.prototype.containsKey = function (key) {
                return this.hasOwnProperty(key);
            };
            Map.prototype.remove = function (key) {
                var tmp = this[key];
                delete this[key];
                return tmp;
            };
            Map.prototype.keySet = function () {
                var result = new HashSet();
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        result.add(p);
                    }
                }
                return result;
            };
            Map.prototype.isEmpty = function () {
                return Object.keys(this).length == 0;
            };
            Map.prototype.values = function () {
                var result = new HashSet();
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        result.add(this[p]);
                    }
                }
                return result;
            };
            Map.prototype.clear = function () {
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        delete this[p];
                    }
                }
            };
            return Map;
        })();
        util.Map = Map;
        var HashMap = (function (_super) {
            __extends(HashMap, _super);
            function HashMap() {
                _super.apply(this, arguments);
            }
            return HashMap;
        })(Map);
        util.HashMap = HashMap;
        var Set = (function () {
            function Set() {
            }
            Set.prototype.add = function (val) {
                this[val] = val;
            };
            Set.prototype.clear = function () {
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        delete this[p];
                    }
                }
            };
            Set.prototype.contains = function (val) {
                return this.hasOwnProperty(val);
            };
            Set.prototype.addAll = function (vals) {
                var tempArray = vals.toArray(null);
                for (var i = 0; i < tempArray.length; i++) {
                    this[tempArray[i]] = tempArray[i];
                }
            };
            Set.prototype.remove = function (val) {
                delete this[val];
            };
            Set.prototype.size = function () {
                return Object.keys(this).length;
            };
            Set.prototype.isEmpty = function () {
                return this.size() == 0;
            };
            Set.prototype.toArray = function (a) {
                for (var ik in this) {
                    a.push(this[ik]);
                }
                return a;
            };
            return Set;
        })();
        util.Set = Set;
        var HashSet = (function (_super) {
            __extends(HashSet, _super);
            function HashSet() {
                _super.apply(this, arguments);
            }
            return HashSet;
        })(Set);
        util.HashSet = HashSet;
    })(util = java.util || (java.util = {}));
})(java || (java = {}));
var org;
(function (org) {
    var junit;
    (function (junit) {
        var Assert = (function () {
            function Assert() {
            }
            Assert.assertArrayEquals = function (p, p2) {
                if (p == null || p == undefined) {
                    if (p2 == null || p2 == undefined) {
                        return;
                    }
                    else {
                        throw "Assert Error " + p + " and " + p2 + " must be equals";
                    }
                }
                if (p2 == null || p2 == undefined) {
                    if (p == null || p == undefined) {
                        return;
                    }
                    else {
                        throw "Assert Error " + p + " and " + p2 + " must be equals";
                    }
                }
                if (p.length != p2.length) {
                    throw "Assert Error " + p + " and " + p2 + " must be equals";
                }
                for (var i = 0; i < p.length; i++) {
                    if (p[i] != p2[i]) {
                        throw "Assert Error " + p + " and " + p2 + " must be equals";
                    }
                }
            };
            Assert.assertNotNull = function (p) {
                if (p == null) {
                    throw "Assert Error " + p + " must not be null";
                }
            };
            Assert.assertNull = function (p) {
                if (p != null) {
                    throw "Assert Error " + p + " must be null";
                }
            };
            Assert.assertEquals = function (p, p2) {
                if (p == null) {
                    if (p2 == null) {
                        return;
                    }
                    else {
                        throw "Assert Error \n" + p + "\n must be equal to \n" + p2 + "\n";
                    }
                }
                if (p2 == null) {
                    if (p == null) {
                        return;
                    }
                    else {
                        throw "Assert Error \n" + p + "\n must be equal to \n" + p2 + "\n";
                    }
                }
                if (p.equals !== undefined) {
                    if (!p.equals(p2)) {
                        throw "Assert Error \n" + p + "\n must be equal to \n" + p2 + "\n";
                    }
                }
                else {
                    if (p != p2) {
                        throw "Assert Error \n" + p + "\n must be equal to \n" + p2 + "\n";
                    }
                }
            };
            Assert.assertNotEquals = function (p, p2) {
                if (p.equals !== undefined) {
                    if (p.equals(p2)) {
                        throw "Assert Error \n" + p + "\n must not be equal to \n" + p2 + "\n";
                    }
                }
                else {
                    if (p == p2) {
                        throw "Assert Error \n" + p + "\n must not be equal to \n" + p2 + "\n";
                    }
                }
            };
            Assert.assertTrue = function (b) {
                if (!b) {
                    throw "Assert Error " + b + " must be true";
                }
            };
            Assert.assertFalse = function (b) {
                if (b) {
                    throw "Assert Error " + b + " must be false";
                }
            };
            return Assert;
        })();
        junit.Assert = Assert;
    })(junit = org.junit || (org.junit = {}));
})(org || (org = {}));
//# sourceMappingURL=java.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var org;
(function (org) {
    var kevoree;
    (function (kevoree) {
        var modeling;
        (function (modeling) {
            var KActionType = (function () {
                function KActionType() {
                }
                KActionType.prototype.equals = function (other) {
                    return this == other;
                };
                KActionType.values = function () {
                    return KActionType._KActionTypeVALUES;
                };
                KActionType.CALL = new KActionType();
                KActionType.CALL_RESPONSE = new KActionType();
                KActionType.SET = new KActionType();
                KActionType.ADD = new KActionType();
                KActionType.REMOVE = new KActionType();
                KActionType.NEW = new KActionType();
                KActionType._KActionTypeVALUES = [
                    KActionType.CALL,
                    KActionType.CALL_RESPONSE,
                    KActionType.SET,
                    KActionType.ADD,
                    KActionType.REMOVE,
                    KActionType.NEW
                ];
                return KActionType;
            })();
            modeling.KActionType = KActionType;
            var KConfig = (function () {
                function KConfig() {
                }
                KConfig.CAS_MAX_TRY = 1000;
                KConfig.CALLBACK_HISTORY = 1000;
                KConfig.LONG_SIZE = 53;
                KConfig.PREFIX_SIZE = 16;
                KConfig.BEGINNING_OF_TIME = -0x001FFFFFFFFFFFFE;
                KConfig.END_OF_TIME = 0x001FFFFFFFFFFFFE;
                KConfig.NULL_LONG = 0x001FFFFFFFFFFFFF;
                KConfig.KEY_PREFIX_MASK = 0x0000001FFFFFFFFF;
                KConfig.KEY_SEP = '|';
                KConfig.CACHE_INIT_SIZE = 16;
                KConfig.CACHE_LOAD_FACTOR = (75 / 100);
                return KConfig;
            })();
            modeling.KConfig = KConfig;
            var KContentKey = (function () {
                function KContentKey(p_universeID, p_timeID, p_objID) {
                    this.universe = p_universeID;
                    this.time = p_timeID;
                    this.obj = p_objID;
                }
                KContentKey.toString = function (keys, keyIndex) {
                    var buffer = new java.lang.StringBuilder();
                    var offset = keyIndex * 3;
                    if (keys[offset] != org.kevoree.modeling.KConfig.NULL_LONG) {
                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(keys[offset], buffer);
                    }
                    buffer.append(org.kevoree.modeling.KConfig.KEY_SEP);
                    if (keys[offset + 1] != org.kevoree.modeling.KConfig.NULL_LONG) {
                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(keys[offset + 1], buffer);
                    }
                    buffer.append(org.kevoree.modeling.KConfig.KEY_SEP);
                    if (keys[offset + 2] != org.kevoree.modeling.KConfig.NULL_LONG) {
                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(keys[offset + 2], buffer);
                    }
                    return buffer.toString();
                };
                KContentKey.createObject = function (p_universeID, p_quantaID, p_objectID) {
                    return new org.kevoree.modeling.KContentKey(p_universeID, p_quantaID, p_objectID);
                };
                KContentKey.createGlobalUniverseTree = function () {
                    return new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                };
                KContentKey.createRootUniverseTree = function () {
                    return new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME);
                };
                KContentKey.createLastPrefix = function () {
                    return new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                };
                KContentKey.create = function (payload) {
                    if (payload == null || payload.length == 0) {
                        return null;
                    }
                    else {
                        var key = new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                        var maxRead = payload.length;
                        var indexStartElem = -1;
                        var indexElem = 0;
                        var partIndex = 0;
                        for (var i = 0; i < maxRead; i++) {
                            if (payload.charAt(i) == org.kevoree.modeling.KConfig.KEY_SEP) {
                                if (indexStartElem != -1) {
                                    try {
                                        switch (partIndex) {
                                            case 0:
                                                key.universe = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, indexStartElem, i);
                                                break;
                                            case 1:
                                                key.time = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, indexStartElem, i);
                                                break;
                                            case 2:
                                                key.obj = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, indexStartElem, i);
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof java.lang.Exception) {
                                            var e = $ex$;
                                            e.printStackTrace();
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                                indexStartElem = -1;
                                indexElem = indexElem + 1;
                                partIndex++;
                            }
                            else {
                                if (indexStartElem == -1) {
                                    indexStartElem = i;
                                }
                            }
                        }
                        if (indexStartElem != -1) {
                            try {
                                switch (partIndex) {
                                    case 0:
                                        key.universe = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, indexStartElem, maxRead);
                                        break;
                                    case 1:
                                        key.time = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, indexStartElem, maxRead);
                                        break;
                                    case 2:
                                        key.obj = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, indexStartElem, maxRead);
                                        break;
                                    default:
                                        break;
                                }
                            }
                            catch ($ex$) {
                                if ($ex$ instanceof java.lang.Exception) {
                                    var e = $ex$;
                                    e.printStackTrace();
                                }
                                else {
                                    throw $ex$;
                                }
                            }
                        }
                        return key;
                    }
                };
                KContentKey.prototype.equals = function (param) {
                    if (param instanceof org.kevoree.modeling.KContentKey) {
                        var remote = param;
                        return remote.universe == this.universe && remote.time == this.time && remote.obj == this.obj;
                    }
                    else {
                        return false;
                    }
                };
                KContentKey.NULL_KEY = new Float64Array([org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.END_OF_TIME]);
                KContentKey.GLOBAL_UNIVERSE_KEY = new Float64Array([org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]);
                return KContentKey;
            })();
            modeling.KContentKey = KContentKey;
            var abs;
            (function (abs) {
                var AbstractDataType = (function () {
                    function AbstractDataType(p_name, p_isEnum, p_id) {
                        this._name = p_name;
                        this._isEnum = p_isEnum;
                        this._id = p_id;
                    }
                    AbstractDataType.prototype.name = function () {
                        return this._name;
                    };
                    AbstractDataType.prototype.isEnum = function () {
                        return this._isEnum;
                    };
                    AbstractDataType.prototype.id = function () {
                        return this._id;
                    };
                    return AbstractDataType;
                })();
                abs.AbstractDataType = AbstractDataType;
                var AbstractKModel = (function () {
                    function AbstractKModel(p_manager) {
                        this._manager = p_manager;
                        this._manager.setModel(this);
                        this._key = this._manager.nextModelKey();
                    }
                    AbstractKModel.prototype.metaModel = function () {
                        throw "Abstract method";
                    };
                    AbstractKModel.prototype.connect = function (cb) {
                        this._manager.connect(cb);
                    };
                    AbstractKModel.prototype.close = function (cb) {
                        this._manager.close(cb);
                    };
                    AbstractKModel.prototype.manager = function () {
                        return this._manager;
                    };
                    AbstractKModel.prototype.newUniverse = function () {
                        var nextKey = this._manager.nextUniverseKey();
                        var newDimension = this.internalCreateUniverse(nextKey);
                        this._manager.initUniverse(nextKey, nextKey);
                        return newDimension;
                    };
                    AbstractKModel.prototype.internalCreateUniverse = function (universe) {
                        throw "Abstract method";
                    };
                    AbstractKModel.prototype.internalCreateObject = function (universe, time, uuid, clazz, previousUniverse, previousTime) {
                        throw "Abstract method";
                    };
                    AbstractKModel.prototype.createProxy = function (universe, time, uuid, clazz, previousUniverse, previousTime) {
                        return this.internalCreateObject(universe, time, uuid, clazz, previousUniverse, previousTime);
                    };
                    AbstractKModel.prototype.universe = function (key) {
                        var newDimension = this.internalCreateUniverse(key);
                        this._manager.initUniverse(key, key);
                        return newDimension;
                    };
                    AbstractKModel.prototype.save = function (cb) {
                        this._manager.save(cb);
                    };
                    AbstractKModel.prototype.setOperation = function (metaOperation, operation) {
                        this._manager.operationManager().registerOperation(metaOperation, operation, null);
                    };
                    AbstractKModel.prototype.setInstanceOperation = function (metaOperation, target, operation) {
                        this._manager.operationManager().registerOperation(metaOperation, operation, target);
                    };
                    AbstractKModel.prototype.defer = function () {
                        return new org.kevoree.modeling.defer.impl.Defer();
                    };
                    AbstractKModel.prototype.key = function () {
                        return this._key;
                    };
                    AbstractKModel.prototype.create = function (clazz, universe, time) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(clazz)) {
                            return null;
                        }
                        var newObj = this.internalCreateObject(universe, time, this._manager.nextObjectKey(), clazz, universe, time);
                        if (newObj != null) {
                            this._manager.initKObject(newObj);
                        }
                        return newObj;
                    };
                    AbstractKModel.prototype.createByName = function (metaClassName, universe, time) {
                        return this.create(this._manager.model().metaModel().metaClassByName(metaClassName), universe, time);
                    };
                    AbstractKModel.prototype.lookup = function (p_universe, p_time, p_uuid, cb) {
                        this._manager.lookup(p_universe, p_time, p_uuid, cb);
                    };
                    AbstractKModel.prototype.createListener = function (universe) {
                        return this._manager.createListener(universe);
                    };
                    return AbstractKModel;
                })();
                abs.AbstractKModel = AbstractKModel;
                var AbstractKObject = (function () {
                    function AbstractKObject(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_actualUniverse, p_actualTime) {
                        this._universe = p_universe;
                        this._time = p_time;
                        this._uuid = p_uuid;
                        this._metaClass = p_metaClass;
                        this._manager = p_manager;
                        this._previousResolveds = new java.util.concurrent.atomic.AtomicReference();
                        var initResolved = new Float64Array([p_actualUniverse, p_actualTime]);
                        this._previousResolveds.set(initResolved);
                    }
                    AbstractKObject.prototype.previousResolved = function () {
                        return this._previousResolveds;
                    };
                    AbstractKObject.prototype.timeDephasing = function () {
                        return this._time - this._previousResolveds.get()[AbstractKObject.TIME_PREVIOUS_INDEX];
                    };
                    AbstractKObject.prototype.uuid = function () {
                        return this._uuid;
                    };
                    AbstractKObject.prototype.metaClass = function () {
                        return this._metaClass;
                    };
                    AbstractKObject.prototype.now = function () {
                        return this._time;
                    };
                    AbstractKObject.prototype.universe = function () {
                        return this._universe;
                    };
                    AbstractKObject.prototype.delete = function (cb) {
                        var selfPointer = this;
                        var rawPayload = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (rawPayload == null) {
                            if (cb != null) {
                                cb(new java.lang.Exception(AbstractKObject.OUT_OF_CACHE_MSG));
                            }
                        }
                        else {
                            var collector = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                            var metaElements = this._metaClass.metaElements();
                            for (var i = 0; i < metaElements.length; i++) {
                                if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                    var inboundsKeys = rawPayload.getLongArray(metaElements[i].index(), this._metaClass);
                                    for (var j = 0; j < inboundsKeys.length; j++) {
                                        collector.put(inboundsKeys[j], inboundsKeys[j]);
                                    }
                                    rawPayload.clearLongArray(metaElements[i].index(), this._metaClass);
                                }
                            }
                            var flatCollected = new Float64Array(collector.size());
                            var indexI = new Int32Array(1);
                            indexI[0] = 0;
                            collector.each(function (key, value) {
                                flatCollected[indexI[0]] = value;
                                indexI[0]++;
                            });
                            this._manager.lookupAllObjects(this._universe, this._time, flatCollected, function (resolved) {
                                for (var i = 0; i < resolved.length; i++) {
                                    if (resolved[i] != null) {
                                        var linkedReferences = resolved[i].referencesWith(selfPointer);
                                        for (var j = 0; j < linkedReferences.length; j++) {
                                            resolved[i].internal_mutate(org.kevoree.modeling.KActionType.REMOVE, linkedReferences[j], selfPointer, false);
                                        }
                                    }
                                }
                                if (cb != null) {
                                    cb(null);
                                }
                            });
                        }
                    };
                    AbstractKObject.prototype.select = function (query, cb) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(query)) {
                            cb(new Array());
                        }
                        else {
                            var singleRoot = new Array();
                            singleRoot[0] = this;
                            org.kevoree.modeling.traversal.query.impl.QueryEngine.getINSTANCE().eval(query, singleRoot, cb);
                        }
                    };
                    AbstractKObject.prototype.get = function (p_attribute) {
                        var transposed = this.internal_transpose_att(p_attribute);
                        if (transposed == null) {
                            throw new java.lang.RuntimeException("Bad KMF usage, the attribute named " + p_attribute.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            return transposed.strategy().extrapolate(this, transposed, this._manager);
                        }
                    };
                    AbstractKObject.prototype.getByName = function (attributeName) {
                        var transposed = this._metaClass.attribute(attributeName);
                        if (transposed != null) {
                            return transposed.strategy().extrapolate(this, transposed, this._manager);
                        }
                        else {
                            return null;
                        }
                    };
                    AbstractKObject.prototype.set = function (p_attribute, payload) {
                        var transposed = this.internal_transpose_att(p_attribute);
                        if (transposed == null) {
                            throw new java.lang.RuntimeException("Bad KMF usage, the attribute named " + p_attribute.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            transposed.strategy().mutate(this, transposed, payload, this._manager);
                        }
                    };
                    AbstractKObject.prototype.setByName = function (attributeName, payload) {
                        var transposed = this._metaClass.attribute(attributeName);
                        if (transposed != null) {
                            transposed.strategy().mutate(this, transposed, payload, this._manager);
                        }
                    };
                    AbstractKObject.prototype.addByName = function (relationName, objToAdd) {
                        var transposed = this._metaClass.reference(relationName);
                        if (transposed != null) {
                            this.mutate(org.kevoree.modeling.KActionType.ADD, transposed, objToAdd);
                        }
                    };
                    AbstractKObject.prototype.removeByName = function (relationName, objToAdd) {
                        var transposed = this._metaClass.reference(relationName);
                        if (transposed != null) {
                            this.mutate(org.kevoree.modeling.KActionType.REMOVE, transposed, objToAdd);
                        }
                    };
                    AbstractKObject.prototype.mutate = function (actionType, metaReference, param) {
                        this.internal_mutate(actionType, metaReference, param, true);
                    };
                    AbstractKObject.prototype.internal_mutate = function (actionType, metaReferenceP, param, setOpposite) {
                        var metaReference = this.internal_transpose_ref(metaReferenceP);
                        if (metaReference == null) {
                            if (metaReferenceP == null) {
                                throw new java.lang.RuntimeException("Bad KMF usage, the reference " + " is null in metaClass named " + this.metaClass().metaName());
                            }
                            else {
                                throw new java.lang.RuntimeException("Bad KMF usage, the reference named " + metaReferenceP.metaName() + " is not part of " + this.metaClass().metaName());
                            }
                        }
                        if (actionType.equals(org.kevoree.modeling.KActionType.ADD)) {
                            if (metaReference.single()) {
                                this.internal_mutate(org.kevoree.modeling.KActionType.SET, metaReference, param, setOpposite);
                            }
                            else {
                                var raw = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                                if (raw != null) {
                                    if (raw.addLongToArray(metaReference.index(), param.uuid(), this._metaClass)) {
                                        if (setOpposite) {
                                            param.internal_mutate(org.kevoree.modeling.KActionType.ADD, metaReference.opposite(), this, false);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (actionType.equals(org.kevoree.modeling.KActionType.SET)) {
                                if (!metaReference.single()) {
                                    this.internal_mutate(org.kevoree.modeling.KActionType.ADD, metaReference, param, setOpposite);
                                }
                                else {
                                    if (param == null) {
                                        this.internal_mutate(org.kevoree.modeling.KActionType.REMOVE, metaReference, null, setOpposite);
                                    }
                                    else {
                                        var payload = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                                        var previous = payload.getLongArray(metaReference.index(), this._metaClass);
                                        var singleValue = new Float64Array(1);
                                        singleValue[0] = param.uuid();
                                        payload.setPrimitiveType(metaReference.index(), singleValue, this._metaClass);
                                        if (setOpposite) {
                                            if (previous != null) {
                                                var self = this;
                                                this._manager.lookupAllObjects(this._universe, this._time, previous, function (kObjects) {
                                                    for (var i = 0; i < kObjects.length; i++) {
                                                        kObjects[i].internal_mutate(org.kevoree.modeling.KActionType.REMOVE, metaReference.opposite(), self, false);
                                                    }
                                                    param.internal_mutate(org.kevoree.modeling.KActionType.ADD, metaReference.opposite(), self, false);
                                                });
                                            }
                                            else {
                                                param.internal_mutate(org.kevoree.modeling.KActionType.ADD, metaReference.opposite(), this, false);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (actionType.equals(org.kevoree.modeling.KActionType.REMOVE)) {
                                    if (metaReference.single()) {
                                        var raw = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                                        var previousKid = raw.getLongArray(metaReference.index(), this._metaClass);
                                        raw.setPrimitiveType(metaReference.index(), null, this._metaClass);
                                        if (setOpposite) {
                                            if (previousKid != null) {
                                                var self = this;
                                                this._manager.lookupAllObjects(this._universe, this._time, previousKid, function (resolvedParams) {
                                                    if (resolvedParams != null) {
                                                        for (var dd = 0; dd < resolvedParams.length; dd++) {
                                                            if (resolvedParams[dd] != null) {
                                                                resolvedParams[dd].internal_mutate(org.kevoree.modeling.KActionType.REMOVE, metaReference.opposite(), self, false);
                                                            }
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    }
                                    else {
                                        var payload = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                                        if (payload != null) {
                                            if (payload.removeLongToArray(metaReference.index(), param.uuid(), this._metaClass)) {
                                                if (setOpposite) {
                                                    param.internal_mutate(org.kevoree.modeling.KActionType.REMOVE, metaReference.opposite(), this, false);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                    AbstractKObject.prototype.size = function (p_metaReference) {
                        var transposed = this.internal_transpose_ref(p_metaReference);
                        if (transposed == null) {
                            throw new java.lang.RuntimeException("Bad KMF usage, the attribute named " + p_metaReference.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                            if (raw != null) {
                                var ref = raw.getPrimitiveType(transposed.index(), this._metaClass);
                                if (ref == null) {
                                    return 0;
                                }
                                else {
                                    try {
                                        var castedRefArray = ref;
                                        return castedRefArray.length;
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof java.lang.Exception) {
                                            var e = $ex$;
                                            e.printStackTrace();
                                            return 0;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                            }
                            else {
                                return 0;
                            }
                        }
                    };
                    AbstractKObject.prototype.ref = function (p_metaReference, cb) {
                        var transposed = this.internal_transpose_ref(p_metaReference);
                        if (transposed == null) {
                            throw new java.lang.RuntimeException("Bad KMF usage, the reference named " + p_metaReference.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                            if (raw == null) {
                                cb(new Array());
                            }
                            else {
                                var o = raw.getLongArray(transposed.index(), this._metaClass);
                                if (o == null) {
                                    cb(new Array());
                                }
                                else {
                                    this._manager.lookupAllObjects(this._universe, this._time, o, cb);
                                }
                            }
                        }
                    };
                    AbstractKObject.prototype.getRefValuesByName = function (p_refName) {
                        var transposed = this.internal_transpose_ref(this.metaClass().reference(p_refName));
                        if (transposed == null) {
                            throw new java.lang.RuntimeException("Bad KMF usage, the reference named " + p_refName + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                            if (raw == null) {
                                return new Float64Array(0);
                            }
                            else {
                                var o = raw.getLongArray(transposed.index(), this._metaClass);
                                if (o == null) {
                                    return new Float64Array(0);
                                }
                                else {
                                    return o;
                                }
                            }
                        }
                    };
                    AbstractKObject.prototype.visitAttributes = function (visitor) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(visitor)) {
                            return;
                        }
                        var metaElements = this.metaClass().metaElements();
                        for (var i = 0; i < metaElements.length; i++) {
                            if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                var metaAttribute = metaElements[i];
                                visitor(metaAttribute, this.get(metaAttribute));
                            }
                        }
                    };
                    AbstractKObject.prototype.visit = function (p_visitor, cb) {
                        this.internal_visit(p_visitor, cb, new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null), new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null));
                    };
                    AbstractKObject.prototype.internal_visit = function (visitor, end, visited, traversed) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(visitor)) {
                            return;
                        }
                        if (traversed != null) {
                            traversed.put(this._uuid, this._uuid);
                        }
                        var toResolveIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                        var metaElements = this.metaClass().metaElements();
                        for (var i = 0; i < metaElements.length; i++) {
                            if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                var reference = metaElements[i];
                                var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                                if (raw != null) {
                                    var idArr = raw.getLongArray(reference.index(), this._metaClass);
                                    if (idArr != null) {
                                        try {
                                            for (var k = 0; k < idArr.length; k++) {
                                                if (traversed == null || !traversed.contains(idArr[k])) {
                                                    toResolveIds.put(idArr[k], idArr[k]);
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (toResolveIds.size() == 0) {
                            if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                end(null);
                            }
                        }
                        else {
                            var trimmed = new Float64Array(toResolveIds.size());
                            var inserted = new Int32Array([0]);
                            toResolveIds.each(function (key, value) {
                                trimmed[inserted[0]] = value;
                                inserted[0]++;
                            });
                            this._manager.lookupAllObjects(this._universe, this._time, trimmed, function (resolvedArr) {
                                var nextDeep = new java.util.ArrayList();
                                for (var i = 0; i < resolvedArr.length; i++) {
                                    var resolved = resolvedArr[i];
                                    var result = org.kevoree.modeling.traversal.visitor.KVisitResult.CONTINUE;
                                    if (resolved != null) {
                                        if (visitor != null && (visited == null || !visited.contains(resolved.uuid()))) {
                                            result = visitor(resolved);
                                        }
                                        if (visited != null) {
                                            visited.put(resolved.uuid(), resolved.uuid());
                                        }
                                    }
                                    if (result != null && result.equals(org.kevoree.modeling.traversal.visitor.KVisitResult.STOP)) {
                                        if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                            end(null);
                                        }
                                    }
                                    else {
                                        if (result.equals(org.kevoree.modeling.traversal.visitor.KVisitResult.CONTINUE)) {
                                            if (traversed == null || !traversed.contains(resolved.uuid())) {
                                                nextDeep.add(resolved);
                                            }
                                        }
                                    }
                                }
                                if (!nextDeep.isEmpty()) {
                                    var index = new Int32Array(1);
                                    index[0] = 0;
                                    var next = new java.util.ArrayList();
                                    next.add(function (throwable) {
                                        index[0] = index[0] + 1;
                                        if (index[0] == nextDeep.size()) {
                                            if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                                end(null);
                                            }
                                        }
                                        else {
                                            var abstractKObject = nextDeep.get(index[0]);
                                            abstractKObject.internal_visit(visitor, next.get(0), visited, traversed);
                                        }
                                    });
                                    var abstractKObject = nextDeep.get(index[0]);
                                    abstractKObject.internal_visit(visitor, next.get(0), visited, traversed);
                                }
                                else {
                                    if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                        end(null);
                                    }
                                }
                            });
                        }
                    };
                    AbstractKObject.prototype.toJSON = function () {
                        var builder = new java.lang.StringBuilder();
                        builder.append("{\"universe\":");
                        builder.append(this._universe);
                        builder.append(",\"time\":");
                        builder.append(this._time);
                        builder.append(",\"uuid\":");
                        builder.append(this._uuid);
                        var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (raw != null) {
                            builder.append(",\"data\":");
                            builder.append(raw.toJSON(this._manager.model().metaModel()));
                        }
                        builder.append("}");
                        return builder.toString();
                    };
                    AbstractKObject.prototype.toString = function () {
                        return this.toJSON();
                    };
                    AbstractKObject.prototype.equals = function (obj) {
                        if (!(obj instanceof org.kevoree.modeling.abs.AbstractKObject)) {
                            return false;
                        }
                        else {
                            var casted = obj;
                            return casted._uuid == this._uuid && casted._time == this._time && casted._universe == this._universe;
                        }
                    };
                    AbstractKObject.prototype.hashCode = function () {
                        return (this._universe ^ this._time ^ this._uuid);
                    };
                    AbstractKObject.prototype.jump = function (p_time, p_callback) {
                        this._manager.lookup(this._universe, p_time, this._uuid, p_callback);
                    };
                    AbstractKObject.prototype.internal_transpose_ref = function (p) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(p)) {
                            return null;
                        }
                        else {
                            return this.metaClass().metaByName(p.metaName());
                        }
                    };
                    AbstractKObject.prototype.internal_transpose_att = function (p) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(p)) {
                            return null;
                        }
                        else {
                            return this.metaClass().metaByName(p.metaName());
                        }
                    };
                    AbstractKObject.prototype.internal_transpose_op = function (p) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(p)) {
                            return null;
                        }
                        else {
                            return this.metaClass().metaByName(p.metaName());
                        }
                    };
                    AbstractKObject.prototype.traversal = function () {
                        var singleRoot = new Array();
                        singleRoot[0] = this;
                        return new org.kevoree.modeling.traversal.impl.Traversal(singleRoot);
                    };
                    AbstractKObject.prototype.referencesWith = function (o) {
                        if (org.kevoree.modeling.util.Checker.isDefined(o)) {
                            var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                            if (raw != null) {
                                var metaElements = this.metaClass().metaElements();
                                var selected = new java.util.ArrayList();
                                for (var i = 0; i < metaElements.length; i++) {
                                    if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                        var rawI = raw.getLongArray((metaElements[i].index()), this._metaClass);
                                        if (rawI != null) {
                                            var oUUID = o.uuid();
                                            for (var h = 0; h < rawI.length; h++) {
                                                if (rawI[h] == oUUID) {
                                                    selected.add(metaElements[i]);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                return selected.toArray(new Array());
                            }
                            else {
                                return new Array();
                            }
                        }
                        else {
                            return new Array();
                        }
                    };
                    AbstractKObject.prototype.call = function (p_operation, p_params, cb) {
                        this._manager.operationManager().call(this, p_operation, p_params, cb);
                    };
                    AbstractKObject.prototype.manager = function () {
                        return this._manager;
                    };
                    AbstractKObject.prototype.internal_times = function (start, end, cb) {
                        this._manager.resolveTimes(this._universe, this._uuid, start, end, cb);
                    };
                    AbstractKObject.prototype.allTimes = function (cb) {
                        this.internal_times(org.kevoree.modeling.KConfig.BEGINNING_OF_TIME, org.kevoree.modeling.KConfig.END_OF_TIME, cb);
                    };
                    AbstractKObject.prototype.timesBefore = function (endOfSearch, cb) {
                        this.internal_times(org.kevoree.modeling.KConfig.BEGINNING_OF_TIME, endOfSearch, cb);
                    };
                    AbstractKObject.prototype.timesAfter = function (beginningOfSearch, cb) {
                        this.internal_times(beginningOfSearch, org.kevoree.modeling.KConfig.END_OF_TIME, cb);
                    };
                    AbstractKObject.prototype.timesBetween = function (beginningOfSearch, endOfSearch, cb) {
                        this.internal_times(beginningOfSearch, endOfSearch, cb);
                    };
                    AbstractKObject.OUT_OF_CACHE_MSG = "Out of cache Error";
                    AbstractKObject.UNIVERSE_PREVIOUS_INDEX = 0;
                    AbstractKObject.TIME_PREVIOUS_INDEX = 1;
                    return AbstractKObject;
                })();
                abs.AbstractKObject = AbstractKObject;
                var AbstractKObjectInfer = (function (_super) {
                    __extends(AbstractKObjectInfer, _super);
                    function AbstractKObjectInfer(p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime) {
                        _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime);
                    }
                    AbstractKObjectInfer.prototype.dependenciesResolver = function (dependencies) {
                        var _this = this;
                        return function (indexName) {
                            var dependency = _this._metaClass.dependencies().dependencyByName(indexName);
                            if (dependency != null) {
                                var single = new Array();
                                single[0] = dependencies[dependency.index()];
                                return single;
                            }
                            return null;
                        };
                    };
                    AbstractKObjectInfer.prototype.genericTrain = function (dependencies, expectedOutputs, callback) {
                        var all_dependencies = new Array(new Array());
                        all_dependencies[0] = dependencies;
                        var all_expectedOutputs = null;
                        if (expectedOutputs != null) {
                            all_expectedOutputs = new Array(new Array());
                            all_expectedOutputs[0] = expectedOutputs;
                        }
                        this.genericTrainAll(all_dependencies, all_expectedOutputs, callback);
                    };
                    AbstractKObjectInfer.prototype.genericTrainAll = function (p_dependencies, p_outputs, callback) {
                        var _this = this;
                        if (p_dependencies == null) {
                            throw new java.lang.RuntimeException("Dependencies are mandatory for KObjectInfer");
                        }
                        var selfObject = this;
                        var waiter = this.manager().model().defer();
                        for (var i = 0; i < p_dependencies.length; i++) {
                            if (p_dependencies[i].length != this._metaClass.dependencies().allDependencies().length) {
                                throw new java.lang.RuntimeException("Bad number of arguments for allDependencies");
                            }
                            var resolver = this.dependenciesResolver(p_dependencies[i]);
                            for (var j = 0; j < this._metaClass.inputs().length; j++) {
                                this._metaClass.inputs()[j].extractor().exec(null, resolver, waiter.waitResult());
                            }
                        }
                        waiter.then(function (results) {
                            var extractedInputs = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(p_dependencies.length, _this._metaClass.inputs().length);
                            var k = 0;
                            for (var i = 0; i < p_dependencies.length; i++) {
                                for (var j = 0; j < _this._metaClass.inputs().length; j++) {
                                    var extracted = results[k];
                                    if (extracted != null && extracted.length > 0) {
                                        extractedInputs.set(i, j, extracted[0]);
                                    }
                                    k++;
                                }
                            }
                            var extractedOutputs = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(1, _this._metaClass.inputs().length);
                            for (var i = 0; i < p_dependencies.length; i++) {
                                for (var j = 0; j < _this._metaClass.outputs().length; j++) {
                                    var metaInferOutput = _this._metaClass.outputs()[j];
                                    var currentOutputObject = null;
                                    if (p_outputs != null) {
                                        currentOutputObject = p_outputs[i][j];
                                    }
                                    extractedOutputs.set(i, j, _this.internalConvertOutput(currentOutputObject, metaInferOutput));
                                }
                            }
                            _this._metaClass.inferAlg().train(extractedInputs, extractedOutputs, selfObject, _this._manager);
                            if (callback != null) {
                                callback(null);
                            }
                        });
                    };
                    AbstractKObjectInfer.prototype.genericInfer = function (dependencies, callback) {
                        var all_dependencies = new Array(new Array());
                        all_dependencies[0] = dependencies;
                        this.genericInferAll(all_dependencies, function (objects) {
                            if (objects != null && objects.length > 0) {
                                callback(objects[0]);
                            }
                            else {
                                callback(null);
                            }
                        });
                    };
                    AbstractKObjectInfer.prototype.genericInferAll = function (p_dependencies, callback) {
                        var _this = this;
                        if (p_dependencies == null) {
                            throw new java.lang.RuntimeException("Bad number of arguments for allDependencies");
                        }
                        var selfObject = this;
                        var waiter = this.manager().model().defer();
                        for (var i = 0; i < p_dependencies.length; i++) {
                            if (p_dependencies[i].length != this._metaClass.dependencies().allDependencies().length) {
                                throw new java.lang.RuntimeException("Bad number of arguments for allDependencies");
                            }
                            var resolver = this.dependenciesResolver(p_dependencies[i]);
                            for (var j = 0; j < this._metaClass.inputs().length; j++) {
                                this._metaClass.inputs()[j].extractor().exec(null, resolver, waiter.waitResult());
                            }
                        }
                        waiter.then(function (results) {
                            var extractedInputs = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(p_dependencies.length, _this._metaClass.inputs().length);
                            var k = 0;
                            for (var i = 0; i < p_dependencies.length; i++) {
                                for (var j = 0; j < _this._metaClass.inputs().length; j++) {
                                    var extracted = results[k];
                                    if (extracted != null && extracted.length > 0) {
                                        extractedInputs.set(i, j, extracted[0]);
                                    }
                                    k++;
                                }
                            }
                            var extractedOutputs = _this._metaClass.inferAlg().infer(extractedInputs, selfObject, _this._manager);
                            var result = new Array(new Array());
                            for (var i = 0; i < extractedOutputs.nbRows(); i++) {
                                result[i] = new Array();
                                for (var j = 0; j < extractedOutputs.nbColumns(); j++) {
                                    result[i][j] = _this.internalReverseOutput(extractedOutputs.get(i, j), _this._metaClass.outputs()[j]);
                                }
                            }
                            callback(result);
                        });
                    };
                    AbstractKObjectInfer.prototype.resetLearning = function () {
                        throw new java.lang.RuntimeException("Not Implemented Yet!");
                    };
                    AbstractKObjectInfer.prototype.internalConvertOutput = function (output, metaOutput) {
                        if (output == null) {
                            return 0;
                        }
                        var typeId = metaOutput.type().id();
                        switch (typeId) {
                            case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                if (output.equals(true)) {
                                    return 1.0;
                                }
                                else {
                                    return 0.0;
                                }
                            case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                throw new java.lang.RuntimeException("String are not managed yet");
                            default:
                                if (metaOutput.type().isEnum()) {
                                    var metaEnum = metaOutput.type();
                                    if (output instanceof org.kevoree.modeling.meta.impl.MetaLiteral) {
                                        return output.index();
                                    }
                                    else {
                                        var literal = metaEnum.literalByName(output.toString());
                                        if (literal != null) {
                                            return literal.index();
                                        }
                                    }
                                }
                                return 0;
                        }
                    };
                    AbstractKObjectInfer.prototype.internalReverseOutput = function (inferred, metaOutput) {
                        var typeId = metaOutput.type().id();
                        switch (typeId) {
                            case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                if (inferred >= 0.5) {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                throw new java.lang.RuntimeException("String are not managed yet");
                            default:
                                if (metaOutput.type().isEnum()) {
                                    var ceiledInferred = this.math_ceil(inferred);
                                    var metaEnum = metaOutput.type();
                                    return metaEnum.literal(ceiledInferred);
                                }
                                return null;
                        }
                    };
                    AbstractKObjectInfer.prototype.math_ceil = function (toCeilValue) {
                        return Math.round(toCeilValue);
                    };
                    return AbstractKObjectInfer;
                })(org.kevoree.modeling.abs.AbstractKObject);
                abs.AbstractKObjectInfer = AbstractKObjectInfer;
                var AbstractKUniverse = (function () {
                    function AbstractKUniverse(p_key, p_manager) {
                        this._universe = p_key;
                        this._manager = p_manager;
                    }
                    AbstractKUniverse.prototype.key = function () {
                        return this._universe;
                    };
                    AbstractKUniverse.prototype.time = function (timePoint) {
                        if (timePoint <= org.kevoree.modeling.KConfig.END_OF_TIME && timePoint >= org.kevoree.modeling.KConfig.BEGINNING_OF_TIME) {
                            return this.internal_create(timePoint);
                        }
                        else {
                            throw new java.lang.RuntimeException("The selected Time " + timePoint + " is out of the range of KMF managed time");
                        }
                    };
                    AbstractKUniverse.prototype.internal_create = function (timePoint) {
                        throw "Abstract method";
                    };
                    AbstractKUniverse.prototype.equals = function (obj) {
                        if (!(obj instanceof org.kevoree.modeling.abs.AbstractKUniverse)) {
                            return false;
                        }
                        else {
                            var casted = obj;
                            return casted._universe == this._universe;
                        }
                    };
                    AbstractKUniverse.prototype.diverge = function () {
                        var casted = this._manager.model();
                        var nextKey = this._manager.nextUniverseKey();
                        var newUniverse = casted.internalCreateUniverse(nextKey);
                        this._manager.initUniverse(nextKey, this._universe);
                        return newUniverse;
                    };
                    AbstractKUniverse.prototype.lookupAllTimes = function (uuid, times, cb) {
                        this._manager.lookupAllTimes(this._universe, times, uuid, cb);
                    };
                    AbstractKUniverse.prototype.createListener = function () {
                        return this._manager.createListener(this._universe);
                    };
                    return AbstractKUniverse;
                })();
                abs.AbstractKUniverse = AbstractKUniverse;
                var AbstractKView = (function () {
                    function AbstractKView(p_universe, _time, p_manager) {
                        this._universe = p_universe;
                        this._time = _time;
                        this._manager = p_manager;
                    }
                    AbstractKView.prototype.now = function () {
                        return this._time;
                    };
                    AbstractKView.prototype.universe = function () {
                        return this._universe;
                    };
                    AbstractKView.prototype.setRoot = function (elem, cb) {
                        this._manager.setRoot(elem, cb);
                    };
                    AbstractKView.prototype.getRoot = function (cb) {
                        this._manager.getRoot(this._universe, this._time, cb);
                    };
                    AbstractKView.prototype.select = function (query, cb) {
                        if (org.kevoree.modeling.util.Checker.isDefined(cb)) {
                            if (query == null || query.length == 0) {
                                cb(new Array());
                            }
                            else {
                                this._manager.getRoot(this._universe, this._time, function (rootObj) {
                                    if (rootObj == null) {
                                        cb(new Array());
                                    }
                                    else {
                                        var singleRoot = new Array();
                                        singleRoot[0] = rootObj;
                                        org.kevoree.modeling.traversal.query.impl.QueryEngine.getINSTANCE().eval(query, singleRoot, cb);
                                    }
                                });
                            }
                        }
                    };
                    AbstractKView.prototype.lookup = function (kid, cb) {
                        this._manager.lookup(this._universe, this._time, kid, cb);
                    };
                    AbstractKView.prototype.lookupAll = function (keys, cb) {
                        this._manager.lookupAllObjects(this._universe, this._time, keys, cb);
                    };
                    AbstractKView.prototype.create = function (clazz) {
                        return this._manager.model().create(clazz, this._universe, this._time);
                    };
                    AbstractKView.prototype.createByName = function (metaClassName) {
                        return this.create(this._manager.model().metaModel().metaClassByName(metaClassName));
                    };
                    AbstractKView.prototype.json = function () {
                        return new org.kevoree.modeling.format.json.JsonFormat(this._universe, this._time, this._manager);
                    };
                    AbstractKView.prototype.xmi = function () {
                        return new org.kevoree.modeling.format.xmi.XmiFormat(this._universe, this._time, this._manager);
                    };
                    AbstractKView.prototype.equals = function (obj) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(obj)) {
                            return false;
                        }
                        if (!(obj instanceof org.kevoree.modeling.abs.AbstractKView)) {
                            return false;
                        }
                        else {
                            var casted = obj;
                            return casted._time == this._time && casted._universe == this._universe;
                        }
                    };
                    return AbstractKView;
                })();
                abs.AbstractKView = AbstractKView;
            })(abs = modeling.abs || (modeling.abs = {}));
            var cdn;
            (function (cdn) {
                var impl;
                (function (impl) {
                    var MemoryContentDeliveryDriver = (function () {
                        function MemoryContentDeliveryDriver() {
                            this.backend = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this.additionalInterceptors = null;
                        }
                        MemoryContentDeliveryDriver.prototype.atomicGetIncrement = function (key, cb) {
                            var result = this.backend.get(org.kevoree.modeling.KContentKey.toString(key, 0));
                            var nextV;
                            var previousV;
                            if (result != null) {
                                try {
                                    previousV = java.lang.Short.parseShort(result);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                        e.printStackTrace();
                                        previousV = java.lang.Short.MIN_VALUE;
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            }
                            else {
                                previousV = 0;
                            }
                            if (previousV == java.lang.Short.MAX_VALUE) {
                                nextV = java.lang.Short.MIN_VALUE;
                            }
                            else {
                                nextV = (previousV + 1);
                            }
                            this.backend.put(org.kevoree.modeling.KContentKey.toString(key, 0), "" + nextV);
                            cb(previousV);
                        };
                        MemoryContentDeliveryDriver.prototype.get = function (keys, callback) {
                            var nbKeys = keys.length / 3;
                            var values = new Array();
                            for (var i = 0; i < nbKeys; i++) {
                                values[i] = this.backend.get(org.kevoree.modeling.KContentKey.toString(keys, i));
                            }
                            if (callback != null) {
                                callback(values);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.put = function (p_keys, p_values, p_callback, excludeListener) {
                            var nbKeys = p_keys.length / 3;
                            for (var i = 0; i < nbKeys; i++) {
                                this.backend.put(org.kevoree.modeling.KContentKey.toString(p_keys, i), p_values[i]);
                            }
                            if (this.additionalInterceptors != null) {
                                this.additionalInterceptors.each(function (key, value) {
                                    if (value != null && key != excludeListener) {
                                        value(p_keys);
                                    }
                                });
                            }
                            if (p_callback != null) {
                                p_callback(null);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.remove = function (p_keys, callback) {
                            var nbKeys = p_keys.length / 3;
                            for (var i = 0; i < nbKeys; i++) {
                                this.backend.remove(org.kevoree.modeling.KContentKey.toString(p_keys, i));
                            }
                            if (callback != null) {
                                callback(null);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.connect = function (callback) {
                            if (callback != null) {
                                callback(null);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.close = function (callback) {
                            this.backend.clear();
                            callback(null);
                        };
                        MemoryContentDeliveryDriver.prototype.nextListenerID = function () {
                            return Math.random();
                        };
                        MemoryContentDeliveryDriver.prototype.addUpdateListener = function (p_interceptor) {
                            if (this.additionalInterceptors == null) {
                                this.additionalInterceptors = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            }
                            var newID = this.nextListenerID();
                            this.additionalInterceptors.put(newID, p_interceptor);
                            return newID;
                        };
                        MemoryContentDeliveryDriver.prototype.removeUpdateListener = function (id) {
                            if (this.additionalInterceptors != null) {
                                this.additionalInterceptors.remove(id);
                            }
                        };
                        return MemoryContentDeliveryDriver;
                    })();
                    impl.MemoryContentDeliveryDriver = MemoryContentDeliveryDriver;
                })(impl = cdn.impl || (cdn.impl = {}));
            })(cdn = modeling.cdn || (modeling.cdn = {}));
            var defer;
            (function (defer) {
                var impl;
                (function (impl) {
                    var Defer = (function () {
                        function Defer() {
                            this._nbExpectedResult = 0;
                            this._nbRecResult = 0;
                            this._results = null;
                            this._resultSize = 0;
                        }
                        Defer.prototype.waitResult = function () {
                            return this.informEndOrRegister(-1, null, null);
                        };
                        Defer.prototype.then = function (cb) {
                            this.informEndOrRegister(-1, null, cb);
                        };
                        Defer.prototype.informEndOrRegister = function (p_indexToInsert, p_result, p_end) {
                            var _this = this;
                            if (p_end == null) {
                                if (p_indexToInsert == -1) {
                                    var toInsert = this._nbExpectedResult;
                                    this._nbExpectedResult++;
                                    if (this._results == null || this._resultSize < this._nbExpectedResult) {
                                        var newResultSize = (this._nbExpectedResult == 0 ? 1 : this._nbExpectedResult << 1);
                                        var newResults = new Array();
                                        if (this._results != null) {
                                            System.arraycopy(this._results, 0, newResults, 0, this._resultSize);
                                        }
                                        this._resultSize = newResultSize;
                                        this._results = newResults;
                                    }
                                    return function (o) {
                                        _this.informEndOrRegister(toInsert, o, null);
                                    };
                                }
                                else {
                                    this._results[p_indexToInsert] = p_result;
                                    this._nbRecResult++;
                                    if (this._end != null && (this._nbExpectedResult == this._nbRecResult)) {
                                        var finalResults = this._results;
                                        if (this._resultSize != this._nbExpectedResult) {
                                            var newResults = new Array();
                                            System.arraycopy(this._results, 0, newResults, 0, this._nbExpectedResult);
                                            finalResults = newResults;
                                        }
                                        this._end(finalResults);
                                    }
                                }
                            }
                            else {
                                this._end = p_end;
                                if (this._nbExpectedResult == this._nbRecResult) {
                                    var finalResults = this._results;
                                    if (this._resultSize != this._nbExpectedResult) {
                                        var newResults = new Array();
                                        System.arraycopy(this._results, 0, newResults, 0, this._nbExpectedResult);
                                        finalResults = newResults;
                                    }
                                    this._end(finalResults);
                                }
                            }
                            return null;
                        };
                        return Defer;
                    })();
                    impl.Defer = Defer;
                })(impl = defer.impl || (defer.impl = {}));
            })(defer = modeling.defer || (modeling.defer = {}));
            var extrapolation;
            (function (extrapolation) {
                var impl;
                (function (impl) {
                    var DiscreteExtrapolation = (function () {
                        function DiscreteExtrapolation() {
                        }
                        DiscreteExtrapolation.instance = function () {
                            if (DiscreteExtrapolation.INSTANCE == null) {
                                DiscreteExtrapolation.INSTANCE = new org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation();
                            }
                            return DiscreteExtrapolation.INSTANCE;
                        };
                        DiscreteExtrapolation.prototype.extrapolate = function (current, attribute, dataManager) {
                            var payload = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (payload != null) {
                                if (attribute.attributeType().isEnum()) {
                                    return attribute.attributeType().literal(payload.getPrimitiveType(attribute.index(), current.metaClass()));
                                }
                                else {
                                    return payload.getPrimitiveType(attribute.index(), current.metaClass());
                                }
                            }
                            else {
                                return null;
                            }
                        };
                        DiscreteExtrapolation.prototype.mutate = function (current, attribute, payload, dataManager) {
                            var internalPayload = dataManager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (internalPayload != null) {
                                if (attribute.attributeType().isEnum()) {
                                    if (payload instanceof org.kevoree.modeling.meta.impl.MetaLiteral) {
                                        internalPayload.setPrimitiveType(attribute.index(), payload.index(), current.metaClass());
                                    }
                                    else {
                                        var metaEnum = attribute.attributeType();
                                        var foundLiteral = metaEnum.literalByName(payload.toString());
                                        if (foundLiteral != null) {
                                            internalPayload.setPrimitiveType(attribute.index(), foundLiteral.index(), current.metaClass());
                                        }
                                    }
                                }
                                else {
                                    if (payload == null) {
                                        internalPayload.setPrimitiveType(attribute.index(), null, current.metaClass());
                                    }
                                    else {
                                        internalPayload.setPrimitiveType(attribute.index(), this.convert(attribute, payload), current.metaClass());
                                    }
                                }
                            }
                        };
                        DiscreteExtrapolation.prototype.convert = function (attribute, payload) {
                            return payload;
                        };
                        return DiscreteExtrapolation;
                    })();
                    impl.DiscreteExtrapolation = DiscreteExtrapolation;
                    var PolynomialExtrapolation = (function () {
                        function PolynomialExtrapolation() {
                        }
                        PolynomialExtrapolation.prototype.extrapolate = function (current, attribute, dataManager) {
                            var raw = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (raw != null) {
                                var extrapolatedValue = this.extrapolateValue(raw, current.metaClass(), attribute.index(), current.now(), raw.time());
                                var attTypeId = attribute.attributeType().id();
                                switch (attTypeId) {
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                        return extrapolatedValue;
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                        return extrapolatedValue;
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                        return extrapolatedValue.longValue();
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                        return extrapolatedValue.intValue();
                                    default:
                                        return null;
                                }
                            }
                            else {
                                return null;
                            }
                        };
                        PolynomialExtrapolation.prototype.extrapolateValue = function (segment, meta, index, time, timeOrigin) {
                            if (segment.getDoubleArraySize(index, meta) == 0) {
                                return 0.0;
                            }
                            var result = 0;
                            var power = 1;
                            var inferSTEP = segment.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, meta);
                            if (inferSTEP == 0) {
                                return segment.getDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, meta);
                            }
                            var t = (time - timeOrigin) / inferSTEP;
                            for (var j = 0; j <= segment.getDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, meta); j++) {
                                result += segment.getDoubleArrayElem(index, (j + PolynomialExtrapolation.WEIGHTS), meta) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        PolynomialExtrapolation.prototype.maxErr = function (precision, degree) {
                            var tol = precision;
                            tol = precision / Math.pow(2, degree + 0.5);
                            return tol;
                        };
                        PolynomialExtrapolation.prototype.insert = function (time, value, timeOrigin, raw, index, precision, metaClass) {
                            if (raw.getDoubleArraySize(index, metaClass) == 0) {
                                this.initial_feed(time, value, raw, index, metaClass);
                                return true;
                            }
                            if (raw.getDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, metaClass) == 1) {
                                raw.setDoubleArrayElem(index, PolynomialExtrapolation.STEP, (time - timeOrigin), metaClass);
                            }
                            var deg = raw.getDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, metaClass);
                            var num = raw.getDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, metaClass);
                            var maxError = this.maxErr(precision, deg);
                            if (Math.abs(this.extrapolateValue(raw, metaClass, index, time, timeOrigin) - value) <= maxError) {
                                var nexNumSamples = raw.getDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, metaClass) + 1;
                                raw.setDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, nexNumSamples, metaClass);
                                raw.setDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, time - timeOrigin, metaClass);
                                return true;
                            }
                            var newMaxDegree = Math.min(num, PolynomialExtrapolation._maxDegree);
                            if (deg < newMaxDegree) {
                                deg++;
                                var ss = Math.min(deg * 2, num);
                                var times = new Float64Array(ss + 1);
                                var values = new Float64Array(ss + 1);
                                for (var i = 0; i < ss; i++) {
                                    times[i] = (i * num * (raw.getDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, metaClass)) / (ss * raw.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, metaClass)));
                                    values[i] = this.internal_extrapolate(times[i], raw, index, metaClass);
                                }
                                times[ss] = (time - timeOrigin) / raw.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, metaClass);
                                values[ss] = value;
                                var pf = new org.kevoree.modeling.util.maths.PolynomialFit(deg);
                                pf.fit(times, values);
                                if (this.tempError(pf.getCoef(), times, values) <= maxError) {
                                    raw.extendDoubleArray(index, (raw.getDoubleArraySize(index, metaClass) + 1), metaClass);
                                    for (var i = 0; i < pf.getCoef().length; i++) {
                                        raw.setDoubleArrayElem(index, i + PolynomialExtrapolation.WEIGHTS, pf.getCoef()[i], metaClass);
                                    }
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, deg, metaClass);
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, num + 1, metaClass);
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, time - timeOrigin, metaClass);
                                    return true;
                                }
                            }
                            return false;
                        };
                        PolynomialExtrapolation.prototype.tempError = function (computedWeights, times, values) {
                            var maxErr = 0;
                            var temp;
                            var ds;
                            for (var i = 0; i < times.length; i++) {
                                temp = Math.abs(values[i] - org.kevoree.modeling.util.maths.PolynomialFit.extrapolate(times[i], computedWeights));
                                if (temp > maxErr) {
                                    maxErr = temp;
                                }
                            }
                            return maxErr;
                        };
                        PolynomialExtrapolation.prototype.internal_extrapolate = function (t, raw, index, metaClass) {
                            var result = 0;
                            var power = 1;
                            if (raw.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, metaClass) == 0) {
                                return raw.getDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, metaClass);
                            }
                            for (var j = 0; j <= raw.getDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, metaClass); j++) {
                                result += raw.getDoubleArrayElem(index, (j + PolynomialExtrapolation.WEIGHTS), metaClass) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        PolynomialExtrapolation.prototype.initial_feed = function (time, value, raw, index, metaClass) {
                            raw.extendDoubleArray(index, PolynomialExtrapolation.WEIGHTS + 1, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, 0, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, 1, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, 0, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.STEP, 0, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, value, metaClass);
                        };
                        PolynomialExtrapolation.prototype.mutate = function (current, attribute, payload, dataManager) {
                            var raw = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (raw.getDoubleArraySize(attribute.index(), current.metaClass()) == 0) {
                                raw = dataManager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            }
                            if (!this.insert(current.now(), this.castNumber(payload), raw.time(), raw, attribute.index(), attribute.precision(), current.metaClass())) {
                                var prevTime = raw.getDoubleArrayElem(attribute.index(), PolynomialExtrapolation.LASTTIME, current.metaClass()) + raw.time();
                                var val = this.extrapolateValue(raw, current.metaClass(), attribute.index(), prevTime, raw.time());
                                var newSegment = dataManager.preciseChunk(current.universe(), prevTime, current.uuid(), current.metaClass(), current.previousResolved());
                                this.insert(prevTime, val, prevTime, newSegment, attribute.index(), attribute.precision(), current.metaClass());
                                this.insert(current.now(), this.castNumber(payload), prevTime, newSegment, attribute.index(), attribute.precision(), current.metaClass());
                            }
                        };
                        PolynomialExtrapolation.prototype.castNumber = function (payload) {
                            return +payload;
                        };
                        PolynomialExtrapolation.instance = function () {
                            if (PolynomialExtrapolation.INSTANCE == null) {
                                PolynomialExtrapolation.INSTANCE = new org.kevoree.modeling.extrapolation.impl.PolynomialExtrapolation();
                            }
                            return PolynomialExtrapolation.INSTANCE;
                        };
                        PolynomialExtrapolation._maxDegree = 20;
                        PolynomialExtrapolation.DEGREE = 0;
                        PolynomialExtrapolation.NUMSAMPLES = 1;
                        PolynomialExtrapolation.STEP = 2;
                        PolynomialExtrapolation.LASTTIME = 3;
                        PolynomialExtrapolation.WEIGHTS = 4;
                        return PolynomialExtrapolation;
                    })();
                    impl.PolynomialExtrapolation = PolynomialExtrapolation;
                })(impl = extrapolation.impl || (extrapolation.impl = {}));
            })(extrapolation = modeling.extrapolation || (modeling.extrapolation = {}));
            var format;
            (function (format) {
                var json;
                (function (json) {
                    var JsonFormat = (function () {
                        function JsonFormat(p_universe, p_time, p_manager) {
                            this._manager = p_manager;
                            this._universe = p_universe;
                            this._time = p_time;
                        }
                        JsonFormat.prototype.save = function (model, cb) {
                            if (org.kevoree.modeling.util.Checker.isDefined(model) && org.kevoree.modeling.util.Checker.isDefined(cb)) {
                                org.kevoree.modeling.format.json.JsonModelSerializer.serialize(model, cb);
                            }
                            else {
                                throw new java.lang.RuntimeException(JsonFormat.NULL_PARAM_MSG);
                            }
                        };
                        JsonFormat.prototype.saveRoot = function (cb) {
                            if (org.kevoree.modeling.util.Checker.isDefined(cb)) {
                                this._manager.getRoot(this._universe, this._time, function (root) {
                                    if (root == null) {
                                        cb(null);
                                    }
                                    else {
                                        org.kevoree.modeling.format.json.JsonModelSerializer.serialize(root, cb);
                                    }
                                });
                            }
                        };
                        JsonFormat.prototype.load = function (payload, cb) {
                            if (org.kevoree.modeling.util.Checker.isDefined(payload)) {
                                org.kevoree.modeling.format.json.JsonModelLoader.load(this._manager, this._universe, this._time, payload, cb);
                            }
                            else {
                                throw new java.lang.RuntimeException(JsonFormat.NULL_PARAM_MSG);
                            }
                        };
                        JsonFormat.KEY_META = "@class";
                        JsonFormat.KEY_UUID = "@uuid";
                        JsonFormat.KEY_ROOT = "@root";
                        JsonFormat.NULL_PARAM_MSG = "one parameter is null";
                        return JsonFormat;
                    })();
                    json.JsonFormat = JsonFormat;
                    var JsonModelLoader = (function () {
                        function JsonModelLoader() {
                        }
                        JsonModelLoader.load = function (manager, universe, time, payload, callback) {
                            if (payload == null) {
                                callback(null);
                            }
                            else {
                                var toLoadObj = JSON.parse(payload);
                                var rootElem = [];
                                var mappedKeys = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                for (var i = 0; i < toLoadObj.length; i++) {
                                    var elem = toLoadObj[i];
                                    var kid = elem[org.kevoree.modeling.format.json.JsonFormat.KEY_UUID];
                                    mappedKeys.put(kid, manager.nextObjectKey());
                                }
                                for (var i = 0; i < toLoadObj.length; i++) {
                                    var elemRaw = toLoadObj[i];
                                    var elem2 = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(Object.keys(elemRaw).length, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    for (var ik in elemRaw) {
                                        elem2[ik] = elemRaw[ik];
                                    }
                                    try {
                                        org.kevoree.modeling.format.json.JsonModelLoader.loadObj(elem2, manager, universe, time, mappedKeys, rootElem);
                                    }
                                    catch (e) {
                                        console.error(e);
                                    }
                                }
                                if (rootElem[0] != null) {
                                    manager.setRoot(rootElem[0], function (throwable) { if (callback != null) {
                                        callback(throwable);
                                    } });
                                }
                                else {
                                    if (callback != null) {
                                        callback(null);
                                    }
                                }
                            }
                        };
                        JsonModelLoader.loadObj = function (p_param, manager, universe, time, p_mappedKeys, p_rootElem) {
                            var kid = java.lang.Long.parseLong(p_param.get(org.kevoree.modeling.format.json.JsonFormat.KEY_UUID).toString());
                            var meta = p_param.get(org.kevoree.modeling.format.json.JsonFormat.KEY_META).toString();
                            var metaClass = manager.model().metaModel().metaClassByName(meta);
                            var current = manager.model().createProxy(universe, time, p_mappedKeys.get(kid), metaClass, universe, time);
                            manager.initKObject(current);
                            var raw = manager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            p_param.each(function (metaKey, payload_content) {
                                if (metaKey.equals(org.kevoree.modeling.format.json.JsonFormat.KEY_ROOT)) {
                                    p_rootElem[0] = current;
                                }
                                else {
                                    var metaElement = metaClass.metaByName(metaKey);
                                    if (payload_content != null) {
                                        if (metaElement != null && metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                            var metaAttribute = metaElement;
                                            var metaAttId = metaAttribute.attributeType().id();
                                            switch (metaAttId) {
                                                case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                    var plainRawSet = p_param.get(metaAttribute.metaName());
                                                    var convertedRaw = new Float64Array(plainRawSet.length);
                                                    for (var l = 0; l < plainRawSet.length; l++) {
                                                        try {
                                                            convertedRaw[l] = java.lang.Double.parseDouble(plainRawSet[l]);
                                                        }
                                                        catch ($ex$) {
                                                            if ($ex$ instanceof java.lang.Exception) {
                                                                var e = $ex$;
                                                                e.printStackTrace();
                                                            }
                                                            else {
                                                                throw $ex$;
                                                            }
                                                        }
                                                    }
                                                    raw.setPrimitiveType(metaElement.index(), convertedRaw, current.metaClass());
                                                    break;
                                                default:
                                                    var converted = null;
                                                    var rawPayload = p_param.get(metaElement.metaName()).toString();
                                                    if (metaAttribute.attributeType() == org.kevoree.modeling.meta.KPrimitiveTypes.STRING) {
                                                        converted = org.kevoree.modeling.format.json.JsonString.unescape(rawPayload);
                                                    }
                                                    else {
                                                        if (metaAttribute.attributeType() == org.kevoree.modeling.meta.KPrimitiveTypes.LONG) {
                                                            converted = java.lang.Long.parseLong(rawPayload);
                                                        }
                                                        else {
                                                            if (metaAttribute.attributeType() == org.kevoree.modeling.meta.KPrimitiveTypes.INT) {
                                                                converted = java.lang.Integer.parseInt(rawPayload);
                                                            }
                                                            else {
                                                                if (metaAttribute.attributeType() == org.kevoree.modeling.meta.KPrimitiveTypes.BOOL) {
                                                                    converted = java.lang.Boolean.parseBoolean(rawPayload);
                                                                }
                                                                else {
                                                                    if (metaAttribute.attributeType() == org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE) {
                                                                        converted = java.lang.Double.parseDouble(rawPayload);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    raw.setPrimitiveType(metaElement.index(), converted, current.metaClass());
                                                    break;
                                            }
                                        }
                                        else {
                                            if (metaElement != null && metaElement.metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                try {
                                                    raw.setPrimitiveType(metaElement.index(), org.kevoree.modeling.format.json.JsonModelLoader.transposeArr(payload_content, p_mappedKeys), current.metaClass());
                                                }
                                                catch ($ex$) {
                                                    if ($ex$ instanceof java.lang.Exception) {
                                                        var e = $ex$;
                                                        e.printStackTrace();
                                                    }
                                                    else {
                                                        throw $ex$;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                        };
                        JsonModelLoader.transposeArr = function (plainRawSet, p_mappedKeys) {
                            if (plainRawSet == null) {
                                return null;
                            }
                            var sizeOfL = org.kevoree.modeling.format.json.JsonModelLoader.sizeOfList(plainRawSet);
                            var convertedRaw = new Float64Array(sizeOfL);
                            for (var l = 0; l < sizeOfL; l++) {
                                try {
                                    var converted = java.lang.Long.parseLong(org.kevoree.modeling.format.json.JsonModelLoader.getString(plainRawSet, l));
                                    if (p_mappedKeys.contains(converted)) {
                                        converted = p_mappedKeys.get(converted);
                                    }
                                    convertedRaw[l] = converted;
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                        e.printStackTrace();
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            }
                            return convertedRaw;
                        };
                        JsonModelLoader.sizeOfList = function (plainRawSet) {
                            if (plainRawSet != null && plainRawSet != undefined) {
                                if (plainRawSet.size != undefined) {
                                    return plainRawSet.size();
                                }
                                else {
                                    return plainRawSet.length;
                                }
                            }
                        };
                        JsonModelLoader.getString = function (plainRawSet, l) {
                            if (plainRawSet.get != undefined) {
                                return plainRawSet.get(l);
                            }
                            else {
                                return plainRawSet[l];
                            }
                        };
                        return JsonModelLoader;
                    })();
                    json.JsonModelLoader = JsonModelLoader;
                    var JsonModelSerializer = (function () {
                        function JsonModelSerializer() {
                        }
                        JsonModelSerializer.serialize = function (model, callback) {
                            model._manager.getRoot(model.universe(), model.now(), function (rootObj) {
                                var isRoot = false;
                                if (rootObj != null) {
                                    isRoot = rootObj.uuid() == model.uuid();
                                }
                                var builder = new java.lang.StringBuilder();
                                builder.append("[\n");
                                org.kevoree.modeling.format.json.JsonModelSerializer.printJSON(model, builder, isRoot);
                                model.visit(function (elem) {
                                    var isRoot2 = false;
                                    if (rootObj != null) {
                                        isRoot2 = rootObj.uuid() == elem.uuid();
                                    }
                                    builder.append(",\n");
                                    try {
                                        org.kevoree.modeling.format.json.JsonModelSerializer.printJSON(elem, builder, isRoot2);
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof java.lang.Exception) {
                                            var e = $ex$;
                                            e.printStackTrace();
                                            builder.append("{}");
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                    return org.kevoree.modeling.traversal.visitor.KVisitResult.CONTINUE;
                                }, function (throwable) {
                                    builder.append("\n]\n");
                                    callback(builder.toString());
                                });
                            });
                        };
                        JsonModelSerializer.printJSON = function (elem, builder, isRoot) {
                            if (elem != null) {
                                var raw = elem._manager.closestChunk(elem.universe(), elem.now(), elem.uuid(), elem.metaClass(), elem.previousResolved());
                                if (raw != null) {
                                    builder.append(org.kevoree.modeling.format.json.JsonRaw.encode(raw, elem.uuid(), elem.metaClass(), isRoot));
                                }
                            }
                        };
                        return JsonModelSerializer;
                    })();
                    json.JsonModelSerializer = JsonModelSerializer;
                    var JsonObjectReader = (function () {
                        function JsonObjectReader() {
                        }
                        JsonObjectReader.prototype.parseObject = function (payload) {
                            this.readObject = JSON.parse(payload);
                        };
                        JsonObjectReader.prototype.get = function (name) {
                            return this.readObject[name];
                        };
                        JsonObjectReader.prototype.getAsStringArray = function (name) {
                            return this.readObject[name];
                        };
                        JsonObjectReader.prototype.keys = function () {
                            var keysArr = [];
                            for (var key in this.readObject) {
                                keysArr.push(key);
                            }
                            return keysArr;
                        };
                        return JsonObjectReader;
                    })();
                    json.JsonObjectReader = JsonObjectReader;
                    var JsonRaw = (function () {
                        function JsonRaw() {
                        }
                        JsonRaw.encode = function (raw, uuid, p_metaClass, isRoot) {
                            var builder = new java.lang.StringBuilder();
                            builder.append("{\"@class\":\"");
                            builder.append(p_metaClass.metaName());
                            builder.append("\",\"@uuid\":");
                            builder.append(uuid);
                            if (isRoot) {
                                builder.append(",\"" + org.kevoree.modeling.format.json.JsonFormat.KEY_ROOT + "\":true");
                            }
                            var metaElements = p_metaClass.metaElements();
                            for (var i = 0; i < metaElements.length; i++) {
                                var loopMeta = metaElements[i];
                                if (loopMeta != null && loopMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                    var metaAttribute = loopMeta;
                                    var metaAttId = metaAttribute.attributeType().id();
                                    if (metaAttId == org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID) {
                                        var inferAtt = raw.getDoubleArray(loopMeta.index(), p_metaClass);
                                        if (inferAtt != null) {
                                            builder.append(",\"");
                                            builder.append(loopMeta.metaName());
                                            builder.append("\":[");
                                            for (var j = 0; j < inferAtt.length; j++) {
                                                if (j != 0) {
                                                    builder.append(",");
                                                }
                                                builder.append(inferAtt[j]);
                                            }
                                            builder.append("]");
                                        }
                                    }
                                    else {
                                        var payload_res = raw.getPrimitiveType(loopMeta.index(), p_metaClass);
                                        if (payload_res != null) {
                                            builder.append(",\"");
                                            builder.append(loopMeta.metaName());
                                            builder.append("\":\"");
                                            if (metaAttId == org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID) {
                                                builder.append(org.kevoree.modeling.format.json.JsonString.encode(payload_res.toString()));
                                            }
                                            else {
                                                builder.append(payload_res.toString());
                                            }
                                            builder.append("\"");
                                        }
                                    }
                                }
                                else {
                                    if (loopMeta != null && loopMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.REFERENCE)) {
                                        var refPayload = raw.getLongArray(loopMeta.index(), p_metaClass);
                                        if (refPayload != null) {
                                            builder.append(",\"");
                                            builder.append(loopMeta.metaName());
                                            builder.append("\":[");
                                            for (var j = 0; j < refPayload.length; j++) {
                                                if (j != 0) {
                                                    builder.append(",");
                                                }
                                                builder.append(refPayload[j]);
                                            }
                                            builder.append("]");
                                        }
                                    }
                                }
                            }
                            builder.append("}");
                            return builder.toString();
                        };
                        return JsonRaw;
                    })();
                    json.JsonRaw = JsonRaw;
                    var JsonString = (function () {
                        function JsonString() {
                        }
                        JsonString.encodeBuffer = function (buffer, chain) {
                            if (chain == null) {
                                return;
                            }
                            var i = 0;
                            while (i < chain.length) {
                                var ch = chain.charAt(i);
                                if (ch == '"') {
                                    buffer.append(JsonString.ESCAPE_CHAR);
                                    buffer.append('"');
                                }
                                else {
                                    if (ch == JsonString.ESCAPE_CHAR) {
                                        buffer.append(JsonString.ESCAPE_CHAR);
                                        buffer.append(JsonString.ESCAPE_CHAR);
                                    }
                                    else {
                                        if (ch == '\n') {
                                            buffer.append(JsonString.ESCAPE_CHAR);
                                            buffer.append('n');
                                        }
                                        else {
                                            if (ch == '\r') {
                                                buffer.append(JsonString.ESCAPE_CHAR);
                                                buffer.append('r');
                                            }
                                            else {
                                                if (ch == '\t') {
                                                    buffer.append(JsonString.ESCAPE_CHAR);
                                                    buffer.append('t');
                                                }
                                                else {
                                                    if (ch == '\u2028') {
                                                        buffer.append(JsonString.ESCAPE_CHAR);
                                                        buffer.append('u');
                                                        buffer.append('2');
                                                        buffer.append('0');
                                                        buffer.append('2');
                                                        buffer.append('8');
                                                    }
                                                    else {
                                                        if (ch == '\u2029') {
                                                            buffer.append(JsonString.ESCAPE_CHAR);
                                                            buffer.append('u');
                                                            buffer.append('2');
                                                            buffer.append('0');
                                                            buffer.append('2');
                                                            buffer.append('9');
                                                        }
                                                        else {
                                                            buffer.append(ch);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                i = i + 1;
                            }
                        };
                        JsonString.encode = function (p_chain) {
                            var sb = new java.lang.StringBuilder();
                            org.kevoree.modeling.format.json.JsonString.encodeBuffer(sb, p_chain);
                            return sb.toString();
                        };
                        JsonString.unescape = function (p_src) {
                            if (p_src == null) {
                                return null;
                            }
                            if (p_src.length == 0) {
                                return p_src;
                            }
                            var builder = null;
                            var i = 0;
                            while (i < p_src.length) {
                                var current = p_src.charAt(i);
                                if (current == JsonString.ESCAPE_CHAR) {
                                    if (builder == null) {
                                        builder = new java.lang.StringBuilder();
                                        builder.append(p_src.substring(0, i));
                                    }
                                    i++;
                                    var current2 = p_src.charAt(i);
                                    switch (current2) {
                                        case '"':
                                            builder.append('\"');
                                            break;
                                        case '\\':
                                            builder.append(current2);
                                            break;
                                        case '/':
                                            builder.append(current2);
                                            break;
                                        case 'b':
                                            builder.append('\b');
                                            break;
                                        case 'f':
                                            builder.append('\f');
                                            break;
                                        case 'n':
                                            builder.append('\n');
                                            break;
                                        case 'r':
                                            builder.append('\r');
                                            break;
                                        case 't':
                                            builder.append('\t');
                                            break;
                                        case '{':
                                            builder.append("\\{");
                                            break;
                                        case '}':
                                            builder.append("\\}");
                                            break;
                                        case '[':
                                            builder.append("\\[");
                                            break;
                                        case ']':
                                            builder.append("\\]");
                                            break;
                                        case ',':
                                            builder.append("\\,");
                                            break;
                                    }
                                }
                                else {
                                    if (builder != null) {
                                        builder = builder.append(current);
                                    }
                                }
                                i++;
                            }
                            if (builder != null) {
                                return builder.toString();
                            }
                            else {
                                return p_src;
                            }
                        };
                        JsonString.ESCAPE_CHAR = '\\';
                        return JsonString;
                    })();
                    json.JsonString = JsonString;
                })(json = format.json || (format.json = {}));
                var xmi;
                (function (xmi) {
                    var SerializationContext = (function () {
                        function SerializationContext() {
                            this.ignoreGeneratedID = false;
                            this.addressTable = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this.elementsCount = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this.packageList = new java.util.ArrayList();
                        }
                        return SerializationContext;
                    })();
                    xmi.SerializationContext = SerializationContext;
                    var XMILoadingContext = (function () {
                        function XMILoadingContext() {
                            this.loadedRoots = null;
                            this.resolvers = new java.util.ArrayList();
                            this.map = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this.elementsCount = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        return XMILoadingContext;
                    })();
                    xmi.XMILoadingContext = XMILoadingContext;
                    var XMIModelLoader = (function () {
                        function XMIModelLoader() {
                        }
                        XMIModelLoader.unescapeXml = function (src) {
                            var builder = null;
                            var i = 0;
                            while (i < src.length) {
                                var c = src.charAt(i);
                                if (c == '&') {
                                    if (builder == null) {
                                        builder = new java.lang.StringBuilder();
                                        builder.append(src.substring(0, i));
                                    }
                                    if (src.charAt(i + 1) == 'a') {
                                        if (src.charAt(i + 2) == 'm') {
                                            builder.append("&");
                                            i = i + 5;
                                        }
                                        else {
                                            if (src.charAt(i + 2) == 'p') {
                                                builder.append("'");
                                                i = i + 6;
                                            }
                                        }
                                    }
                                    else {
                                        if (src.charAt(i + 1) == 'q') {
                                            builder.append("\"");
                                            i = i + 6;
                                        }
                                        else {
                                            if (src.charAt(i + 1) == 'l') {
                                                builder.append("<");
                                                i = i + 4;
                                            }
                                            else {
                                                if (src.charAt(i + 1) == 'g') {
                                                    builder.append(">");
                                                    i = i + 4;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (builder != null) {
                                        builder.append(c);
                                    }
                                    i++;
                                }
                            }
                            if (builder != null) {
                                return builder.toString();
                            }
                            else {
                                return src;
                            }
                        };
                        XMIModelLoader.load = function (manager, universe, time, str, callback) {
                            var parser = new org.kevoree.modeling.format.xmi.XmlParser(str);
                            if (!parser.hasNext()) {
                                callback(null);
                            }
                            else {
                                var context = new org.kevoree.modeling.format.xmi.XMILoadingContext();
                                context.successCallback = callback;
                                context.xmiReader = parser;
                                org.kevoree.modeling.format.xmi.XMIModelLoader.deserialize(manager, universe, time, context);
                            }
                        };
                        XMIModelLoader.deserialize = function (manager, universe, time, context) {
                            try {
                                var nsURI;
                                var reader = context.xmiReader;
                                while (reader.hasNext()) {
                                    var nextTag = reader.next();
                                    if (nextTag.equals(org.kevoree.modeling.format.xmi.XmlToken.START_TAG)) {
                                        var localName = reader.getLocalName();
                                        if (localName != null) {
                                            var ns = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(reader.getAttributeCount(), org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                            for (var i = 0; i < reader.getAttributeCount() - 1; i++) {
                                                var attrLocalName = reader.getAttributeLocalName(i);
                                                var attrLocalValue = reader.getAttributeValue(i);
                                                if (attrLocalName.equals(XMIModelLoader.LOADER_XMI_NS_URI)) {
                                                    nsURI = attrLocalValue;
                                                }
                                                ns.put(attrLocalName, attrLocalValue);
                                            }
                                            var xsiType = reader.getTagPrefix();
                                            var realTypeName = ns.get(xsiType);
                                            if (realTypeName == null) {
                                                realTypeName = xsiType;
                                            }
                                            context.loadedRoots = org.kevoree.modeling.format.xmi.XMIModelLoader.loadObject(manager, universe, time, context, "/", xsiType + "." + localName);
                                        }
                                    }
                                }
                                for (var i = 0; i < context.resolvers.size(); i++) {
                                    context.resolvers.get(i).run();
                                }
                                manager.setRoot(context.loadedRoots, null);
                                context.successCallback(null);
                            }
                            catch ($ex$) {
                                if ($ex$ instanceof java.lang.Exception) {
                                    var e = $ex$;
                                    context.successCallback(e);
                                }
                                else {
                                    throw $ex$;
                                }
                            }
                        };
                        XMIModelLoader.callFactory = function (manager, universe, time, ctx, objectType) {
                            var modelElem = null;
                            if (objectType != null) {
                                modelElem = manager.model().createByName(objectType, universe, time);
                                if (modelElem == null) {
                                    var xsiType = null;
                                    for (var i = 0; i < (ctx.xmiReader.getAttributeCount() - 1); i++) {
                                        var localName = ctx.xmiReader.getAttributeLocalName(i);
                                        var xsi = ctx.xmiReader.getAttributePrefix(i);
                                        if (localName.equals(XMIModelLoader.LOADER_XMI_LOCAL_NAME) && xsi.equals(XMIModelLoader.LOADER_XMI_XSI)) {
                                            xsiType = ctx.xmiReader.getAttributeValue(i);
                                            break;
                                        }
                                    }
                                    if (xsiType != null) {
                                        var realTypeName = xsiType.substring(0, xsiType.lastIndexOf(":"));
                                        var realName = xsiType.substring(xsiType.lastIndexOf(":") + 1, xsiType.length);
                                        modelElem = manager.model().createByName(realTypeName + "." + realName, universe, time);
                                    }
                                }
                            }
                            else {
                                modelElem = manager.model().createByName(ctx.xmiReader.getLocalName(), universe, time);
                            }
                            return modelElem;
                        };
                        XMIModelLoader.loadObject = function (manager, universe, time, ctx, xmiAddress, objectType) {
                            var elementTagName = ctx.xmiReader.getLocalName();
                            var modelElem = org.kevoree.modeling.format.xmi.XMIModelLoader.callFactory(manager, universe, time, ctx, objectType);
                            if (modelElem == null) {
                                throw new java.lang.Exception("Could not create an object for local name " + elementTagName);
                            }
                            ctx.map.put(xmiAddress, modelElem);
                            for (var i = 0; i < ctx.xmiReader.getAttributeCount(); i++) {
                                var prefix = ctx.xmiReader.getAttributePrefix(i);
                                if (prefix == null || prefix.equals("")) {
                                    var attrName = ctx.xmiReader.getAttributeLocalName(i).trim();
                                    var valueAtt = ctx.xmiReader.getAttributeValue(i).trim();
                                    if (valueAtt != null) {
                                        var metaElement = modelElem.metaClass().metaByName(attrName);
                                        if (metaElement != null && metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                            modelElem.set(metaElement, org.kevoree.modeling.format.xmi.XMIModelLoader.unescapeXml(valueAtt));
                                        }
                                        else {
                                            if (metaElement != null && metaElement.metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                var referenceArray = valueAtt.split(" ");
                                                for (var j = 0; j < referenceArray.length; j++) {
                                                    var xmiRef = referenceArray[j];
                                                    var adjustedRef = (xmiRef.startsWith("#") ? xmiRef.substring(1) : xmiRef);
                                                    adjustedRef = adjustedRef.replace(".0", "");
                                                    var ref = ctx.map.get(adjustedRef);
                                                    if (ref != null) {
                                                        modelElem.mutate(org.kevoree.modeling.KActionType.ADD, metaElement, ref);
                                                    }
                                                    else {
                                                        ctx.resolvers.add(new org.kevoree.modeling.format.xmi.XMIResolveCommand(ctx, modelElem, org.kevoree.modeling.KActionType.ADD, attrName, adjustedRef));
                                                    }
                                                }
                                            }
                                            else {
                                            }
                                        }
                                    }
                                }
                            }
                            var done = false;
                            while (!done) {
                                if (ctx.xmiReader.hasNext()) {
                                    var tok = ctx.xmiReader.next();
                                    if (tok.equals(org.kevoree.modeling.format.xmi.XmlToken.START_TAG)) {
                                        var subElemName = ctx.xmiReader.getLocalName();
                                        var key = xmiAddress + "/@" + subElemName;
                                        var i = ctx.elementsCount.get(key);
                                        if (i == null) {
                                            i = 0;
                                            ctx.elementsCount.put(key, i);
                                        }
                                        var subElementId = xmiAddress + "/@" + subElemName + (i != 0 ? "." + i : "");
                                        var containedElement = org.kevoree.modeling.format.xmi.XMIModelLoader.loadObject(manager, universe, time, ctx, subElementId, subElemName);
                                        modelElem.mutate(org.kevoree.modeling.KActionType.ADD, modelElem.metaClass().metaByName(subElemName), containedElement);
                                        ctx.elementsCount.put(xmiAddress + "/@" + subElemName, i + 1);
                                    }
                                    else {
                                        if (tok.equals(org.kevoree.modeling.format.xmi.XmlToken.END_TAG)) {
                                            if (ctx.xmiReader.getLocalName().equals(elementTagName)) {
                                                done = true;
                                            }
                                        }
                                    }
                                }
                                else {
                                    done = true;
                                }
                            }
                            return modelElem;
                        };
                        XMIModelLoader.LOADER_XMI_LOCAL_NAME = "type";
                        XMIModelLoader.LOADER_XMI_XSI = "xsi";
                        XMIModelLoader.LOADER_XMI_NS_URI = "nsURI";
                        return XMIModelLoader;
                    })();
                    xmi.XMIModelLoader = XMIModelLoader;
                    var XMIModelSerializer = (function () {
                        function XMIModelSerializer() {
                        }
                        XMIModelSerializer.save = function (model, callback) {
                            callback(null);
                        };
                        return XMIModelSerializer;
                    })();
                    xmi.XMIModelSerializer = XMIModelSerializer;
                    var XMIResolveCommand = (function () {
                        function XMIResolveCommand(context, target, mutatorType, refName, ref) {
                            this.context = context;
                            this.target = target;
                            this.mutatorType = mutatorType;
                            this.refName = refName;
                            this.ref = ref;
                        }
                        XMIResolveCommand.prototype.run = function () {
                            var referencedElement = this.context.map.get(this.ref);
                            if (referencedElement != null) {
                                this.target.mutate(this.mutatorType, this.target.metaClass().metaByName(this.refName), referencedElement);
                                return;
                            }
                            referencedElement = this.context.map.get("/");
                            if (referencedElement != null) {
                                this.target.mutate(this.mutatorType, this.target.metaClass().metaByName(this.refName), referencedElement);
                                return;
                            }
                            throw new java.lang.Exception("KMF Load error : reference " + this.ref + " not found in map when trying to  " + this.mutatorType + " " + this.refName + "  on " + this.target.metaClass().metaName() + "(uuid:" + this.target.uuid() + ")");
                        };
                        return XMIResolveCommand;
                    })();
                    xmi.XMIResolveCommand = XMIResolveCommand;
                    var XmiFormat = (function () {
                        function XmiFormat(p_universe, p_time, p_manager) {
                            this._universe = p_universe;
                            this._time = p_time;
                            this._manager = p_manager;
                        }
                        XmiFormat.prototype.save = function (model, cb) {
                            org.kevoree.modeling.format.xmi.XMIModelSerializer.save(model, cb);
                        };
                        XmiFormat.prototype.saveRoot = function (cb) {
                            this._manager.getRoot(this._universe, this._time, function (root) {
                                if (root == null) {
                                    if (cb != null) {
                                        cb(null);
                                    }
                                }
                                else {
                                    org.kevoree.modeling.format.xmi.XMIModelSerializer.save(root, cb);
                                }
                            });
                        };
                        XmiFormat.prototype.load = function (payload, cb) {
                            org.kevoree.modeling.format.xmi.XMIModelLoader.load(this._manager, this._universe, this._time, payload, cb);
                        };
                        return XmiFormat;
                    })();
                    xmi.XmiFormat = XmiFormat;
                    var XmlParser = (function () {
                        function XmlParser(str) {
                            this.current = 0;
                            this.readSingleton = false;
                            this.attributesNames = new java.util.ArrayList();
                            this.attributesPrefixes = new java.util.ArrayList();
                            this.attributesValues = new java.util.ArrayList();
                            this.attributeName = new java.lang.StringBuilder();
                            this.attributeValue = new java.lang.StringBuilder();
                            this.payload = str;
                            this.currentChar = this.readChar();
                        }
                        XmlParser.prototype.getTagPrefix = function () {
                            return this.tagPrefix;
                        };
                        XmlParser.prototype.hasNext = function () {
                            this.read_lessThan();
                            return this.current < this.payload.length;
                        };
                        XmlParser.prototype.getLocalName = function () {
                            return this.tagName;
                        };
                        XmlParser.prototype.getAttributeCount = function () {
                            return this.attributesNames.size();
                        };
                        XmlParser.prototype.getAttributeLocalName = function (i) {
                            return this.attributesNames.get(i);
                        };
                        XmlParser.prototype.getAttributePrefix = function (i) {
                            return this.attributesPrefixes.get(i);
                        };
                        XmlParser.prototype.getAttributeValue = function (i) {
                            return this.attributesValues.get(i);
                        };
                        XmlParser.prototype.readChar = function () {
                            if (this.current < this.payload.length) {
                                var re = this.payload.charAt(this.current);
                                this.current++;
                                return re;
                            }
                            return '\0';
                        };
                        XmlParser.prototype.next = function () {
                            if (this.readSingleton) {
                                this.readSingleton = false;
                                return org.kevoree.modeling.format.xmi.XmlToken.END_TAG;
                            }
                            if (!this.hasNext()) {
                                return org.kevoree.modeling.format.xmi.XmlToken.END_DOCUMENT;
                            }
                            this.attributesNames.clear();
                            this.attributesPrefixes.clear();
                            this.attributesValues.clear();
                            this.read_lessThan();
                            this.currentChar = this.readChar();
                            if (this.currentChar == '?') {
                                this.currentChar = this.readChar();
                                this.read_xmlHeader();
                                return org.kevoree.modeling.format.xmi.XmlToken.XML_HEADER;
                            }
                            else {
                                if (this.currentChar == '!') {
                                    do {
                                        this.currentChar = this.readChar();
                                    } while (this.currentChar != '>');
                                    return org.kevoree.modeling.format.xmi.XmlToken.COMMENT;
                                }
                                else {
                                    if (this.currentChar == '/') {
                                        this.currentChar = this.readChar();
                                        this.read_closingTag();
                                        return org.kevoree.modeling.format.xmi.XmlToken.END_TAG;
                                    }
                                    else {
                                        this.read_openTag();
                                        if (this.currentChar == '/') {
                                            this.read_upperThan();
                                            this.readSingleton = true;
                                        }
                                        return org.kevoree.modeling.format.xmi.XmlToken.START_TAG;
                                    }
                                }
                            }
                        };
                        XmlParser.prototype.read_lessThan = function () {
                            while (this.currentChar != '<' && this.currentChar != '\0') {
                                this.currentChar = this.readChar();
                            }
                        };
                        XmlParser.prototype.read_upperThan = function () {
                            while (this.currentChar != '>') {
                                this.currentChar = this.readChar();
                            }
                        };
                        XmlParser.prototype.read_xmlHeader = function () {
                            this.read_tagName();
                            this.read_attributes();
                            this.read_upperThan();
                        };
                        XmlParser.prototype.read_closingTag = function () {
                            this.read_tagName();
                            this.read_upperThan();
                        };
                        XmlParser.prototype.read_openTag = function () {
                            this.read_tagName();
                            if (this.currentChar != '>' && this.currentChar != '/') {
                                this.read_attributes();
                            }
                        };
                        XmlParser.prototype.read_tagName = function () {
                            this.tagName = "" + this.currentChar;
                            this.tagPrefix = null;
                            this.currentChar = this.readChar();
                            while (this.currentChar != ' ' && this.currentChar != '>' && this.currentChar != '/') {
                                if (this.currentChar == ':') {
                                    this.tagPrefix = this.tagName;
                                    this.tagName = "";
                                }
                                else {
                                    this.tagName += this.currentChar;
                                }
                                this.currentChar = this.readChar();
                            }
                        };
                        XmlParser.prototype.read_attributes = function () {
                            var end_of_tag = false;
                            while (this.currentChar == ' ') {
                                this.currentChar = this.readChar();
                            }
                            while (!end_of_tag) {
                                while (this.currentChar != '=') {
                                    if (this.currentChar == ':') {
                                        this.attributePrefix = this.attributeName.toString();
                                        this.attributeName = new java.lang.StringBuilder();
                                    }
                                    else {
                                        this.attributeName.append(this.currentChar);
                                    }
                                    this.currentChar = this.readChar();
                                }
                                do {
                                    this.currentChar = this.readChar();
                                } while (this.currentChar != '"');
                                this.currentChar = this.readChar();
                                while (this.currentChar != '"') {
                                    this.attributeValue.append(this.currentChar);
                                    this.currentChar = this.readChar();
                                }
                                this.attributesNames.add(this.attributeName.toString());
                                this.attributesPrefixes.add(this.attributePrefix);
                                this.attributesValues.add(this.attributeValue.toString());
                                this.attributeName = new java.lang.StringBuilder();
                                this.attributePrefix = null;
                                this.attributeValue = new java.lang.StringBuilder();
                                do {
                                    this.currentChar = this.readChar();
                                    if (this.currentChar == '?' || this.currentChar == '/' || this.currentChar == '-' || this.currentChar == '>') {
                                        end_of_tag = true;
                                    }
                                } while (!end_of_tag && this.currentChar == ' ');
                            }
                        };
                        return XmlParser;
                    })();
                    xmi.XmlParser = XmlParser;
                    var XmlToken = (function () {
                        function XmlToken() {
                        }
                        XmlToken.prototype.equals = function (other) {
                            return this == other;
                        };
                        XmlToken.values = function () {
                            return XmlToken._XmlTokenVALUES;
                        };
                        XmlToken.XML_HEADER = new XmlToken();
                        XmlToken.END_DOCUMENT = new XmlToken();
                        XmlToken.START_TAG = new XmlToken();
                        XmlToken.END_TAG = new XmlToken();
                        XmlToken.COMMENT = new XmlToken();
                        XmlToken.SINGLETON_TAG = new XmlToken();
                        XmlToken._XmlTokenVALUES = [
                            XmlToken.XML_HEADER,
                            XmlToken.END_DOCUMENT,
                            XmlToken.START_TAG,
                            XmlToken.END_TAG,
                            XmlToken.COMMENT,
                            XmlToken.SINGLETON_TAG
                        ];
                        return XmlToken;
                    })();
                    xmi.XmlToken = XmlToken;
                })(xmi = format.xmi || (format.xmi = {}));
            })(format = modeling.format || (modeling.format = {}));
            var infer;
            (function (infer) {
                var KInferAlgFactory = (function () {
                    function KInferAlgFactory() {
                    }
                    KInferAlgFactory.build = function (name) {
                        if (name.equals("BinaryPerceptron")) {
                            return new org.kevoree.modeling.infer.impl.BinaryPerceptronAlg();
                        }
                        if (name.equals("LinearRegression")) {
                            return new org.kevoree.modeling.infer.impl.LinearRegressionAlg();
                        }
                        if (name.equals("KMeanCluster")) {
                            return new org.kevoree.modeling.infer.impl.KMeanClusterAlg();
                        }
                        if (name.equals("GaussianProfiler")) {
                            return new org.kevoree.modeling.infer.impl.GaussianProfiler();
                        }
                        if (name.equals("GaussianClassifier")) {
                            return new org.kevoree.modeling.infer.impl.GaussianProfiler();
                        }
                        return null;
                    };
                    return KInferAlgFactory;
                })();
                infer.KInferAlgFactory = KInferAlgFactory;
                var impl;
                (function (impl) {
                    var BinaryPerceptronAlg = (function () {
                        function BinaryPerceptronAlg() {
                            this.iterations = 5;
                            this.alpha = 1;
                            this.rand = new java.util.Random();
                        }
                        BinaryPerceptronAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, this.rand.nextDouble() * 0.1, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var iter = 0; iter < this.iterations; iter++) {
                                for (var row = 0; row < trainingSet.nbRows(); row++) {
                                    var h = this.sigmoid(trainingSet, row, state);
                                    var error = this.alpha * (expectedResultSet.get(row, 0) - h);
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        state.add(j, error * trainingSet.get(row, j));
                                    }
                                    state.add(origin.metaClass().inputs().length, error);
                                }
                            }
                        };
                        BinaryPerceptronAlg.prototype.addUp = function (features, row, state) {
                            var res = 0;
                            for (var i = 0; i < features.nbColumns(); i++) {
                                res = res + state.get(i) * features.get(row, i);
                            }
                            res = res + state.get(features.nbColumns());
                            return res;
                        };
                        BinaryPerceptronAlg.prototype.sigmoid = function (features, row, state) {
                            return 1 / (1 + Math.exp(-this.addUp(features, row, state)));
                        };
                        BinaryPerceptronAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.nbRows(), 1);
                            for (var inst = 0; inst < features.nbRows(); inst++) {
                                if (this.sigmoid(features, inst, state) >= 0.5) {
                                    result.set(inst, 0, 1.0);
                                }
                                else {
                                    result.set(inst, 0, 0);
                                }
                            }
                            return result;
                        };
                        return BinaryPerceptronAlg;
                    })();
                    impl.BinaryPerceptronAlg = BinaryPerceptronAlg;
                    var GaussianClassifierAlg = (function () {
                        function GaussianClassifierAlg() {
                        }
                        GaussianClassifierAlg.prototype.getIndex = function (input, output, field, meta) {
                            return output * (GaussianClassifierAlg.NUMOFFIELDS * meta.origin().inputs().length + 1) + GaussianClassifierAlg.NUMOFFIELDS * input + field;
                        };
                        GaussianClassifierAlg.prototype.getCounter = function (output, meta) {
                            return output * (GaussianClassifierAlg.NUMOFFIELDS * meta.origin().inputs().length + 1) + GaussianClassifierAlg.NUMOFFIELDS * meta.origin().inputs().length;
                        };
                        GaussianClassifierAlg.prototype.getAvg = function (output, state, meta) {
                            var avg = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    avg[i] = state.get(this.getIndex(i, output, GaussianClassifierAlg.SUM, meta)) / total;
                                }
                            }
                            return avg;
                        };
                        GaussianClassifierAlg.prototype.getVariance = function (output, state, avg, meta) {
                            var variances = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    variances[i] = state.get(this.getIndex(i, output, GaussianClassifierAlg.SUMSQUARE, meta)) / total - avg[i] * avg[i];
                                }
                            }
                            return variances;
                        };
                        GaussianClassifierAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var maxOutput = origin.metaClass().outputs()[0].type().literals().length;
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = (maxOutput + 1) * (origin.metaClass().inputs().length * GaussianClassifierAlg.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.nbRows(); i++) {
                                var output = expectedResultSet.get(i, 0);
                                for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                    if (state.get(this.getCounter(output, origin.metaClass().dependencies())) == 0) {
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j, output, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, output, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j, output, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, output, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j, output, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.add(this.getIndex(j, output, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    if (state.get(this.getCounter(maxOutput, origin.metaClass().dependencies())) == 0) {
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j, maxOutput, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j, maxOutput, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.add(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                }
                                state.add(this.getCounter(output, origin.metaClass().dependencies()), 1);
                                state.add(this.getCounter(maxOutput, origin.metaClass().dependencies()), 1);
                            }
                        };
                        GaussianClassifierAlg.prototype.infer = function (features, origin, manager) {
                            var maxOutput = origin.metaClass().outputs()[0].type().literals().length;
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = (maxOutput + 1) * (origin.metaClass().inputs().length * GaussianClassifierAlg.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.nbRows(), 1);
                            for (var j = 0; j < features.nbRows(); j++) {
                                var maxprob = 0;
                                var prob = 0;
                                for (var output = 0; output < maxOutput; output++) {
                                    prob = this.getProba(features, j, output, state, origin.metaClass().dependencies());
                                    if (prob > maxprob) {
                                        maxprob = prob;
                                        result.set(j, 0, output);
                                    }
                                }
                            }
                            return result;
                        };
                        GaussianClassifierAlg.prototype.getProba = function (features, row, output, state, meta) {
                            var prob = 0;
                            var avg = this.getAvg(output, state, meta);
                            var variance = this.getVariance(output, state, avg, meta);
                            prob = org.kevoree.modeling.util.maths.Distribution.gaussianArray(features, row, avg, variance);
                            return prob;
                        };
                        GaussianClassifierAlg.prototype.getAllProba = function (features, state, meta, maxOutput) {
                            var results = new Float64Array(maxOutput);
                            for (var i = 0; i < maxOutput; i++) {
                                var avg = this.getAvg(i, state, meta);
                                var variance = this.getVariance(i, state, avg, meta);
                                results[i] = org.kevoree.modeling.util.maths.Distribution.gaussian(features, avg, variance);
                            }
                            return results;
                        };
                        GaussianClassifierAlg.MIN = 0;
                        GaussianClassifierAlg.MAX = 1;
                        GaussianClassifierAlg.SUM = 2;
                        GaussianClassifierAlg.SUMSQUARE = 3;
                        GaussianClassifierAlg.NUMOFFIELDS = 4;
                        return GaussianClassifierAlg;
                    })();
                    impl.GaussianClassifierAlg = GaussianClassifierAlg;
                    var GaussianProfiler = (function () {
                        function GaussianProfiler() {
                            this.maxTimeSlots = 24;
                        }
                        GaussianProfiler.prototype.getIndex = function (input, output, field, meta) {
                            return output * (GaussianProfiler.NUMOFFIELDS * meta.origin().inputs().length + 1) + GaussianProfiler.NUMOFFIELDS * input + field;
                        };
                        GaussianProfiler.prototype.getCounter = function (output, meta) {
                            return output * (GaussianProfiler.NUMOFFIELDS * meta.origin().inputs().length + 1) + GaussianProfiler.NUMOFFIELDS * meta.origin().inputs().length;
                        };
                        GaussianProfiler.prototype.getAvg = function (output, state, meta) {
                            var avg = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    avg[i] = state.get(this.getIndex(i, output, GaussianProfiler.SUM, meta)) / total;
                                }
                            }
                            return avg;
                        };
                        GaussianProfiler.prototype.getVariance = function (output, state, avg, meta) {
                            var variances = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    variances[i] = state.get(this.getIndex(i, output, GaussianProfiler.SUMSQUARE, meta)) / total - avg[i] * avg[i];
                                }
                            }
                            return variances;
                        };
                        GaussianProfiler.prototype.train = function (trainingSet, expectedResult, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = (this.maxTimeSlots + 1) * ((origin.metaClass().inputs().length - 1) * GaussianProfiler.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.nbRows(); i++) {
                                var output = trainingSet.get(i, 0);
                                for (var j = 1; j < origin.metaClass().inputs().length; j++) {
                                    if (state.get(this.getCounter(output, origin.metaClass().dependencies())) == 0) {
                                        state.set(this.getIndex(j, output, GaussianProfiler.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianProfiler.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianProfiler.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianProfiler.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j, output, GaussianProfiler.MIN, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, output, GaussianProfiler.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j, output, GaussianProfiler.MAX, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, output, GaussianProfiler.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j, output, GaussianProfiler.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.add(this.getIndex(j, output, GaussianProfiler.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    if (state.get(this.getCounter(this.maxTimeSlots, origin.metaClass().dependencies())) == 0) {
                                        state.set(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.MIN, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.MAX, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.add(this.getIndex(j, this.maxTimeSlots, GaussianProfiler.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                }
                                state.add(this.getCounter(output, origin.metaClass().dependencies()), 1);
                                state.add(this.getCounter(this.maxTimeSlots, origin.metaClass().dependencies()), 1);
                            }
                        };
                        GaussianProfiler.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = (this.maxTimeSlots + 1) * ((origin.metaClass().inputs().length - 1) * GaussianProfiler.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.nbRows(), 1);
                            for (var j = 0; j < features.nbRows(); j++) {
                                var output = features.get(j, 0);
                                var values = new Float64Array(features.nbColumns() - 1);
                                for (var i = 0; i < features.nbColumns() - 1; i++) {
                                    values[i] = features.get(j, i + 1);
                                }
                                result.set(j, 0, this.getProba(values, output, state, origin.metaClass().dependencies()));
                            }
                            return result;
                        };
                        GaussianProfiler.prototype.getProba = function (features, output, state, meta) {
                            var prob = 0;
                            var avg = this.getAvg(output, state, meta);
                            var variance = this.getVariance(output, state, avg, meta);
                            prob = org.kevoree.modeling.util.maths.Distribution.gaussian(features, avg, variance);
                            return prob;
                        };
                        GaussianProfiler.MIN = 0;
                        GaussianProfiler.MAX = 1;
                        GaussianProfiler.SUM = 2;
                        GaussianProfiler.SUMSQUARE = 3;
                        GaussianProfiler.NUMOFFIELDS = 4;
                        return GaussianProfiler;
                    })();
                    impl.GaussianProfiler = GaussianProfiler;
                    var KMeanClusterAlg = (function () {
                        function KMeanClusterAlg() {
                            this.k = 3;
                            this.iterations = 100;
                        }
                        KMeanClusterAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            if (trainingSet.nbRows() < this.k) {
                                throw new java.lang.RuntimeException("training setPrimitiveType not enough");
                            }
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = this.k * origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < this.k; i++) {
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        ks.setDoubleArrayElem(dependenciesIndex, j + i * origin.metaClass().inputs().length, trainingSet.get(i, j), origin.metaClass());
                                    }
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var iter = 0; iter < this.iterations; iter++) {
                                var temporalClassification;
                                var centroids = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(this.k, origin.metaClass().inputs().length);
                                var counters = new Int32Array(this.k);
                                for (var i = 0; i < trainingSet.nbRows(); i++) {
                                    temporalClassification = this.classify(trainingSet, i, state);
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        centroids.add(temporalClassification, j, trainingSet.get(i, j));
                                    }
                                    counters[temporalClassification]++;
                                }
                                for (var i = 0; i < this.k; i++) {
                                    if (counters[i] != 0) {
                                        for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                            state.set(j + i * origin.metaClass().inputs().length, centroids.get(i, j) / counters[i]);
                                        }
                                    }
                                    else {
                                        var rand = new java.util.Random();
                                        var pos = rand.nextInt(trainingSet.nbRows());
                                        for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                            state.set(j + i * origin.metaClass().inputs().length, trainingSet.get(pos, j));
                                        }
                                    }
                                }
                            }
                        };
                        KMeanClusterAlg.prototype.classify = function (features, row, state) {
                            var maxdistance = -1;
                            var classNum = -1;
                            for (var i = 0; i < this.k; i++) {
                                var currentdist = 0;
                                for (var j = 0; j < features.nbColumns(); j++) {
                                    currentdist += (features.get(row, j) - state.get(i * features.nbColumns() + j)) * (features.get(row, j) - state.get(i * features.nbColumns() + j));
                                }
                                if (maxdistance < 0) {
                                    maxdistance = currentdist;
                                    classNum = i;
                                }
                                else {
                                    if (currentdist < maxdistance) {
                                        maxdistance = currentdist;
                                        classNum = i;
                                    }
                                }
                            }
                            return classNum;
                        };
                        KMeanClusterAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = this.k * origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.nbRows(), 1);
                            for (var inst = 0; inst < features.nbRows(); inst++) {
                                result.set(inst, 0, this.classify(features, inst, state));
                            }
                            return result;
                        };
                        return KMeanClusterAlg;
                    })();
                    impl.KMeanClusterAlg = KMeanClusterAlg;
                    var LinearRegressionAlg = (function () {
                        function LinearRegressionAlg() {
                            this.alpha = 0.005;
                            this.gamma = 0.000;
                            this.iterations = 10;
                        }
                        LinearRegressionAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, LinearRegressionAlg.rand.nextDouble(), origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var i = 0; i < this.iterations; i++) {
                                for (var row = 0; row < trainingSet.nbRows(); row++) {
                                    var h = this.estimate(trainingSet, row, state);
                                    var error = -this.alpha * (h - expectedResultSet.get(row, 0));
                                    for (var feature = 0; feature < origin.metaClass().inputs().length; feature++) {
                                        state.set(feature, state.get(feature) * (1 - this.alpha * this.gamma) + error * trainingSet.get(row, feature));
                                    }
                                    state.add(origin.metaClass().inputs().length, error);
                                }
                            }
                        };
                        LinearRegressionAlg.prototype.estimate = function (training, row, state) {
                            var result = 0;
                            for (var i = 0; i < training.nbColumns(); i++) {
                                result = result + training.get(row, i) * state.get(i);
                            }
                            result = result + state.get(training.nbColumns());
                            return result;
                        };
                        LinearRegressionAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var results = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.nbRows(), 1);
                            for (var i = 0; i < features.nbRows(); i++) {
                                results.set(i, 0, this.estimate(features, i, state));
                            }
                            return results;
                        };
                        LinearRegressionAlg.rand = new java.util.Random();
                        return LinearRegressionAlg;
                    })();
                    impl.LinearRegressionAlg = LinearRegressionAlg;
                    var RecommendationAlg = (function () {
                        function RecommendationAlg() {
                        }
                        RecommendationAlg.prototype.train = function (trainingSet, expectedResultSet, currentInferObject, manager) {
                        };
                        RecommendationAlg.prototype.infer = function (features, currentInferObject, manager) {
                            return new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(1, 1);
                        };
                        return RecommendationAlg;
                    })();
                    impl.RecommendationAlg = RecommendationAlg;
                    var StatInferAlg = (function () {
                        function StatInferAlg() {
                        }
                        StatInferAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(dependenciesIndex, StatInferAlg.NUMOFFIELDS * origin.metaClass().inputs().length + 1, origin.metaClass());
                                for (var i = 0; i < StatInferAlg.NUMOFFIELDS * origin.metaClass().inputs().length + 1; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(StatInferAlg.NUMOFFIELDS * trainingSet.nbColumns() + 1, 0, dependenciesIndex, ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.nbRows(); i++) {
                                for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                    if (state.get(StatInferAlg.NUMOFFIELDS * trainingSet.nbColumns()) == 0) {
                                        state.set(StatInferAlg.MIN + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.set(StatInferAlg.MAX + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.set(StatInferAlg.SUM + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.set(StatInferAlg.SUMSQuare + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(StatInferAlg.MIN + j * StatInferAlg.NUMOFFIELDS)) {
                                            state.set(StatInferAlg.MIN + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(StatInferAlg.MAX + j * StatInferAlg.NUMOFFIELDS)) {
                                            state.set(StatInferAlg.MAX + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        }
                                        state.add(StatInferAlg.SUM + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.add(StatInferAlg.SUMSQuare + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                }
                                state.add(StatInferAlg.NUMOFFIELDS * origin.metaClass().inputs().length, 1);
                            }
                        };
                        StatInferAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var tempres = this.getAvgAll(ks, origin.metaClass().dependencies());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(1, tempres.length);
                            for (var i = 0; i < tempres.length; i++) {
                                result.set(0, i, tempres[i]);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getAvgAll = function (ks, meta) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getAvg(i, ks, meta);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getMinAll = function (ks, meta) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getMin(i, ks, meta);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getMaxAll = function (ks, meta) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getMax(i, ks, meta);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getVarianceAll = function (ks, meta, avgs) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getVariance(i, ks, meta, avgs[i]);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getAvg = function (featureNum, ks, meta) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.SUM, meta.origin()) / count;
                        };
                        StatInferAlg.prototype.getMin = function (featureNum, ks, meta) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.MIN, meta.origin());
                        };
                        StatInferAlg.prototype.getMax = function (featureNum, ks, meta) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.MAX, meta.origin());
                        };
                        StatInferAlg.prototype.getVariance = function (featureNum, ks, meta, avg) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.SUMSQuare, meta.origin()) / count - avg * avg;
                        };
                        StatInferAlg.MIN = 0;
                        StatInferAlg.MAX = 1;
                        StatInferAlg.SUM = 2;
                        StatInferAlg.SUMSQuare = 3;
                        StatInferAlg.NUMOFFIELDS = 4;
                        return StatInferAlg;
                    })();
                    impl.StatInferAlg = StatInferAlg;
                    var WinnowAlg = (function () {
                        function WinnowAlg() {
                            this.alpha = 2;
                            this.beta = 2;
                            this.iterations = 1;
                            this.rand = new java.util.Random();
                        }
                        WinnowAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), (origin.previousResolved()));
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, this.rand.nextDouble(), origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var iter = 0; iter < this.iterations; iter++) {
                                for (var inst = 0; inst < trainingSet.nbRows(); inst++) {
                                    if (this.calculate(trainingSet, inst, state) == expectedResultSet.get(inst, 0)) {
                                        continue;
                                    }
                                    if (expectedResultSet.get(inst, 0) == 0) {
                                        for (var i = 0; i < size; i++) {
                                            state.set(i, state.get(i) / this.beta);
                                        }
                                    }
                                    else {
                                        for (var i = 0; i < size; i++) {
                                            state.set(i, state.get(i) * this.alpha);
                                        }
                                    }
                                }
                            }
                        };
                        WinnowAlg.prototype.calculate = function (features, row, state) {
                            var result = 0;
                            for (var i = 0; i < features.nbColumns(); i++) {
                                result += state.get(i) * features.get(row, i);
                            }
                            if (result >= features.nbColumns()) {
                                return 1.0;
                            }
                            else {
                                return 0.0;
                            }
                        };
                        WinnowAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), (origin.previousResolved()));
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.nbRows(), 1);
                            for (var inst = 0; inst < features.nbRows(); inst++) {
                                result.set(inst, 0, this.calculate(features, inst, state));
                            }
                            return result;
                        };
                        return WinnowAlg;
                    })();
                    impl.WinnowAlg = WinnowAlg;
                })(impl = infer.impl || (infer.impl = {}));
            })(infer = modeling.infer || (modeling.infer = {}));
            var memory;
            (function (memory) {
                var KChunkFlags = (function () {
                    function KChunkFlags() {
                    }
                    KChunkFlags.DIRTY_BIT_INDEX = 0;
                    KChunkFlags.DIRTY_BIT = 1 << KChunkFlags.DIRTY_BIT_INDEX;
                    KChunkFlags.REMOVED_BIT_INDEX = 1;
                    KChunkFlags.REMOVED_BIT = 1 << KChunkFlags.REMOVED_BIT_INDEX;
                    return KChunkFlags;
                })();
                memory.KChunkFlags = KChunkFlags;
                var chunk;
                (function (chunk) {
                    var impl;
                    (function (impl) {
                        var AbstractArrayTree = (function () {
                            function AbstractArrayTree(p_universe, p_time, p_obj, p_space) {
                                this.kvSize = 1;
                                this._threshold = 0;
                                this._root_index = -1;
                                this._size = 0;
                                this._universe = p_universe;
                                this._time = p_time;
                                this._obj = p_obj;
                                this._flags = new java.util.concurrent.atomic.AtomicLong(0);
                                this._counter = new java.util.concurrent.atomic.AtomicInteger(0);
                                this._space = p_space;
                            }
                            AbstractArrayTree.prototype.counter = function () {
                                return this._counter.get();
                            };
                            AbstractArrayTree.prototype.inc = function () {
                                return this._counter.incrementAndGet();
                            };
                            AbstractArrayTree.prototype.dec = function () {
                                return this._counter.decrementAndGet();
                            };
                            AbstractArrayTree.prototype.universe = function () {
                                return this._universe;
                            };
                            AbstractArrayTree.prototype.time = function () {
                                return this._time;
                            };
                            AbstractArrayTree.prototype.obj = function () {
                                return this._obj;
                            };
                            AbstractArrayTree.prototype.getFlags = function () {
                                return this._flags.get();
                            };
                            AbstractArrayTree.prototype.setFlags = function (bitsToEnable, bitsToDisable) {
                                var val;
                                var nval;
                                do {
                                    val = this._flags.get();
                                    nval = val & ~bitsToDisable | bitsToEnable;
                                } while (!this._flags.compareAndSet(val, nval));
                            };
                            AbstractArrayTree.prototype.space = function () {
                                return this._space;
                            };
                            AbstractArrayTree.prototype.allocate = function (capacity) {
                                this.state = new org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree.InternalState(new Int32Array(capacity * AbstractArrayTree.META_SIZE), new Float64Array(capacity * this.kvSize), new Array());
                                this._threshold = (capacity * AbstractArrayTree.LOAD_FACTOR);
                            };
                            AbstractArrayTree.prototype.reallocate = function (newCapacity) {
                                this._threshold = (newCapacity * AbstractArrayTree.LOAD_FACTOR);
                                var new_back_kv = new Float64Array(newCapacity * this.kvSize);
                                if (this.state != null && this.state._back_kv != null) {
                                    System.arraycopy(this.state._back_kv, 0, new_back_kv, 0, this._size * this.kvSize);
                                }
                                var new_back_colors = new Array();
                                if (this.state != null && this.state._back_colors != null) {
                                    System.arraycopy(this.state._back_colors, 0, new_back_colors, 0, this._size);
                                    for (var i = this._size; i < newCapacity; i++) {
                                        new_back_colors[i] = false;
                                    }
                                }
                                var new_back_meta = new Int32Array(newCapacity * AbstractArrayTree.META_SIZE);
                                if (this.state != null && this.state._back_meta != null) {
                                    System.arraycopy(this.state._back_meta, 0, new_back_meta, 0, this._size * AbstractArrayTree.META_SIZE);
                                    for (var i = this._size * AbstractArrayTree.META_SIZE; i < newCapacity * AbstractArrayTree.META_SIZE; i++) {
                                        new_back_meta[i] = -1;
                                    }
                                }
                                this.state = new org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree.InternalState(new_back_meta, new_back_kv, new_back_colors);
                            };
                            AbstractArrayTree.prototype.size = function () {
                                return this._size;
                            };
                            AbstractArrayTree.prototype.key = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_kv[p_currentIndex * this.kvSize];
                            };
                            AbstractArrayTree.prototype.setKey = function (p_currentIndex, p_paramIndex) {
                                this.state._back_kv[p_currentIndex * this.kvSize] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.value = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_kv[(p_currentIndex * this.kvSize) + 1];
                            };
                            AbstractArrayTree.prototype.setValue = function (p_currentIndex, p_paramIndex) {
                                this.state._back_kv[(p_currentIndex * this.kvSize) + 1] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.left = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_meta[p_currentIndex * AbstractArrayTree.META_SIZE];
                            };
                            AbstractArrayTree.prototype.setLeft = function (p_currentIndex, p_paramIndex) {
                                this.state._back_meta[p_currentIndex * AbstractArrayTree.META_SIZE] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.right = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 1];
                            };
                            AbstractArrayTree.prototype.setRight = function (p_currentIndex, p_paramIndex) {
                                this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 1] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.parent = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 2];
                            };
                            AbstractArrayTree.prototype.setParent = function (p_currentIndex, p_paramIndex) {
                                this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 2] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.color = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return true;
                                }
                                return this.state._back_colors[p_currentIndex];
                            };
                            AbstractArrayTree.prototype.setColor = function (p_currentIndex, p_paramIndex) {
                                this.state._back_colors[p_currentIndex] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.grandParent = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                if (this.parent(p_currentIndex) != -1) {
                                    return this.parent(this.parent(p_currentIndex));
                                }
                                else {
                                    return -1;
                                }
                            };
                            AbstractArrayTree.prototype.sibling = function (p_currentIndex) {
                                if (this.parent(p_currentIndex) == -1) {
                                    return -1;
                                }
                                else {
                                    if (p_currentIndex == this.left(this.parent(p_currentIndex))) {
                                        return this.right(this.parent(p_currentIndex));
                                    }
                                    else {
                                        return this.left(this.parent(p_currentIndex));
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.uncle = function (p_currentIndex) {
                                if (this.parent(p_currentIndex) != -1) {
                                    return this.sibling(this.parent(p_currentIndex));
                                }
                                else {
                                    return -1;
                                }
                            };
                            AbstractArrayTree.prototype.previous = function (p_index) {
                                var p = p_index;
                                if (this.left(p) != -1) {
                                    p = this.left(p);
                                    while (this.right(p) != -1) {
                                        p = this.right(p);
                                    }
                                    return p;
                                }
                                else {
                                    if (this.parent(p) != -1) {
                                        if (p == this.right(this.parent(p))) {
                                            return this.parent(p);
                                        }
                                        else {
                                            while (this.parent(p) != -1 && p == this.left(this.parent(p))) {
                                                p = this.parent(p);
                                            }
                                            return this.parent(p);
                                        }
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.next = function (p_index) {
                                var p = p_index;
                                if (this.right(p) != -1) {
                                    p = this.right(p);
                                    while (this.left(p) != -1) {
                                        p = this.left(p);
                                    }
                                    return p;
                                }
                                else {
                                    if (this.parent(p) != -1) {
                                        if (p == this.left(this.parent(p))) {
                                            return this.parent(p);
                                        }
                                        else {
                                            while (this.parent(p) != -1 && p == this.right(this.parent(p))) {
                                                p = this.parent(p);
                                            }
                                            return this.parent(p);
                                        }
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.lookup = function (p_key) {
                                var n = this._root_index;
                                if (n == -1) {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                                while (n != -1) {
                                    if (p_key == this.key(n)) {
                                        return this.key(n);
                                    }
                                    else {
                                        if (p_key < this.key(n)) {
                                            n = this.left(n);
                                        }
                                        else {
                                            n = this.right(n);
                                        }
                                    }
                                }
                                return n;
                            };
                            AbstractArrayTree.prototype.range = function (startKey, endKey, walker) {
                                var indexEnd = this.internal_previousOrEqual_index(endKey);
                                while (indexEnd != -1 && this.key(indexEnd) >= startKey) {
                                    walker(this.key(indexEnd));
                                    indexEnd = this.previous(indexEnd);
                                }
                            };
                            AbstractArrayTree.prototype.internal_previousOrEqual_index = function (p_key) {
                                var p = this._root_index;
                                if (p == -1) {
                                    return p;
                                }
                                while (p != -1) {
                                    if (p_key == this.key(p)) {
                                        return p;
                                    }
                                    if (p_key > this.key(p)) {
                                        if (this.right(p) != -1) {
                                            p = this.right(p);
                                        }
                                        else {
                                            return p;
                                        }
                                    }
                                    else {
                                        if (this.left(p) != -1) {
                                            p = this.left(p);
                                        }
                                        else {
                                            var parent = this.parent(p);
                                            var ch = p;
                                            while (parent != -1 && ch == this.left(parent)) {
                                                ch = parent;
                                                parent = this.parent(parent);
                                            }
                                            return parent;
                                        }
                                    }
                                }
                                return -1;
                            };
                            AbstractArrayTree.prototype.rotateLeft = function (n) {
                                var r = this.right(n);
                                this.replaceNode(n, r);
                                this.setRight(n, this.left(r));
                                if (this.left(r) != -1) {
                                    this.setParent(this.left(r), n);
                                }
                                this.setLeft(r, n);
                                this.setParent(n, r);
                            };
                            AbstractArrayTree.prototype.rotateRight = function (n) {
                                var l = this.left(n);
                                this.replaceNode(n, l);
                                this.setLeft(n, this.right(l));
                                if (this.right(l) != -1) {
                                    this.setParent(this.right(l), n);
                                }
                                this.setRight(l, n);
                                this.setParent(n, l);
                            };
                            AbstractArrayTree.prototype.replaceNode = function (oldn, newn) {
                                if (this.parent(oldn) == -1) {
                                    this._root_index = newn;
                                }
                                else {
                                    if (oldn == this.left(this.parent(oldn))) {
                                        this.setLeft(this.parent(oldn), newn);
                                    }
                                    else {
                                        this.setRight(this.parent(oldn), newn);
                                    }
                                }
                                if (newn != -1) {
                                    this.setParent(newn, this.parent(oldn));
                                }
                            };
                            AbstractArrayTree.prototype.insertCase1 = function (n) {
                                if (this.parent(n) == -1) {
                                    this.setColor(n, true);
                                }
                                else {
                                    this.insertCase2(n);
                                }
                            };
                            AbstractArrayTree.prototype.insertCase2 = function (n) {
                                if (!this.color(this.parent(n))) {
                                    this.insertCase3(n);
                                }
                            };
                            AbstractArrayTree.prototype.insertCase3 = function (n) {
                                if (!this.color(this.uncle(n))) {
                                    this.setColor(this.parent(n), true);
                                    this.setColor(this.uncle(n), true);
                                    this.setColor(this.grandParent(n), false);
                                    this.insertCase1(this.grandParent(n));
                                }
                                else {
                                    this.insertCase4(n);
                                }
                            };
                            AbstractArrayTree.prototype.insertCase4 = function (n_n) {
                                var n = n_n;
                                if (n == this.right(this.parent(n)) && this.parent(n) == this.left(this.grandParent(n))) {
                                    this.rotateLeft(this.parent(n));
                                    n = this.left(n);
                                }
                                else {
                                    if (n == this.left(this.parent(n)) && this.parent(n) == this.right(this.grandParent(n))) {
                                        this.rotateRight(this.parent(n));
                                        n = this.right(n);
                                    }
                                }
                                this.insertCase5(n);
                            };
                            AbstractArrayTree.prototype.insertCase5 = function (n) {
                                this.setColor(this.parent(n), true);
                                this.setColor(this.grandParent(n), false);
                                if (n == this.left(this.parent(n)) && this.parent(n) == this.left(this.grandParent(n))) {
                                    this.rotateRight(this.grandParent(n));
                                }
                                else {
                                    this.rotateLeft(this.grandParent(n));
                                }
                            };
                            AbstractArrayTree.prototype.serialize = function (metaModel) {
                                if (this._root_index == -1) {
                                    return "0";
                                }
                                var savedRoot = this._root_index;
                                var internalState = this.state;
                                var builder = new java.lang.StringBuilder();
                                var treeSize = 0;
                                for (var i = 0; i < internalState._back_meta.length / AbstractArrayTree.META_SIZE; i++) {
                                    var parentIndex = internalState._back_meta[(i * AbstractArrayTree.META_SIZE) + 2];
                                    if (parentIndex != -1 || i == savedRoot) {
                                        var isOnLeft = false;
                                        if (parentIndex != -1) {
                                            isOnLeft = internalState._back_meta[parentIndex * AbstractArrayTree.META_SIZE] == i;
                                        }
                                        if (!this.color(i)) {
                                            if (isOnLeft) {
                                                builder.append(AbstractArrayTree.BLACK_LEFT);
                                            }
                                            else {
                                                builder.append(AbstractArrayTree.BLACK_RIGHT);
                                            }
                                        }
                                        else {
                                            if (isOnLeft) {
                                                builder.append(AbstractArrayTree.RED_LEFT);
                                            }
                                            else {
                                                builder.append(AbstractArrayTree.RED_RIGHT);
                                            }
                                        }
                                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(internalState._back_kv[i * this.kvSize], builder);
                                        builder.append(',');
                                        if (parentIndex != -1) {
                                            org.kevoree.modeling.util.maths.Base64.encodeIntToBuffer(parentIndex, builder);
                                        }
                                        if (this.kvSize > 1) {
                                            builder.append(',');
                                            org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(internalState._back_kv[(i * this.kvSize) + 1], builder);
                                        }
                                        treeSize++;
                                    }
                                }
                                return org.kevoree.modeling.util.maths.Base64.encodeInt(treeSize) + "," + org.kevoree.modeling.util.maths.Base64.encodeInt(savedRoot) + builder.toString();
                            };
                            AbstractArrayTree.prototype.init = function (payload, metaModel, metaClassIndex) {
                                if (payload == null || payload.length == 0) {
                                    return;
                                }
                                var initPos = 0;
                                var cursor = 0;
                                while (cursor < payload.length && payload.charAt(cursor) != ',' && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                    cursor++;
                                }
                                if (payload.charAt(cursor) == ',') {
                                    this._size = org.kevoree.modeling.util.maths.Base64.decodeToIntWithBounds(payload, initPos, cursor);
                                    cursor++;
                                    initPos = cursor;
                                }
                                while (cursor < payload.length && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                    cursor++;
                                }
                                this._root_index = org.kevoree.modeling.util.maths.Base64.decodeToIntWithBounds(payload, initPos, cursor);
                                this.allocate(this._size);
                                for (var i = 0; i < this._size; i++) {
                                    var offsetI = i * AbstractArrayTree.META_SIZE;
                                    this.state._back_meta[offsetI] = -1;
                                    this.state._back_meta[offsetI + 1] = -1;
                                    this.state._back_meta[offsetI + 2] = -1;
                                }
                                var currentLoopIndex = 0;
                                while (cursor < payload.length) {
                                    while (cursor < payload.length && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                        cursor++;
                                    }
                                    if (cursor < payload.length) {
                                        var elem = payload.charAt(cursor);
                                        var isOnLeft = false;
                                        if (elem == AbstractArrayTree.BLACK_LEFT || elem == AbstractArrayTree.RED_LEFT) {
                                            isOnLeft = true;
                                        }
                                        if (elem == AbstractArrayTree.BLACK_LEFT || elem == AbstractArrayTree.BLACK_RIGHT) {
                                            this.setColor(currentLoopIndex, false);
                                        }
                                        else {
                                            this.setColor(currentLoopIndex, true);
                                        }
                                        cursor++;
                                        var beginChunk = cursor;
                                        while (cursor < payload.length && payload.charAt(cursor) != ',') {
                                            cursor++;
                                        }
                                        var loopKey = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, beginChunk, cursor);
                                        this.setKey(currentLoopIndex, loopKey);
                                        cursor++;
                                        beginChunk = cursor;
                                        while (cursor < payload.length && payload.charAt(cursor) != ',' && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                            cursor++;
                                        }
                                        if (cursor > beginChunk) {
                                            var parentRaw = org.kevoree.modeling.util.maths.Base64.decodeToIntWithBounds(payload, beginChunk, cursor);
                                            this.setParent(currentLoopIndex, parentRaw);
                                            if (isOnLeft) {
                                                this.setLeft(parentRaw, currentLoopIndex);
                                            }
                                            else {
                                                this.setRight(parentRaw, currentLoopIndex);
                                            }
                                        }
                                        if (cursor < payload.length && payload.charAt(cursor) == ',') {
                                            cursor++;
                                            beginChunk = cursor;
                                            while (cursor < payload.length && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                                cursor++;
                                            }
                                            if (cursor > beginChunk) {
                                                var currentValue = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, beginChunk, cursor);
                                                this.setValue(currentLoopIndex, currentValue);
                                            }
                                        }
                                        currentLoopIndex++;
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.free = function (p_metaModel) {
                                this.state = null;
                                this._size = 0;
                                this._threshold = 0;
                            };
                            AbstractArrayTree.prototype.internal_insert = function (p_key, p_value) {
                                if ((this._size + 1) > this._threshold) {
                                    var length = (this._size == 0 ? 1 : this._size << 1);
                                    this.reallocate(length);
                                }
                                var newIndex = this._size;
                                if (newIndex == 0) {
                                    this.setKey(newIndex, p_key);
                                    if (this.kvSize == 2) {
                                        this.setValue(newIndex, p_value);
                                    }
                                    this.setColor(newIndex, false);
                                    this.setLeft(newIndex, -1);
                                    this.setRight(newIndex, -1);
                                    this.setParent(newIndex, -1);
                                    this._root_index = newIndex;
                                    this._size = 1;
                                }
                                else {
                                    var n = this._root_index;
                                    while (true) {
                                        if (p_key == this.key(n)) {
                                            return;
                                        }
                                        else {
                                            if (p_key < this.key(n)) {
                                                if (this.left(n) == -1) {
                                                    this.setKey(newIndex, p_key);
                                                    if (this.kvSize == 2) {
                                                        this.setValue(newIndex, p_value);
                                                    }
                                                    this.setColor(newIndex, false);
                                                    this.setLeft(newIndex, -1);
                                                    this.setRight(newIndex, -1);
                                                    this.setParent(newIndex, -1);
                                                    this.setLeft(n, newIndex);
                                                    this._size++;
                                                    break;
                                                }
                                                else {
                                                    n = this.left(n);
                                                }
                                            }
                                            else {
                                                if (this.right(n) == -1) {
                                                    this.setKey(newIndex, p_key);
                                                    if (this.kvSize == 2) {
                                                        this.setValue(newIndex, p_value);
                                                    }
                                                    this.setColor(newIndex, false);
                                                    this.setLeft(newIndex, -1);
                                                    this.setRight(newIndex, -1);
                                                    this.setParent(newIndex, -1);
                                                    this.setRight(n, newIndex);
                                                    this._size++;
                                                    break;
                                                }
                                                else {
                                                    n = this.right(n);
                                                }
                                            }
                                        }
                                    }
                                    this.setParent(newIndex, n);
                                }
                                this.insertCase1(newIndex);
                                this.internal_set_dirty();
                            };
                            AbstractArrayTree.prototype.internal_lookup_value = function (p_key) {
                                var n = this._root_index;
                                if (n == -1) {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                                while (n != -1) {
                                    if (p_key == this.key(n)) {
                                        return this.value(n);
                                    }
                                    else {
                                        if (p_key < this.key(n)) {
                                            n = this.left(n);
                                        }
                                        else {
                                            n = this.right(n);
                                        }
                                    }
                                }
                                return n;
                            };
                            AbstractArrayTree.prototype.internal_set_dirty = function () {
                                if (this._space != null) {
                                    if ((this._flags.get() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        this._space.declareDirty(this);
                                        this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                    }
                                }
                                else {
                                    this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                }
                            };
                            AbstractArrayTree.prototype.type = function () {
                                throw "Abstract method";
                            };
                            AbstractArrayTree.BLACK_LEFT = '{';
                            AbstractArrayTree.BLACK_RIGHT = '}';
                            AbstractArrayTree.RED_LEFT = '[';
                            AbstractArrayTree.RED_RIGHT = ']';
                            AbstractArrayTree.META_SIZE = 3;
                            AbstractArrayTree.LOAD_FACTOR = (75 / 100);
                            return AbstractArrayTree;
                        })();
                        impl.AbstractArrayTree = AbstractArrayTree;
                        var AbstractArrayTree;
                        (function (AbstractArrayTree) {
                            var InternalState = (function () {
                                function InternalState(_back_meta, _back_kv, _back_colors) {
                                    this._back_meta = _back_meta;
                                    this._back_kv = _back_kv;
                                    this._back_colors = _back_colors;
                                }
                                return InternalState;
                            })();
                            AbstractArrayTree.InternalState = InternalState;
                        })(AbstractArrayTree = impl.AbstractArrayTree || (impl.AbstractArrayTree = {}));
                        var ArrayIntMap = (function () {
                            function ArrayIntMap(initalCapacity, loadFactor) {
                            }
                            ArrayIntMap.prototype.clear = function () { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    delete this[p];
                                }
                            } };
                            ArrayIntMap.prototype.get = function (key) { return this[key]; };
                            ArrayIntMap.prototype.put = function (key, pval) { var previousVal = this[key]; this[key] = pval; return previousVal; };
                            ArrayIntMap.prototype.contains = function (key) { return this.hasOwnProperty(key); };
                            ArrayIntMap.prototype.remove = function (key) { var tmp = this[key]; delete this[key]; return tmp; };
                            ArrayIntMap.prototype.size = function () { return Object.keys(this).length; };
                            ArrayIntMap.prototype.each = function (callback) { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    callback(+p, this[p]);
                                }
                            } };
                            return ArrayIntMap;
                        })();
                        impl.ArrayIntMap = ArrayIntMap;
                        var ArrayLongLongMap = (function () {
                            function ArrayLongLongMap(p_universe, p_time, p_obj, p_space) {
                                this.state = null;
                                this.initialCapacity = 16;
                                this._metaClassIndex = -1;
                                this._universe = p_universe;
                                this._time = p_time;
                                this._obj = p_obj;
                                this._flags = new java.util.concurrent.atomic.AtomicLong(0);
                                this._counter = new java.util.concurrent.atomic.AtomicInteger(0);
                                this._space = p_space;
                                this.elementCount = 0;
                                this.droppedCount = 0;
                                var newstate = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(this.initialCapacity, new Float64Array(this.initialCapacity * 2), new Int32Array(this.initialCapacity), new Int32Array(this.initialCapacity));
                                for (var i = 0; i < this.initialCapacity; i++) {
                                    newstate.elementNext[i] = -1;
                                    newstate.elementHash[i] = -1;
                                }
                                this.state = newstate;
                                this.threshold = (newstate.elementDataSize * ArrayLongLongMap.loadFactor);
                            }
                            ArrayLongLongMap.prototype.counter = function () {
                                return this._counter.get();
                            };
                            ArrayLongLongMap.prototype.inc = function () {
                                return this._counter.incrementAndGet();
                            };
                            ArrayLongLongMap.prototype.dec = function () {
                                return this._counter.decrementAndGet();
                            };
                            ArrayLongLongMap.prototype.clear = function () {
                                if (this.elementCount > 0) {
                                    this.elementCount = 0;
                                    this.droppedCount = 0;
                                    var newstate = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(this.initialCapacity, new Float64Array(this.initialCapacity * 2), new Int32Array(this.initialCapacity), new Int32Array(this.initialCapacity));
                                    for (var i = 0; i < this.initialCapacity; i++) {
                                        newstate.elementNext[i] = -1;
                                        newstate.elementHash[i] = -1;
                                    }
                                    this.state = newstate;
                                    this.threshold = (newstate.elementDataSize * ArrayLongLongMap.loadFactor);
                                }
                            };
                            ArrayLongLongMap.prototype.rehashCapacity = function (capacity) {
                                var length = (capacity == 0 ? 1 : capacity << 1);
                                var newElementKV = new Float64Array(length * 2);
                                System.arraycopy(this.state.elementKV, 0, newElementKV, 0, this.state.elementKV.length);
                                var newElementNext = new Int32Array(length);
                                var newElementHash = new Int32Array(length);
                                for (var i = 0; i < length; i++) {
                                    newElementNext[i] = -1;
                                    newElementHash[i] = -1;
                                }
                                for (var i = 0; i < this.state.elementNext.length; i++) {
                                    if (this.state.elementNext[i] != -1) {
                                        var index = (this.state.elementKV[i * 2] & 0x7FFFFFFF) % length;
                                        var currentHashedIndex = newElementHash[index];
                                        if (currentHashedIndex != -1) {
                                            newElementNext[i] = currentHashedIndex;
                                        }
                                        else {
                                            newElementNext[i] = -2;
                                        }
                                        newElementHash[index] = i;
                                    }
                                }
                                this.state = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(length, newElementKV, newElementNext, newElementHash);
                                this.threshold = (length * ArrayLongLongMap.loadFactor);
                            };
                            ArrayLongLongMap.prototype.each = function (callback) {
                                var internalState = this.state;
                                for (var i = 0; i < internalState.elementNext.length; i++) {
                                    if (internalState.elementNext[i] != -1) {
                                        callback(internalState.elementKV[i * 2], internalState.elementKV[i * 2 + 1]);
                                    }
                                }
                            };
                            ArrayLongLongMap.prototype.metaClassIndex = function () {
                                return this._metaClassIndex;
                            };
                            ArrayLongLongMap.prototype.contains = function (key) {
                                var internalState = this.state;
                                if (this.state.elementDataSize == 0) {
                                    return false;
                                }
                                var hash = (key);
                                var index = (hash & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = internalState.elementHash[index];
                                while (m >= 0) {
                                    if (key == internalState.elementKV[m * 2]) {
                                        return true;
                                    }
                                    m = internalState.elementNext[m];
                                }
                                return false;
                            };
                            ArrayLongLongMap.prototype.get = function (key) {
                                var internalState = this.state;
                                if (this.state.elementDataSize == 0) {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                                var index = ((key) & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = internalState.elementHash[index];
                                while (m >= 0) {
                                    if (key == internalState.elementKV[m * 2]) {
                                        return internalState.elementKV[(m * 2) + 1];
                                    }
                                    else {
                                        m = internalState.elementNext[m];
                                    }
                                }
                                return org.kevoree.modeling.KConfig.NULL_LONG;
                            };
                            ArrayLongLongMap.prototype.put = function (key, value) {
                                var entry = -1;
                                var index = -1;
                                var hash = (key);
                                if (this.state.elementDataSize != 0) {
                                    index = (hash & 0x7FFFFFFF) % this.state.elementDataSize;
                                    entry = this.findNonNullKeyEntry(key, index);
                                }
                                if (entry == -1) {
                                    if (++this.elementCount > this.threshold) {
                                        this.rehashCapacity(this.state.elementDataSize);
                                        index = (hash & 0x7FFFFFFF) % this.state.elementDataSize;
                                    }
                                    var newIndex = (this.elementCount + this.droppedCount - 1);
                                    this.state.elementKV[newIndex * 2] = key;
                                    this.state.elementKV[newIndex * 2 + 1] = value;
                                    var currentHashedIndex = this.state.elementHash[index];
                                    if (currentHashedIndex != -1) {
                                        this.state.elementNext[newIndex] = currentHashedIndex;
                                    }
                                    else {
                                        this.state.elementNext[newIndex] = -2;
                                    }
                                    this.state.elementHash[index] = newIndex;
                                }
                                else {
                                    this.state.elementKV[entry + 1] = value;
                                }
                                this.internal_set_dirty();
                            };
                            ArrayLongLongMap.prototype.findNonNullKeyEntry = function (key, index) {
                                var m = this.state.elementHash[index];
                                while (m >= 0) {
                                    if (key == this.state.elementKV[m * 2]) {
                                        return m;
                                    }
                                    m = this.state.elementNext[m];
                                }
                                return -1;
                            };
                            ArrayLongLongMap.prototype.remove = function (key) {
                                var internalState = this.state;
                                if (this.state.elementDataSize == 0) {
                                    return;
                                }
                                var index = ((key) & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = this.state.elementHash[index];
                                var last = -1;
                                while (m >= 0) {
                                    if (key == this.state.elementKV[m * 2]) {
                                        break;
                                    }
                                    last = m;
                                    m = this.state.elementNext[m];
                                }
                                if (m == -1) {
                                    return;
                                }
                                if (last == -1) {
                                    if (this.state.elementNext[m] > 0) {
                                        this.state.elementHash[index] = m;
                                    }
                                    else {
                                        this.state.elementHash[index] = -1;
                                    }
                                }
                                else {
                                    this.state.elementNext[last] = this.state.elementNext[m];
                                }
                                this.state.elementNext[m] = -1;
                                this.elementCount--;
                                this.droppedCount++;
                            };
                            ArrayLongLongMap.prototype.size = function () {
                                return this.elementCount;
                            };
                            ArrayLongLongMap.prototype.init = function (payload, metaModel, metaClassIndex) {
                                this._metaClassIndex = metaClassIndex;
                                if (payload == null || payload.length == 0) {
                                    return;
                                }
                                var initPos = 0;
                                var cursor = 0;
                                while (cursor < payload.length && payload.charAt(cursor) != ',' && payload.charAt(cursor) != '/') {
                                    cursor++;
                                }
                                if (cursor >= payload.length) {
                                    return;
                                }
                                if (payload.charAt(cursor) == ',') {
                                    this._metaClassIndex = metaModel.metaClassByName(payload.substring(initPos, cursor)).index();
                                    cursor++;
                                    initPos = cursor;
                                }
                                while (cursor < payload.length && payload.charAt(cursor) != '/') {
                                    cursor++;
                                }
                                var nbElement = org.kevoree.modeling.util.maths.Base64.decodeToIntWithBounds(payload, initPos, cursor);
                                var length = (nbElement == 0 ? 1 : nbElement << 1);
                                var newElementKV = new Float64Array(length * 2);
                                var newElementNext = new Int32Array(length);
                                var newElementHash = new Int32Array(length);
                                for (var i = 0; i < length; i++) {
                                    newElementNext[i] = -1;
                                    newElementHash[i] = -1;
                                }
                                var temp_state = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(length, newElementKV, newElementNext, newElementHash);
                                while (cursor < payload.length) {
                                    cursor++;
                                    var beginChunk = cursor;
                                    while (cursor < payload.length && payload.charAt(cursor) != ':') {
                                        cursor++;
                                    }
                                    var middleChunk = cursor;
                                    while (cursor < payload.length && payload.charAt(cursor) != ',') {
                                        cursor++;
                                    }
                                    var loopKey = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, beginChunk, middleChunk);
                                    var loopVal = org.kevoree.modeling.util.maths.Base64.decodeToLongWithBounds(payload, middleChunk + 1, cursor);
                                    var index = ((loopKey) & 0x7FFFFFFF) % temp_state.elementDataSize;
                                    var newIndex = this.elementCount;
                                    temp_state.elementKV[newIndex * 2] = loopKey;
                                    temp_state.elementKV[newIndex * 2 + 1] = loopVal;
                                    var currentHashedIndex = temp_state.elementHash[index];
                                    if (currentHashedIndex != -1) {
                                        temp_state.elementNext[newIndex] = currentHashedIndex;
                                    }
                                    else {
                                        temp_state.elementNext[newIndex] = -2;
                                    }
                                    temp_state.elementHash[index] = newIndex;
                                    this.elementCount++;
                                }
                                this.elementCount = nbElement;
                                this.droppedCount = 0;
                                this.state = temp_state;
                                this.threshold = (length * ArrayLongLongMap.loadFactor);
                            };
                            ArrayLongLongMap.prototype.serialize = function (metaModel) {
                                var buffer = new java.lang.StringBuilder();
                                if (this._metaClassIndex != -1) {
                                    buffer.append(metaModel.metaClass(this._metaClassIndex).metaName());
                                    buffer.append(',');
                                }
                                org.kevoree.modeling.util.maths.Base64.encodeIntToBuffer(this.elementCount, buffer);
                                buffer.append('/');
                                var isFirst = true;
                                var internalState = this.state;
                                for (var i = 0; i < internalState.elementNext.length; i++) {
                                    if (internalState.elementNext[i] != -1) {
                                        var loopKey = internalState.elementKV[i * 2];
                                        var loopValue = internalState.elementKV[i * 2 + 1];
                                        if (!isFirst) {
                                            buffer.append(",");
                                        }
                                        isFirst = false;
                                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(loopKey, buffer);
                                        buffer.append(":");
                                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(loopValue, buffer);
                                    }
                                }
                                return buffer.toString();
                            };
                            ArrayLongLongMap.prototype.free = function (metaModel) {
                                this.clear();
                            };
                            ArrayLongLongMap.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP;
                            };
                            ArrayLongLongMap.prototype.space = function () {
                                return this._space;
                            };
                            ArrayLongLongMap.prototype.internal_set_dirty = function () {
                                if (this._space != null) {
                                    if ((this._flags.get() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        this._space.declareDirty(this);
                                        this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                    }
                                }
                                else {
                                    this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                }
                            };
                            ArrayLongLongMap.prototype.getFlags = function () {
                                return this._flags.get();
                            };
                            ArrayLongLongMap.prototype.setFlags = function (bitsToEnable, bitsToDisable) {
                                var val;
                                var nval;
                                do {
                                    val = this._flags.get();
                                    nval = val & ~bitsToDisable | bitsToEnable;
                                } while (!this._flags.compareAndSet(val, nval));
                            };
                            ArrayLongLongMap.prototype.universe = function () {
                                return this._universe;
                            };
                            ArrayLongLongMap.prototype.time = function () {
                                return this._time;
                            };
                            ArrayLongLongMap.prototype.obj = function () {
                                return this._obj;
                            };
                            ArrayLongLongMap.loadFactor = (75 / 100);
                            return ArrayLongLongMap;
                        })();
                        impl.ArrayLongLongMap = ArrayLongLongMap;
                        var ArrayLongLongMap;
                        (function (ArrayLongLongMap) {
                            var InternalState = (function () {
                                function InternalState(elementDataSize, elementKV, elementNext, elementHash) {
                                    this.elementDataSize = elementDataSize;
                                    this.elementKV = elementKV;
                                    this.elementNext = elementNext;
                                    this.elementHash = elementHash;
                                }
                                return InternalState;
                            })();
                            ArrayLongLongMap.InternalState = InternalState;
                        })(ArrayLongLongMap = impl.ArrayLongLongMap || (impl.ArrayLongLongMap = {}));
                        var ArrayLongLongTree = (function (_super) {
                            __extends(ArrayLongLongTree, _super);
                            function ArrayLongLongTree(p_universe, p_time, p_obj, p_space) {
                                _super.call(this, p_universe, p_time, p_obj, p_space);
                                this.kvSize = 2;
                            }
                            ArrayLongLongTree.prototype.previousOrEqualValue = function (p_key) {
                                var result = this.internal_previousOrEqual_index(p_key);
                                if (result != -1) {
                                    return this.value(result);
                                }
                                else {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                            };
                            ArrayLongLongTree.prototype.lookupValue = function (p_key) {
                                return this.internal_lookup_value(p_key);
                            };
                            ArrayLongLongTree.prototype.insert = function (p_key, p_value) {
                                this.internal_insert(p_key, p_value);
                            };
                            ArrayLongLongTree.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE;
                            };
                            return ArrayLongLongTree;
                        })(org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree);
                        impl.ArrayLongLongTree = ArrayLongLongTree;
                        var ArrayLongMap = (function () {
                            function ArrayLongMap(initalCapacity, loadFactor) {
                            }
                            ArrayLongMap.prototype.clear = function () { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    delete this[p];
                                }
                            } };
                            ArrayLongMap.prototype.get = function (key) { return this[key]; };
                            ArrayLongMap.prototype.put = function (key, pval) { var previousVal = this[key]; this[key] = pval; return previousVal; };
                            ArrayLongMap.prototype.contains = function (key) { return this.hasOwnProperty(key); };
                            ArrayLongMap.prototype.remove = function (key) { var tmp = this[key]; delete this[key]; return tmp; };
                            ArrayLongMap.prototype.size = function () { return Object.keys(this).length; };
                            ArrayLongMap.prototype.each = function (callback) { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    callback(+p, this[p]);
                                }
                            } };
                            return ArrayLongMap;
                        })();
                        impl.ArrayLongMap = ArrayLongMap;
                        var ArrayLongTree = (function (_super) {
                            __extends(ArrayLongTree, _super);
                            function ArrayLongTree(p_universe, p_time, p_obj, p_space) {
                                _super.call(this, p_universe, p_time, p_obj, p_space);
                            }
                            ArrayLongTree.prototype.previousOrEqual = function (key) {
                                var result = this.internal_previousOrEqual_index(key);
                                if (result != -1) {
                                    return this.key(result);
                                }
                                else {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                            };
                            ArrayLongTree.prototype.insert = function (p_key) {
                                this.internal_insert(p_key, p_key);
                            };
                            ArrayLongTree.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE;
                            };
                            return ArrayLongTree;
                        })(org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree);
                        impl.ArrayLongTree = ArrayLongTree;
                        var ArrayStringMap = (function () {
                            function ArrayStringMap(initalCapacity, loadFactor) {
                            }
                            ArrayStringMap.prototype.clear = function () { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    delete this[p];
                                }
                            } };
                            ArrayStringMap.prototype.get = function (key) { return this[key]; };
                            ArrayStringMap.prototype.put = function (key, pval) { var previousVal = this[key]; this[key] = pval; return previousVal; };
                            ArrayStringMap.prototype.contains = function (key) { return this.hasOwnProperty(key); };
                            ArrayStringMap.prototype.remove = function (key) { var tmp = this[key]; delete this[key]; return tmp; };
                            ArrayStringMap.prototype.size = function () { return Object.keys(this).length; };
                            ArrayStringMap.prototype.each = function (callback) { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    callback(p, this[p]);
                                }
                            } };
                            return ArrayStringMap;
                        })();
                        impl.ArrayStringMap = ArrayStringMap;
                        var HeapObjectChunk = (function () {
                            function HeapObjectChunk(p_universe, p_time, p_obj, p_space) {
                                this._metaClassIndex = -1;
                                this._universe = p_universe;
                                this._time = p_time;
                                this._obj = p_obj;
                                this._flags = new java.util.concurrent.atomic.AtomicLong(0);
                                this._counter = new java.util.concurrent.atomic.AtomicInteger(0);
                                this._space = p_space;
                            }
                            HeapObjectChunk.prototype.space = function () {
                                return this._space;
                            };
                            HeapObjectChunk.prototype.metaClassIndex = function () {
                                return this._metaClassIndex;
                            };
                            HeapObjectChunk.prototype.serialize = function (metaModel) {
                                var metaClass = metaModel.metaClass(this._metaClassIndex);
                                var builder = new java.lang.StringBuilder();
                                builder.append("{");
                                var isFirst = true;
                                var metaElements = metaClass.metaElements();
                                if (this.raw != null && metaElements != null) {
                                    for (var i = 0; i < this.raw.length && i < metaElements.length; i++) {
                                        if (this.raw[i] != null) {
                                            if (isFirst) {
                                                builder.append("\"");
                                                isFirst = false;
                                            }
                                            else {
                                                builder.append(",\"");
                                            }
                                            builder.append(metaElements[i].metaName());
                                            builder.append("\":");
                                            if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                                var metaAttribute = metaElements[i];
                                                var metaAttId = metaAttribute.attributeType().id();
                                                switch (metaAttId) {
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                                        builder.append("\"");
                                                        builder.append(org.kevoree.modeling.format.json.JsonString.encode(this.raw[i]));
                                                        builder.append("\"");
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                                        builder.append("\"");
                                                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(this.raw[i], builder);
                                                        builder.append("\"");
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                        this.doubleArrayToBuffer(builder, i, true);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                                        if (this.raw[i]) {
                                                            builder.append("1");
                                                        }
                                                        else {
                                                            builder.append("0");
                                                        }
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                                        builder.append("\"");
                                                        org.kevoree.modeling.util.maths.Base64.encodeDoubleToBuffer(this.raw[i], builder);
                                                        builder.append("\"");
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                                        builder.append("\"");
                                                        org.kevoree.modeling.util.maths.Base64.encodeIntToBuffer(this.raw[i], builder);
                                                        builder.append("\"");
                                                        break;
                                                    default:
                                                        if (metaAttribute.attributeType().isEnum()) {
                                                            org.kevoree.modeling.util.maths.Base64.encodeIntToBuffer(this.raw[i], builder);
                                                        }
                                                        break;
                                                }
                                            }
                                            else {
                                                if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                    this.longArrayToBuffer(builder, i, true);
                                                }
                                                else {
                                                    if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.DEPENDENCIES || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.INPUT || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.OUTPUT) {
                                                        this.doubleArrayToBuffer(builder, i, true);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                builder.append("}");
                                return builder.toString();
                            };
                            HeapObjectChunk.prototype.doubleArrayToBuffer = function (builder, i, encoded) {
                                builder.append("[");
                                var castedArr = this.raw[i];
                                for (var j = 0; j < castedArr.length; j++) {
                                    if (j != 0) {
                                        builder.append(",");
                                    }
                                    if (encoded) {
                                        builder.append("\"");
                                        org.kevoree.modeling.util.maths.Base64.encodeDoubleToBuffer(castedArr[j], builder);
                                        builder.append("\"");
                                    }
                                    else {
                                        builder.append(castedArr[j]);
                                    }
                                }
                                builder.append("]");
                            };
                            HeapObjectChunk.prototype.longArrayToBuffer = function (builder, i, encoded) {
                                builder.append("[");
                                var castedArr = this.raw[i];
                                for (var j = 0; j < castedArr.length; j++) {
                                    if (j != 0) {
                                        builder.append(",");
                                    }
                                    if (encoded) {
                                        builder.append("\"");
                                        org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(castedArr[j], builder);
                                        builder.append("\"");
                                    }
                                    else {
                                        builder.append(castedArr[j]);
                                    }
                                }
                                builder.append("]");
                            };
                            HeapObjectChunk.prototype.init = function (payload, metaModel, metaClassIndex) {
                                if (this._metaClassIndex == -1) {
                                    this._metaClassIndex = metaClassIndex;
                                }
                                if (this._metaClassIndex == -1) {
                                    return;
                                }
                                var metaClass = metaModel.metaClass(this._metaClassIndex);
                                this.raw = new Array();
                                if (payload != null) {
                                    var objectReader = new org.kevoree.modeling.format.json.JsonObjectReader();
                                    objectReader.parseObject(payload);
                                    var metaKeys = objectReader.keys();
                                    for (var i = 0; i < metaKeys.length; i++) {
                                        var insideContent = objectReader.get(metaKeys[i]);
                                        var metaElement = metaClass.metaByName(metaKeys[i]);
                                        if (insideContent != null) {
                                            if (metaElement != null && metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                                var metaAttribute = metaElement;
                                                var converted = null;
                                                var metaAttId = metaAttribute.attributeType().id();
                                                switch (metaAttId) {
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                                        converted = org.kevoree.modeling.format.json.JsonString.unescape(insideContent);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                                        converted = org.kevoree.modeling.util.maths.Base64.decodeToLong(insideContent);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                                        converted = org.kevoree.modeling.util.maths.Base64.decodeToInt(insideContent);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                                        if (insideContent.equals("1")) {
                                                            converted = true;
                                                        }
                                                        else {
                                                            converted = false;
                                                        }
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                                        converted = org.kevoree.modeling.util.maths.Base64.decodeToDouble(insideContent);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                        var plainRawSet = objectReader.getAsStringArray(metaKeys[i]);
                                                        var convertedRaw = new Float64Array(plainRawSet.length);
                                                        for (var l = 0; l < plainRawSet.length; l++) {
                                                            try {
                                                                convertedRaw[l] = org.kevoree.modeling.util.maths.Base64.decodeToDouble(plainRawSet[l]);
                                                            }
                                                            catch ($ex$) {
                                                                if ($ex$ instanceof java.lang.Exception) {
                                                                    var e = $ex$;
                                                                    e.printStackTrace();
                                                                }
                                                                else {
                                                                    throw $ex$;
                                                                }
                                                            }
                                                        }
                                                        converted = convertedRaw;
                                                        break;
                                                }
                                                this.raw[metaAttribute.index()] = converted;
                                            }
                                            if (metaElement != null && metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.REFERENCE)) {
                                                try {
                                                    var plainRawSet = objectReader.getAsStringArray(metaKeys[i]);
                                                    var convertedRaw = new Float64Array(plainRawSet.length);
                                                    for (var l = 0; l < plainRawSet.length; l++) {
                                                        try {
                                                            convertedRaw[l] = org.kevoree.modeling.util.maths.Base64.decodeToLong(plainRawSet[l]);
                                                        }
                                                        catch ($ex$) {
                                                            if ($ex$ instanceof java.lang.Exception) {
                                                                var e = $ex$;
                                                                e.printStackTrace();
                                                            }
                                                            else {
                                                                throw $ex$;
                                                            }
                                                        }
                                                    }
                                                    this.raw[metaElement.index()] = convertedRaw;
                                                }
                                                catch ($ex$) {
                                                    if ($ex$ instanceof java.lang.Exception) {
                                                        var e = $ex$;
                                                        e.printStackTrace();
                                                    }
                                                    else {
                                                        throw $ex$;
                                                    }
                                                }
                                            }
                                            else {
                                                if (metaElement != null && (metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.DEPENDENCIES) || metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.INPUT) || metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.OUTPUT))) {
                                                    try {
                                                        var plainRawSet = objectReader.getAsStringArray(metaKeys[i]);
                                                        var convertedRaw = new Float64Array(plainRawSet.length);
                                                        for (var l = 0; l < plainRawSet.length; l++) {
                                                            try {
                                                                convertedRaw[l] = org.kevoree.modeling.util.maths.Base64.decodeToDouble(plainRawSet[l]);
                                                            }
                                                            catch ($ex$) {
                                                                if ($ex$ instanceof java.lang.Exception) {
                                                                    var e = $ex$;
                                                                    e.printStackTrace();
                                                                }
                                                                else {
                                                                    throw $ex$;
                                                                }
                                                            }
                                                        }
                                                        this.raw[metaElement.index()] = convertedRaw;
                                                    }
                                                    catch ($ex$) {
                                                        if ($ex$ instanceof java.lang.Exception) {
                                                            var e = $ex$;
                                                            e.printStackTrace();
                                                        }
                                                        else {
                                                            throw $ex$;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            HeapObjectChunk.prototype.counter = function () {
                                return this._counter.get();
                            };
                            HeapObjectChunk.prototype.inc = function () {
                                return this._counter.incrementAndGet();
                            };
                            HeapObjectChunk.prototype.dec = function () {
                                return this._counter.decrementAndGet();
                            };
                            HeapObjectChunk.prototype.free = function (metaModel) {
                                this.raw = null;
                            };
                            HeapObjectChunk.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK;
                            };
                            HeapObjectChunk.prototype.getPrimitiveType = function (index, p_metaClass) {
                                if (this.raw != null) {
                                    return this.raw[index];
                                }
                                else {
                                    return null;
                                }
                            };
                            HeapObjectChunk.prototype.getLongArraySize = function (index, metaClass) {
                                var existing = this.raw[index];
                                if (existing != null) {
                                    return existing.length;
                                }
                                return 0;
                            };
                            HeapObjectChunk.prototype.getLongArrayElem = function (index, refIndex, metaClass) {
                                var existing = this.raw[index];
                                if (existing != null) {
                                    return existing[refIndex];
                                }
                                else {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                            };
                            HeapObjectChunk.prototype.getLongArray = function (index, p_metaClass) {
                                if (this.raw != null) {
                                    var previousObj = this.raw[index];
                                    if (previousObj != null) {
                                        try {
                                            return previousObj;
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                                this.raw[index] = null;
                                                return null;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    else {
                                        return null;
                                    }
                                }
                                else {
                                    return null;
                                }
                            };
                            HeapObjectChunk.prototype.addLongToArray = function (index, newRef, metaClass) {
                                if (this.raw != null) {
                                    var previous = this.raw[index];
                                    if (previous == null) {
                                        previous = new Float64Array(1);
                                        previous[0] = newRef;
                                    }
                                    else {
                                        for (var i = 0; i < previous.length; i++) {
                                            if (previous[i] == newRef) {
                                                return false;
                                            }
                                        }
                                        var incArray = new Float64Array(previous.length + 1);
                                        System.arraycopy(previous, 0, incArray, 0, previous.length);
                                        incArray[previous.length] = newRef;
                                        previous = incArray;
                                    }
                                    this.raw[index] = previous;
                                    this.internal_set_dirty();
                                    return true;
                                }
                                return false;
                            };
                            HeapObjectChunk.prototype.removeLongToArray = function (index, refToRemove, metaClass) {
                                if (this.raw != null) {
                                    var previous = this.raw[index];
                                    if (previous != null) {
                                        var indexToRemove = -1;
                                        for (var i = 0; i < previous.length; i++) {
                                            if (previous[i] == refToRemove) {
                                                indexToRemove = i;
                                                break;
                                            }
                                        }
                                        if (indexToRemove != -1) {
                                            if ((previous.length - 1) == 0) {
                                                this.raw[index] = null;
                                            }
                                            else {
                                                var newArray = new Float64Array(previous.length - 1);
                                                System.arraycopy(previous, 0, newArray, 0, indexToRemove);
                                                System.arraycopy(previous, indexToRemove + 1, newArray, indexToRemove, previous.length - indexToRemove - 1);
                                                this.raw[index] = newArray;
                                            }
                                            this.internal_set_dirty();
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            };
                            HeapObjectChunk.prototype.clearLongArray = function (index, metaClass) {
                                this.raw[index] = null;
                            };
                            HeapObjectChunk.prototype.getDoubleArray = function (index, metaClass) {
                                if (this.raw != null) {
                                    var previousObj = this.raw[index];
                                    if (previousObj != null) {
                                        try {
                                            return previousObj;
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                                this.raw[index] = null;
                                                return null;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    else {
                                        return null;
                                    }
                                }
                                else {
                                    return null;
                                }
                            };
                            HeapObjectChunk.prototype.getDoubleArraySize = function (index, metaClass) {
                                var previousObj = this.raw[index];
                                if (previousObj != null) {
                                    return previousObj.length;
                                }
                                return 0;
                            };
                            HeapObjectChunk.prototype.getDoubleArrayElem = function (index, arrayIndex, metaClass) {
                                var res = this.getDoubleArray(index, metaClass);
                                if (org.kevoree.modeling.util.Checker.isDefined(res)) {
                                    return res[arrayIndex];
                                }
                                return 0;
                            };
                            HeapObjectChunk.prototype.setDoubleArrayElem = function (index, arrayIndex, valueToInsert, metaClass) {
                                var res = this.getDoubleArray(index, metaClass);
                                if (org.kevoree.modeling.util.Checker.isDefined(res)) {
                                    res[arrayIndex] = valueToInsert;
                                    this.internal_set_dirty();
                                }
                            };
                            HeapObjectChunk.prototype.extendDoubleArray = function (index, newSize, metaClass) {
                                if (this.raw != null) {
                                    var previous = this.raw[index];
                                    if (previous == null) {
                                        previous = new Float64Array(newSize);
                                    }
                                    else {
                                        var incArray = new Float64Array(newSize);
                                        System.arraycopy(previous, 0, incArray, 0, previous.length);
                                        previous = incArray;
                                    }
                                    this.raw[index] = previous;
                                    this.internal_set_dirty();
                                }
                            };
                            HeapObjectChunk.prototype.setPrimitiveType = function (index, content, p_metaClass) {
                                this.raw[index] = content;
                                this.internal_set_dirty();
                            };
                            HeapObjectChunk.prototype.clone = function (p_universe, p_time, p_obj, p_metaClass) {
                                if (this.raw == null) {
                                    return new org.kevoree.modeling.memory.chunk.impl.HeapObjectChunk(p_universe, p_time, p_obj, this._space);
                                }
                                else {
                                    var cloned = new Array();
                                    System.arraycopy(this.raw, 0, cloned, 0, this.raw.length);
                                    var clonedEntry = new org.kevoree.modeling.memory.chunk.impl.HeapObjectChunk(p_universe, p_time, p_obj, this._space);
                                    clonedEntry.raw = cloned;
                                    clonedEntry._metaClassIndex = this._metaClassIndex;
                                    clonedEntry.internal_set_dirty();
                                    return clonedEntry;
                                }
                            };
                            HeapObjectChunk.prototype.toJSON = function (metaModel) {
                                var metaClass = metaModel.metaClass(this._metaClassIndex);
                                var builder = new java.lang.StringBuilder();
                                builder.append("{");
                                var isFirst = true;
                                var metaElements = metaClass.metaElements();
                                if (this.raw != null && metaElements != null) {
                                    for (var i = 0; i < this.raw.length && i < metaElements.length; i++) {
                                        if (this.raw[i] != null) {
                                            if (isFirst) {
                                                builder.append("\"");
                                                isFirst = false;
                                            }
                                            else {
                                                builder.append(",\"");
                                            }
                                            builder.append(metaElements[i].metaName());
                                            builder.append("\":");
                                            if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                                var metaAttribute = metaElements[i];
                                                var metaAttId = metaAttribute.attributeType().id();
                                                switch (metaAttId) {
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                                        builder.append("\"");
                                                        builder.append(org.kevoree.modeling.format.json.JsonString.encode(this.raw[i]));
                                                        builder.append("\"");
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                                        builder.append(this.raw[i]);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                        this.doubleArrayToBuffer(builder, i, false);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                                        if (this.raw[i]) {
                                                            builder.append("1");
                                                        }
                                                        else {
                                                            builder.append("0");
                                                        }
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                                        builder.append(this.raw[i]);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                                        builder.append(this.raw[i]);
                                                        break;
                                                    default:
                                                        if (metaAttribute.attributeType().isEnum()) {
                                                            org.kevoree.modeling.util.maths.Base64.encodeIntToBuffer(this.raw[i], builder);
                                                        }
                                                        break;
                                                }
                                            }
                                            else {
                                                if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                    this.longArrayToBuffer(builder, i, false);
                                                }
                                                else {
                                                    if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.DEPENDENCIES || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.INPUT || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.OUTPUT) {
                                                        this.doubleArrayToBuffer(builder, i, false);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                builder.append("}");
                                return builder.toString();
                            };
                            HeapObjectChunk.prototype.internal_set_dirty = function () {
                                if (this._space != null) {
                                    if ((this._flags.get() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        this._space.declareDirty(this);
                                        this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                    }
                                }
                                else {
                                    this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                }
                            };
                            HeapObjectChunk.prototype.getFlags = function () {
                                return this._flags.get();
                            };
                            HeapObjectChunk.prototype.setFlags = function (bitsToEnable, bitsToDisable) {
                                var val;
                                var nval;
                                do {
                                    val = this._flags.get();
                                    nval = val & ~bitsToDisable | bitsToEnable;
                                } while (!this._flags.compareAndSet(val, nval));
                            };
                            HeapObjectChunk.prototype.universe = function () {
                                return this._universe;
                            };
                            HeapObjectChunk.prototype.time = function () {
                                return this._time;
                            };
                            HeapObjectChunk.prototype.obj = function () {
                                return this._obj;
                            };
                            return HeapObjectChunk;
                        })();
                        impl.HeapObjectChunk = HeapObjectChunk;
                    })(impl = chunk.impl || (chunk.impl = {}));
                })(chunk = memory.chunk || (memory.chunk = {}));
                var manager;
                (function (manager) {
                    var DataManagerBuilder = (function () {
                        function DataManagerBuilder() {
                        }
                        DataManagerBuilder.prototype.driver = function () {
                            if (this._driver == null) {
                                this._driver = new org.kevoree.modeling.cdn.impl.MemoryContentDeliveryDriver();
                            }
                            return this._driver;
                        };
                        DataManagerBuilder.prototype.scheduler = function () {
                            if (this._scheduler == null) {
                                this._scheduler = new org.kevoree.modeling.scheduler.impl.DirectScheduler();
                            }
                            return this._scheduler;
                        };
                        DataManagerBuilder.prototype.strategy = function () {
                            if (this._strategy == null) {
                                this._strategy = new org.kevoree.modeling.memory.strategy.impl.HeapMemoryStrategy();
                            }
                            return this._strategy;
                        };
                        DataManagerBuilder.create = function () {
                            return new org.kevoree.modeling.memory.manager.DataManagerBuilder();
                        };
                        DataManagerBuilder.prototype.withContentDeliveryDriver = function (p_driver) {
                            this._driver = p_driver;
                            return this;
                        };
                        DataManagerBuilder.prototype.withScheduler = function (p_scheduler) {
                            this._scheduler = p_scheduler;
                            return this;
                        };
                        DataManagerBuilder.prototype.withMemoryStrategy = function (p_strategy) {
                            this._strategy = p_strategy;
                            return this;
                        };
                        DataManagerBuilder.prototype.build = function () {
                            return new org.kevoree.modeling.memory.manager.impl.DataManager(this.driver(), this.scheduler(), this.strategy());
                        };
                        DataManagerBuilder.buildDefault = function () {
                            return org.kevoree.modeling.memory.manager.DataManagerBuilder.create().build();
                        };
                        return DataManagerBuilder;
                    })();
                    manager.DataManagerBuilder = DataManagerBuilder;
                    var impl;
                    (function (impl) {
                        var DataManager = (function () {
                            function DataManager(p_cdn, p_scheduler, p_factory) {
                                this._objectKeyCalculator = null;
                                this._universeKeyCalculator = null;
                                this.isConnected = false;
                                this.currentCdnListener = -1;
                                this._space = p_factory.newSpace();
                                this._spaceManager = p_factory.newSpaceManager(this._space);
                                this._resolver = new org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver(this._spaceManager, this);
                                this._listenerManager = new org.kevoree.modeling.memory.manager.impl.ListenerManager();
                                this._modelKeyCalculator = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(DataManager.zeroPrefix, 0);
                                this._db = p_cdn;
                                this._scheduler = p_scheduler;
                                this.attachContentDeliveryDriver(new org.kevoree.modeling.cdn.impl.MemoryContentDeliveryDriver());
                                this._operationManager = new org.kevoree.modeling.operation.impl.HashOperationManager(this);
                            }
                            DataManager.prototype.setModel = function (p_model) {
                                this._model = p_model;
                            };
                            DataManager.prototype.model = function () {
                                return this._model;
                            };
                            DataManager.prototype.close = function (callback) {
                                this.isConnected = false;
                                if (this._db != null) {
                                    this._db.close(callback);
                                }
                                else {
                                    callback(null);
                                }
                            };
                            DataManager.prototype.nextUniverseKey = function () {
                                if (this._universeKeyCalculator == null) {
                                    throw new java.lang.RuntimeException(DataManager.UNIVERSE_NOT_CONNECTED_ERROR);
                                }
                                return this._universeKeyCalculator.nextKey();
                            };
                            DataManager.prototype.nextObjectKey = function () {
                                if (this._objectKeyCalculator == null) {
                                    throw new java.lang.RuntimeException(DataManager.UNIVERSE_NOT_CONNECTED_ERROR);
                                }
                                return this._objectKeyCalculator.nextKey();
                            };
                            DataManager.prototype.nextModelKey = function () {
                                return this._modelKeyCalculator.nextKey();
                            };
                            DataManager.prototype.initUniverse = function (p_universe, p_parent) {
                                var cached = this._space.get(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                                if (cached != null && !cached.contains(p_universe)) {
                                    cached.put(p_universe, p_parent);
                                }
                            };
                            DataManager.prototype.save = function (callback) {
                                var dirtyIterator = this._space.detachDirties();
                                if (dirtyIterator.size() == 0) {
                                    callback(null);
                                    return;
                                }
                                var toSaveKeys = new Float64Array((dirtyIterator.size() + DataManager.PREFIX_TO_SAVE_SIZE) * DataManager.KEY_SIZE);
                                var toSaveValues = new Array();
                                var i = 0;
                                var _mm = this._model.metaModel();
                                while (dirtyIterator.hasNext()) {
                                    var loopChunkKeys = dirtyIterator.next();
                                    var loopChunk = this._spaceManager.getAndMark(loopChunkKeys[0], loopChunkKeys[1], loopChunkKeys[2]);
                                    if (loopChunk != null) {
                                        loopChunk.setFlags(0, org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT);
                                        toSaveKeys[i * DataManager.KEY_SIZE] = loopChunk.universe();
                                        toSaveKeys[i * DataManager.KEY_SIZE + 1] = loopChunk.time();
                                        toSaveKeys[i * DataManager.KEY_SIZE + 2] = loopChunk.obj();
                                        try {
                                            toSaveValues[i] = loopChunk.serialize(_mm);
                                            i++;
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                        this._spaceManager.unmarkMemoryElement(loopChunk);
                                    }
                                }
                                toSaveKeys[i * DataManager.KEY_SIZE] = org.kevoree.modeling.KConfig.BEGINNING_OF_TIME;
                                toSaveKeys[i * DataManager.KEY_SIZE + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                toSaveKeys[i * DataManager.KEY_SIZE + 2] = this._objectKeyCalculator.prefix();
                                toSaveValues[i] = "" + this._objectKeyCalculator.lastComputedIndex();
                                i++;
                                toSaveKeys[i * DataManager.KEY_SIZE] = org.kevoree.modeling.KConfig.END_OF_TIME;
                                toSaveKeys[i * DataManager.KEY_SIZE + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                toSaveKeys[i * DataManager.KEY_SIZE + 2] = this._universeKeyCalculator.prefix();
                                toSaveValues[i] = "" + this._universeKeyCalculator.lastComputedIndex();
                                this._db.put(toSaveKeys, toSaveValues, callback, this.currentCdnListener);
                            };
                            DataManager.prototype.initKObject = function (obj) {
                                this._resolver.indexObject(obj);
                            };
                            DataManager.prototype.preciseChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                var resolvedChunk = this._resolver.preciseChunk(universe, time, uuid, metaClass, previousResolution);
                                if (resolvedChunk != null) {
                                    return resolvedChunk;
                                }
                                else {
                                    throw new java.lang.RuntimeException("Cache Miss, not implemented Yet " + universe + "," + time + "," + uuid);
                                }
                            };
                            DataManager.prototype.closestChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                var resolvedChunk = this._resolver.closestChunk(universe, time, uuid, metaClass, previousResolution);
                                if (resolvedChunk != null) {
                                    return resolvedChunk;
                                }
                                else {
                                    throw new java.lang.RuntimeException("Cache Miss, not implemented Yet " + universe + "," + time + "," + uuid);
                                }
                            };
                            DataManager.prototype.connect = function (connectCallback) {
                                var _this = this;
                                if (this.isConnected) {
                                    if (connectCallback != null) {
                                        connectCallback(null);
                                    }
                                }
                                if (this._db == null) {
                                    if (connectCallback != null) {
                                        connectCallback(new java.lang.Exception("Please attach a KDataBase AND a KBroker first !"));
                                    }
                                }
                                else {
                                    this._db.connect(function (throwable) {
                                        if (throwable == null) {
                                            _this._db.atomicGetIncrement(new Float64Array([org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]), function (newPrefix) {
                                                _this.prefix = newPrefix;
                                                var connectionKeys = new Float64Array([org.kevoree.modeling.KConfig.BEGINNING_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, newPrefix, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, newPrefix, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]);
                                                _this._db.get(connectionKeys, function (strings) {
                                                    if (strings.length == 3) {
                                                        var detected = null;
                                                        try {
                                                            var uniIndexPayload = strings[DataManager.UNIVERSE_INDEX];
                                                            if (uniIndexPayload == null || uniIndexPayload.equals("")) {
                                                                uniIndexPayload = "0";
                                                            }
                                                            var objIndexPayload = strings[DataManager.OBJ_INDEX];
                                                            if (objIndexPayload == null || objIndexPayload.equals("")) {
                                                                objIndexPayload = "0";
                                                            }
                                                            var globalUniverseTreePayload = strings[DataManager.GLO_TREE_INDEX];
                                                            var globalUniverseTree = _this._spaceManager.createAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP);
                                                            if (globalUniverseTreePayload != null) {
                                                                try {
                                                                    globalUniverseTree.init(globalUniverseTreePayload, _this.model().metaModel(), -1);
                                                                }
                                                                catch ($ex$) {
                                                                    if ($ex$ instanceof java.lang.Exception) {
                                                                        var e = $ex$;
                                                                        e.printStackTrace();
                                                                    }
                                                                    else {
                                                                        throw $ex$;
                                                                    }
                                                                }
                                                            }
                                                            var newUniIndex = java.lang.Long.parseLong(uniIndexPayload);
                                                            var newObjIndex = java.lang.Long.parseLong(objIndexPayload);
                                                            _this._universeKeyCalculator = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(_this.prefix, newUniIndex);
                                                            _this._objectKeyCalculator = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(_this.prefix, newObjIndex);
                                                            _this.isConnected = true;
                                                        }
                                                        catch ($ex$) {
                                                            if ($ex$ instanceof java.lang.Exception) {
                                                                var e = $ex$;
                                                                detected = e;
                                                            }
                                                            else {
                                                                throw $ex$;
                                                            }
                                                        }
                                                        if (connectCallback != null) {
                                                            connectCallback(detected);
                                                        }
                                                    }
                                                    else {
                                                        if (connectCallback != null) {
                                                            connectCallback(new java.lang.Exception("Error while connecting the KDataStore..."));
                                                        }
                                                    }
                                                });
                                            });
                                        }
                                        else {
                                            if (connectCallback != null) {
                                                connectCallback(throwable);
                                            }
                                        }
                                    });
                                }
                            };
                            DataManager.prototype.delete = function (p_universe, callback) {
                                throw new java.lang.RuntimeException("Not implemented yet !");
                            };
                            DataManager.prototype.lookup = function (universe, time, uuid, callback) {
                                this._scheduler.dispatch(this._resolver.lookup(universe, time, uuid, callback));
                            };
                            DataManager.prototype.lookupAllObjects = function (universe, time, uuids, callback) {
                                this._scheduler.dispatch(this._resolver.lookupAllObjects(universe, time, uuids, callback));
                            };
                            DataManager.prototype.lookupAllTimes = function (universe, times, uuid, callback) {
                                this._scheduler.dispatch(this._resolver.lookupAllTimes(universe, times, uuid, callback));
                            };
                            DataManager.prototype.getRoot = function (universe, time, callback) {
                                this._resolver.getRoot(universe, time, callback);
                            };
                            DataManager.prototype.setRoot = function (newRoot, callback) {
                                this._resolver.setRoot(newRoot, callback);
                            };
                            DataManager.prototype.cdn = function () {
                                return this._db;
                            };
                            DataManager.prototype.attachContentDeliveryDriver = function (p_dataBase) {
                                var _this = this;
                                this.currentCdnListener = this._db.addUpdateListener(function (updatedKeys) {
                                    var toLoadKeys = new Float64Array(updatedKeys.length);
                                    var toInsertNotifyKey = 0;
                                    var toNotifyKeys = new Float64Array(updatedKeys.length);
                                    var nbElements = updatedKeys.length / DataManager.KEY_SIZE;
                                    var toInsertKey = 0;
                                    for (var i = 0; i < nbElements; i++) {
                                        var currentChunk = _this._spaceManager.getAndMark(updatedKeys[i * 3], updatedKeys[i * 3 + 1], updatedKeys[i * 3 + 2]);
                                        if (currentChunk != null) {
                                            if ((currentChunk.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                                toLoadKeys[toInsertKey * DataManager.KEY_SIZE] = updatedKeys[i * DataManager.KEY_SIZE];
                                                toLoadKeys[toInsertKey * DataManager.KEY_SIZE + 1] = updatedKeys[i * DataManager.KEY_SIZE + 1];
                                                toLoadKeys[toInsertKey * DataManager.KEY_SIZE + 2] = updatedKeys[i * DataManager.KEY_SIZE + 2];
                                                toInsertKey++;
                                            }
                                            _this._spaceManager.unmarkMemoryElement(currentChunk);
                                        }
                                        if (_this._listenerManager.isListened(updatedKeys[i * DataManager.KEY_SIZE + 2]) && updatedKeys[i * DataManager.KEY_SIZE] != org.kevoree.modeling.KConfig.NULL_LONG && updatedKeys[i * DataManager.KEY_SIZE + 1] != org.kevoree.modeling.KConfig.NULL_LONG && updatedKeys[i * DataManager.KEY_SIZE + 2] != org.kevoree.modeling.KConfig.NULL_LONG) {
                                            toNotifyKeys[toInsertNotifyKey * DataManager.KEY_SIZE] = updatedKeys[i * DataManager.KEY_SIZE];
                                            toNotifyKeys[toInsertNotifyKey * DataManager.KEY_SIZE + 1] = updatedKeys[i * DataManager.KEY_SIZE + 1];
                                            toNotifyKeys[toInsertNotifyKey * DataManager.KEY_SIZE + 2] = updatedKeys[i * DataManager.KEY_SIZE + 2];
                                            toInsertNotifyKey++;
                                        }
                                    }
                                    if (toInsertKey == 0 && toInsertNotifyKey == 0) {
                                        return;
                                    }
                                    var trimmedToLoad = new Float64Array(toInsertKey * 3);
                                    System.arraycopy(toLoadKeys, 0, trimmedToLoad, 0, toInsertKey * 3);
                                    var trimmedToNotify = new Float64Array(toInsertNotifyKey * 3);
                                    System.arraycopy(toNotifyKeys, 0, trimmedToNotify, 0, toInsertNotifyKey * 3);
                                    var mm = _this._model.metaModel();
                                    _this._db.get(trimmedToLoad, function (payloads) {
                                        for (var i = 0; i < payloads.length; i++) {
                                            if (payloads[i] != null) {
                                                var currentChunk = _this._spaceManager.getAndMark(trimmedToLoad[i * 3], trimmedToLoad[i * 3 + 1], trimmedToLoad[i * 3 + 2]);
                                                if (currentChunk != null) {
                                                    currentChunk.init(payloads[i], mm, -1);
                                                    _this._spaceManager.unmarkMemoryElement(currentChunk);
                                                }
                                            }
                                        }
                                        _this._resolver.lookupPreciseKeys(trimmedToNotify, function (updatedObjects) {
                                            _this._listenerManager.dispatch(updatedObjects);
                                        }).run();
                                    });
                                });
                            };
                            DataManager.prototype.operationManager = function () {
                                return this._operationManager;
                            };
                            DataManager.prototype.createListener = function (p_universe) {
                                return this._listenerManager.createListener(p_universe);
                            };
                            DataManager.prototype.resolveTimes = function (currentUniverse, currentUuid, startTime, endTime, callback) {
                                this._resolver.resolveTimes(currentUniverse, currentUuid, startTime, endTime, callback);
                            };
                            DataManager.prototype.spaceSize = function () {
                                return this._space.size();
                            };
                            DataManager.prototype.printDebug = function () {
                                this._space.printDebug(this._model.metaModel());
                            };
                            DataManager.UNIVERSE_NOT_CONNECTED_ERROR = "Please connect your createModel prior to create a universe or an object";
                            DataManager.UNIVERSE_INDEX = 0;
                            DataManager.OBJ_INDEX = 1;
                            DataManager.GLO_TREE_INDEX = 2;
                            DataManager.zeroPrefix = 0;
                            DataManager.PREFIX_TO_SAVE_SIZE = 2;
                            DataManager.KEY_SIZE = 3;
                            return DataManager;
                        })();
                        impl.DataManager = DataManager;
                        var HeapListener = (function () {
                            function HeapListener(p_universe, p_listenerManager, p_id) {
                                this._universe = p_universe;
                                this._listenerManager = p_listenerManager;
                                this._id = p_id;
                            }
                            HeapListener.prototype.listenerID = function () {
                                return this._id;
                            };
                            HeapListener.prototype.universe = function () {
                                return 0;
                            };
                            HeapListener.prototype.listenObjects = function () {
                                return this._listenerManager._listener2Objects.get(this._id);
                            };
                            HeapListener.prototype.listen = function (obj) {
                                this._listenerManager.manageRegistration(this._id, obj);
                            };
                            HeapListener.prototype.delete = function () {
                                this._listenerManager.manageRegistration(this._id, null);
                            };
                            HeapListener.prototype.then = function (p_cb) {
                                this.cb = p_cb;
                            };
                            return HeapListener;
                        })();
                        impl.HeapListener = HeapListener;
                        var KeyCalculator = (function () {
                            function KeyCalculator(prefix, currentIndex) {
                                this._prefix = "0x" + prefix.toString(org.kevoree.modeling.KConfig.PREFIX_SIZE);
                                this._currentIndex = currentIndex;
                            }
                            KeyCalculator.prototype.nextKey = function () {
                                if (this._currentIndex == org.kevoree.modeling.KConfig.KEY_PREFIX_MASK) {
                                    throw new java.lang.IndexOutOfBoundsException("Object Index could not be created because it exceeded the capacity of the current prefix. Ask for a new prefix.");
                                }
                                this._currentIndex++;
                                var indexHex = this._currentIndex.toString(org.kevoree.modeling.KConfig.PREFIX_SIZE);
                                var objectKey = parseInt(this._prefix + "000000000".substring(0, 9 - indexHex.length) + indexHex, org.kevoree.modeling.KConfig.PREFIX_SIZE);
                                if (objectKey >= org.kevoree.modeling.KConfig.NULL_LONG) {
                                    throw new java.lang.IndexOutOfBoundsException("Object Index exceeds teh maximum JavaScript number capacity. (2^" + org.kevoree.modeling.KConfig.LONG_SIZE + ")");
                                }
                                return objectKey;
                            };
                            KeyCalculator.prototype.lastComputedIndex = function () {
                                return this._currentIndex;
                            };
                            KeyCalculator.prototype.prefix = function () {
                                return parseInt(this._prefix, org.kevoree.modeling.KConfig.PREFIX_SIZE);
                            };
                            return KeyCalculator;
                        })();
                        impl.KeyCalculator = KeyCalculator;
                        var ListenerManager = (function () {
                            function ListenerManager() {
                                this._keyGen = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(0, 0);
                                this._listeners = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                this._obj2Listener = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                this._listener2Objects = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            }
                            ListenerManager.prototype.clear = function () {
                                this._listeners.clear();
                                this._obj2Listener.clear();
                                this._listener2Objects.clear();
                            };
                            ListenerManager.prototype.createListener = function (p_universe) {
                                var newListener = new org.kevoree.modeling.memory.manager.impl.HeapListener(p_universe, this, this._keyGen.nextKey());
                                this._listeners.put(newListener.listenerID(), newListener);
                                return newListener;
                            };
                            ListenerManager.prototype.manageRegistration = function (listenerID, origin) {
                                if (origin != null) {
                                    if (!this._listener2Objects.contains(listenerID)) {
                                        var newRec = new Float64Array(1);
                                        newRec[0] = origin.uuid();
                                        this._listener2Objects.put(listenerID, newRec);
                                    }
                                    else {
                                        var previous = this._listener2Objects.get(listenerID);
                                        var newArrayRec = new Float64Array(previous.length + 1);
                                        System.arraycopy(previous, 0, newArrayRec, 0, previous.length);
                                        newArrayRec[previous.length] = origin.uuid();
                                        this._listener2Objects.put(listenerID, newArrayRec);
                                    }
                                    if (!this._obj2Listener.contains(origin.uuid())) {
                                        var newRec = new Float64Array(1);
                                        newRec[0] = listenerID;
                                        this._obj2Listener.put(origin.uuid(), newRec);
                                    }
                                    else {
                                        var previous = this._obj2Listener.get(origin.uuid());
                                        var newArrayRec = new Float64Array(previous.length + 1);
                                        System.arraycopy(previous, 0, newArrayRec, 0, previous.length);
                                        newArrayRec[previous.length] = listenerID;
                                        this._obj2Listener.put(origin.uuid(), newArrayRec);
                                    }
                                }
                                else {
                                    var objs = this._listener2Objects.get(listenerID);
                                    if (objs != null) {
                                        this._listener2Objects.remove(listenerID);
                                        for (var i = 0; i < objs.length; i++) {
                                            var registeredListener = this._obj2Listener.get(objs[i]);
                                            var foundIndex = -1;
                                            for (var j = 0; j < registeredListener.length; j++) {
                                                if (registeredListener[j] == listenerID) {
                                                    foundIndex = j;
                                                }
                                            }
                                            if (foundIndex != -1) {
                                                if (foundIndex == 0) {
                                                    var registeredListener2 = new Float64Array(registeredListener.length - 1);
                                                    System.arraycopy(objs, foundIndex, registeredListener2, 0, registeredListener.length - 1);
                                                    this._obj2Listener.put(objs[i], registeredListener2);
                                                }
                                                else {
                                                    var registeredListener2 = new Float64Array(registeredListener.length - 1);
                                                    System.arraycopy(objs, 0, registeredListener2, 0, foundIndex - 1);
                                                    System.arraycopy(objs, foundIndex + 1, registeredListener2, foundIndex, registeredListener.length - foundIndex - 1);
                                                    this._obj2Listener.put(objs[i], registeredListener2);
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            ListenerManager.prototype.isListened = function (obj) {
                                var notifier = this._obj2Listener.get(obj);
                                if (notifier != null && notifier.length > 0) {
                                    return true;
                                }
                                return false;
                            };
                            ListenerManager.prototype.dispatch = function (objects) {
                                for (var i = 0; i < objects.length; i++) {
                                    if (objects[i] != null) {
                                        var notifier = this._obj2Listener.get(objects[i].uuid());
                                        if (notifier != null && notifier.length > 0) {
                                            for (var j = 0; j < notifier.length; j++) {
                                                var ll = this._listeners.get(notifier[j]);
                                                var cb = ll.cb;
                                                if (cb != null) {
                                                    cb(objects[i]);
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            return ListenerManager;
                        })();
                        impl.ListenerManager = ListenerManager;
                    })(impl = manager.impl || (manager.impl = {}));
                })(manager = memory.manager || (memory.manager = {}));
                var resolver;
                (function (resolver) {
                    var impl;
                    (function (impl) {
                        var DistortedTimeResolver = (function () {
                            function DistortedTimeResolver(p_cache, p_manager) {
                                this._spaceManager = p_cache;
                                this._manager = p_manager;
                                this._spaceManager.setResolver(this);
                            }
                            DistortedTimeResolver.prototype.lookup = function (universe, time, uuid, callback) {
                                var selfPointer = this;
                                return { run: function () {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid, function (theObjectUniverseOrderElement) {
                                                    if (theObjectUniverseOrderElement == null) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(null);
                                                    }
                                                    else {
                                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, theObjectUniverseOrderElement, time, universe);
                                                        selfPointer.getOrLoadAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, uuid, function (theObjectTimeTreeElement) {
                                                            if (theObjectTimeTreeElement == null) {
                                                                selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(null);
                                                            }
                                                            else {
                                                                var closestTime = theObjectTimeTreeElement.previousOrEqual(time);
                                                                if (closestTime == org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                    selfPointer._spaceManager.unmarkMemoryElement(theObjectTimeTreeElement);
                                                                    selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                    selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                    callback(null);
                                                                    return;
                                                                }
                                                                selfPointer.getOrLoadAndMark(closestUniverse, closestTime, uuid, function (theObjectChunk) {
                                                                    if (theObjectChunk == null) {
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theObjectTimeTreeElement);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                        callback(null);
                                                                    }
                                                                    else {
                                                                        var newProxy = selfPointer._manager.model().createProxy(universe, time, uuid, selfPointer._manager.model().metaModel().metaClass(theObjectChunk.metaClassIndex()), closestUniverse, closestTime);
                                                                        selfPointer._spaceManager.register(newProxy);
                                                                        callback(newProxy);
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    } };
                            };
                            DistortedTimeResolver.prototype.lookupAllObjects = function (universe, time, uuids, callback) {
                                var selfPointer = this;
                                return { run: function () {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                var tempObjectUniverseKeys = new Float64Array(uuids.length * 3);
                                                for (var i = 0; i < uuids.length; i++) {
                                                    tempObjectUniverseKeys[i * 3] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    tempObjectUniverseKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    tempObjectUniverseKeys[i * 3 + 2] = uuids[i];
                                                }
                                                selfPointer.getOrLoadAndMarkAll(tempObjectUniverseKeys, function (objectUniverseOrderElements) {
                                                    if (objectUniverseOrderElements == null || objectUniverseOrderElements.length == 0) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(new Array());
                                                        return;
                                                    }
                                                    var tempObjectTimeTreeKeys = new Float64Array(uuids.length * 3);
                                                    for (var i = 0; i < uuids.length; i++) {
                                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, objectUniverseOrderElements[i], time, universe);
                                                        tempObjectTimeTreeKeys[i * 3] = closestUniverse;
                                                        tempObjectTimeTreeKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                        tempObjectTimeTreeKeys[i * 3 + 2] = uuids[i];
                                                    }
                                                    selfPointer.getOrLoadAndMarkAll(tempObjectTimeTreeKeys, function (objectTimeTreeElements) {
                                                        if (objectTimeTreeElements == null || objectTimeTreeElements.length == 0) {
                                                            selfPointer._spaceManager.unmarkAllMemoryElements(objectUniverseOrderElements);
                                                            selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                            callback(new Array());
                                                            return;
                                                        }
                                                        var tempObjectChunkKeys = new Float64Array(uuids.length * 3);
                                                        for (var i = 0; i < uuids.length; i++) {
                                                            var closestTime = objectTimeTreeElements[i].previousOrEqual(time);
                                                            if (closestTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                tempObjectChunkKeys[i * 3] = tempObjectTimeTreeKeys[i * 3];
                                                                tempObjectChunkKeys[i * 3 + 1] = closestTime;
                                                                tempObjectChunkKeys[i * 3 + 2] = uuids[i];
                                                            }
                                                            else {
                                                                System.arraycopy(org.kevoree.modeling.KContentKey.NULL_KEY, 0, tempObjectChunkKeys, (i * 3), 3);
                                                            }
                                                        }
                                                        selfPointer.getOrLoadAndMarkAll(tempObjectChunkKeys, function (theObjectChunks) {
                                                            if (theObjectChunks == null || theObjectChunks.length == 0) {
                                                                selfPointer._spaceManager.unmarkAllMemoryElements(objectTimeTreeElements);
                                                                selfPointer._spaceManager.unmarkAllMemoryElements(objectUniverseOrderElements);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(new Array());
                                                            }
                                                            else {
                                                                var finalResult = new Array();
                                                                for (var h = 0; h < theObjectChunks.length; h++) {
                                                                    if (theObjectChunks[h] != null) {
                                                                        finalResult[h] = selfPointer._manager.model().createProxy(universe, time, uuids[h], selfPointer._manager.model().metaModel().metaClass(theObjectChunks[h].metaClassIndex()), tempObjectTimeTreeKeys[h * 3], tempObjectChunkKeys[h * 3 + 1]);
                                                                    }
                                                                    else {
                                                                        finalResult[h] = null;
                                                                    }
                                                                }
                                                                selfPointer._spaceManager.registerAll(finalResult);
                                                                callback(finalResult);
                                                            }
                                                        });
                                                    });
                                                });
                                            }
                                        });
                                    } };
                            };
                            DistortedTimeResolver.prototype.lookupPreciseKeys = function (keys, callback) {
                                var selfPointer = this;
                                return { run: function () {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                var allOrderedKeys = new Float64Array(keys.length * 3);
                                                var insertIndex = 0;
                                                var nbKeys = keys.length / 3;
                                                for (var i = 0; i < nbKeys; i++) {
                                                    allOrderedKeys[insertIndex] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 2];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 2];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 1];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 2];
                                                    insertIndex++;
                                                }
                                                selfPointer.getOrLoadAndMarkAll(allOrderedKeys, function (kChunks) {
                                                    if (kChunks == null || kChunks.length == 0) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(new Array());
                                                        return;
                                                    }
                                                    else {
                                                        var finalResult = new Array();
                                                        var insertIndex = 0;
                                                        var previousClassIndex = -1;
                                                        for (var h = 0; h < kChunks.length; h++) {
                                                            if (kChunks[h] != null && kChunks[h].type() == org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK) {
                                                                finalResult[insertIndex] = selfPointer._manager.model().createProxy(kChunks[h].universe(), kChunks[h].time(), kChunks[h].obj(), selfPointer._manager.model().metaModel().metaClass(previousClassIndex), kChunks[h].universe(), kChunks[h].time());
                                                                insertIndex++;
                                                            }
                                                            else {
                                                                if (kChunks[h] != null && kChunks[h].type() == org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP) {
                                                                    var casted = kChunks[h];
                                                                    previousClassIndex = casted.metaClassIndex();
                                                                }
                                                            }
                                                        }
                                                        selfPointer._spaceManager.registerAll(finalResult);
                                                        callback(finalResult);
                                                    }
                                                });
                                            }
                                        });
                                    } };
                            };
                            DistortedTimeResolver.prototype.lookupAllTimes = function (universe, times, uuid, callback) {
                                var selfPointer = this;
                                return { run: function () {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid, function (theObjectUniverseOrderElement) {
                                                    if (theObjectUniverseOrderElement == null) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(null);
                                                    }
                                                    else {
                                                        var closestUniverses = new Float64Array(times.length);
                                                        var closestUnikUniverse = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                                        var nbUniverseToload = 0;
                                                        for (var i = 0; i < times.length; i++) {
                                                            closestUniverses[i] = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, theObjectUniverseOrderElement, times[i], universe);
                                                            if (!closestUnikUniverse.contains(closestUniverses[i])) {
                                                                closestUnikUniverse.put(closestUniverses[i], nbUniverseToload);
                                                                nbUniverseToload++;
                                                            }
                                                        }
                                                        var toLoadUniverseKeys = new Float64Array(nbUniverseToload * 3);
                                                        closestUnikUniverse.each(function (key, value) {
                                                            var currentIndex = (value * 3);
                                                            toLoadUniverseKeys[currentIndex] = value;
                                                            toLoadUniverseKeys[currentIndex + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                            toLoadUniverseKeys[currentIndex + 2] = uuid;
                                                        });
                                                        selfPointer.getOrLoadAndMarkAll(toLoadUniverseKeys, function (objectTimeTreeElements) {
                                                            if (objectTimeTreeElements == null || objectTimeTreeElements.length == 0) {
                                                                selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(null);
                                                            }
                                                            else {
                                                                var closestTimes = new Float64Array(times.length);
                                                                var closestUnikTimes = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                                                var reverseTimeUniverse = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                                                var nbTimesToload = 0;
                                                                for (var i = 0; i < times.length; i++) {
                                                                    var alignedIndexOfUniverse = closestUnikUniverse.get(closestUniverses[i]);
                                                                    closestTimes[i] = objectTimeTreeElements[alignedIndexOfUniverse].previousOrEqual(times[i]);
                                                                    if (!closestUnikTimes.contains(closestTimes[i])) {
                                                                        closestUnikTimes.put(closestTimes[i], nbTimesToload);
                                                                        reverseTimeUniverse.put(closestTimes[i], closestUniverses[i]);
                                                                        nbTimesToload++;
                                                                    }
                                                                }
                                                                var toLoadTimesKeys = new Float64Array(nbTimesToload * 3);
                                                                closestUnikTimes.each(function (key, value) {
                                                                    var currentIndex = (value * 3);
                                                                    toLoadTimesKeys[currentIndex] = reverseTimeUniverse.get(key);
                                                                    toLoadTimesKeys[currentIndex + 1] = key;
                                                                    toLoadTimesKeys[currentIndex + 2] = uuid;
                                                                });
                                                                selfPointer.getOrLoadAndMarkAll(toLoadTimesKeys, function (objectChunks) {
                                                                    if (objectChunks == null || objectChunks.length == 0) {
                                                                        selfPointer._spaceManager.unmarkAllMemoryElements(objectTimeTreeElements);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                        callback(null);
                                                                    }
                                                                    else {
                                                                        var result = new Array();
                                                                        for (var i = 0; i < times.length; i++) {
                                                                            var resolvedUniverse = closestUniverses[i];
                                                                            var resolvedTime = closestTimes[i];
                                                                            var indexChunks = closestUnikTimes.get(closestTimes[i]);
                                                                            if (indexChunks != -1 && resolvedUniverse != org.kevoree.modeling.KConfig.NULL_LONG && resolvedTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                                result[i] = selfPointer._manager.model().createProxy(universe, times[i], uuid, selfPointer._manager.model().metaModel().metaClass(objectChunks[indexChunks].metaClassIndex()), resolvedUniverse, resolvedTime);
                                                                            }
                                                                            else {
                                                                                result[i] = null;
                                                                            }
                                                                        }
                                                                        selfPointer._spaceManager.registerAll(result);
                                                                        callback(result);
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    } };
                            };
                            DistortedTimeResolver.prototype.preciseChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                return this.internal_chunk(universe, time, uuid, false, metaClass, previousResolution);
                            };
                            DistortedTimeResolver.prototype.closestChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                return this.internal_chunk(universe, time, uuid, true, metaClass, previousResolution);
                            };
                            DistortedTimeResolver.prototype.internal_chunk = function (universe, requestedTime, uuid, useClosest, metaClass, previousResolution) {
                                var time = requestedTime;
                                if (metaClass.temporalResolution() != 1) {
                                    time = time - (time % metaClass.temporalResolution());
                                }
                                var currentEntry = this._spaceManager.getAndMark(universe, time, uuid);
                                if (currentEntry != null) {
                                    var previous;
                                    var current;
                                    var diff = false;
                                    do {
                                        previous = previousResolution.get();
                                        if (previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX] != universe || previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX] != time) {
                                            current = new Float64Array([universe, time]);
                                            diff = true;
                                        }
                                        else {
                                            current = previous;
                                        }
                                    } while (!previousResolution.compareAndSet(previous, current));
                                    if (diff) {
                                        this._spaceManager.unmark(previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX], previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX], uuid);
                                    }
                                    else {
                                        this._spaceManager.unmarkMemoryElement(currentEntry);
                                    }
                                    return currentEntry;
                                }
                                var objectUniverseTree = this._spaceManager.getAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid);
                                if (objectUniverseTree == null) {
                                    return null;
                                }
                                var globalUniverseTree = this._spaceManager.getAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                                if (globalUniverseTree == null) {
                                    this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                    return null;
                                }
                                var resolvedUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(globalUniverseTree, objectUniverseTree, time, universe);
                                var timeTree = this._spaceManager.getAndMark(resolvedUniverse, org.kevoree.modeling.KConfig.NULL_LONG, uuid);
                                if (timeTree == null) {
                                    this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                    this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                    return null;
                                }
                                var resolvedTime = timeTree.previousOrEqual(time);
                                if (resolvedTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                    var needTimeCopy = !useClosest && (resolvedTime != time);
                                    var needUniverseCopy = !useClosest && (resolvedUniverse != universe);
                                    currentEntry = this._spaceManager.getAndMark(resolvedUniverse, resolvedTime, uuid);
                                    if (currentEntry == null) {
                                        System.err.println("Desphasing marking not done yet !!!!");
                                        this._spaceManager.unmarkMemoryElement(timeTree);
                                        this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                        this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                        return null;
                                    }
                                    if (!needTimeCopy && !needUniverseCopy) {
                                        var previous;
                                        var current;
                                        var diff = false;
                                        do {
                                            previous = previousResolution.get();
                                            if (previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX] != resolvedUniverse || previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX] != resolvedTime) {
                                                current = new Float64Array([resolvedUniverse, resolvedTime]);
                                                diff = true;
                                            }
                                            else {
                                                current = previous;
                                            }
                                        } while (!previousResolution.compareAndSet(previous, current));
                                        if (diff) {
                                            this._spaceManager.unmark(previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX], previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX], uuid);
                                        }
                                        else {
                                            this._spaceManager.unmarkMemoryElement(currentEntry);
                                        }
                                        this._spaceManager.unmarkMemoryElement(timeTree);
                                        this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                        this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                        return currentEntry;
                                    }
                                    else {
                                        var previous;
                                        var current;
                                        var diff = false;
                                        do {
                                            previous = previousResolution.get();
                                            if (previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX] != universe || previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX] != time) {
                                                current = new Float64Array([universe, time]);
                                                diff = true;
                                            }
                                            else {
                                                current = previous;
                                            }
                                        } while (!previousResolution.compareAndSet(previous, current));
                                        if (diff) {
                                            var clonedChunk = this._spaceManager.cloneMarkAndUnmark(currentEntry, universe, time, uuid, this._manager.model().metaModel());
                                            if (!needUniverseCopy) {
                                                timeTree.insert(time);
                                            }
                                            else {
                                                var newTemporalTree = this._spaceManager.createAndMark(universe, org.kevoree.modeling.KConfig.NULL_LONG, uuid, org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE);
                                                newTemporalTree.insert(time);
                                                this._spaceManager.unmarkMemoryElement(timeTree);
                                                objectUniverseTree.put(universe, time);
                                            }
                                            this._spaceManager.unmarkMemoryElement(currentEntry);
                                            this._spaceManager.unmarkMemoryElement(timeTree);
                                            this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                            this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                            return clonedChunk;
                                        }
                                        else {
                                            System.err.println("Desphasing marking not done yet !!!!");
                                            this._spaceManager.unmarkMemoryElement(currentEntry);
                                            this._spaceManager.unmarkMemoryElement(timeTree);
                                            this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                            this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                            return null;
                                        }
                                    }
                                }
                                else {
                                    this._spaceManager.unmarkMemoryElement(timeTree);
                                    this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                    this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                    return null;
                                }
                            };
                            DistortedTimeResolver.prototype.indexObject = function (obj) {
                                var metaClassIndex = obj.metaClass().index();
                                var cacheEntry = this._spaceManager.createAndMark(obj.universe(), obj.now(), obj.uuid(), org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK);
                                cacheEntry.init(null, this._manager.model().metaModel(), metaClassIndex);
                                cacheEntry.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                cacheEntry.space().declareDirty(cacheEntry);
                                var timeTree = this._spaceManager.createAndMark(obj.universe(), org.kevoree.modeling.KConfig.NULL_LONG, obj.uuid(), org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE);
                                timeTree.init(null, this._manager.model().metaModel(), metaClassIndex);
                                timeTree.insert(obj.now());
                                var universeTree = this._spaceManager.createAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, obj.uuid(), org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP);
                                universeTree.init(null, this._manager.model().metaModel(), metaClassIndex);
                                universeTree.put(obj.universe(), obj.now());
                                this._spaceManager.register(obj);
                            };
                            DistortedTimeResolver.prototype.typeFromKey = function (universe, time, uuid) {
                                var isUniverseNotNull = universe != org.kevoree.modeling.KConfig.NULL_LONG;
                                var result;
                                if (org.kevoree.modeling.KConfig.END_OF_TIME == uuid) {
                                    if (isUniverseNotNull) {
                                        result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE;
                                    }
                                    else {
                                        result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP;
                                    }
                                }
                                else {
                                    var isTimeNotNull = time != org.kevoree.modeling.KConfig.NULL_LONG;
                                    var isObjNotNull = uuid != org.kevoree.modeling.KConfig.NULL_LONG;
                                    if (isUniverseNotNull && isTimeNotNull && isObjNotNull) {
                                        result = org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK;
                                    }
                                    else {
                                        if (isUniverseNotNull && !isTimeNotNull && isObjNotNull) {
                                            result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE;
                                        }
                                        else {
                                            result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP;
                                        }
                                    }
                                }
                                return result;
                            };
                            DistortedTimeResolver.prototype.getOrLoadAndMark = function (universe, time, uuid, callback) {
                                if (universe == org.kevoree.modeling.KContentKey.NULL_KEY[0] && time == org.kevoree.modeling.KContentKey.NULL_KEY[1] && uuid == org.kevoree.modeling.KContentKey.NULL_KEY[2]) {
                                    callback(null);
                                    return;
                                }
                                var cached = this._spaceManager.getAndMark(universe, time, uuid);
                                if (cached != null) {
                                    callback(cached);
                                }
                                else {
                                    this.load(new Float64Array([universe, time, uuid]), function (loadedElements) {
                                        callback(loadedElements[0]);
                                    });
                                }
                            };
                            DistortedTimeResolver.prototype.getOrLoadAndMarkAll = function (keys, callback) {
                                var nbKeys = keys.length / DistortedTimeResolver.KEYS_SIZE;
                                var toLoadIndexes = new Array();
                                var nbElem = 0;
                                var result = new Array();
                                for (var i = 0; i < nbKeys; i++) {
                                    if (keys[i * DistortedTimeResolver.KEYS_SIZE] == org.kevoree.modeling.KContentKey.NULL_KEY[0] && keys[i * DistortedTimeResolver.KEYS_SIZE + 1] == org.kevoree.modeling.KContentKey.NULL_KEY[1] && keys[i * DistortedTimeResolver.KEYS_SIZE + 2] == org.kevoree.modeling.KContentKey.NULL_KEY[2]) {
                                        toLoadIndexes[i] = false;
                                        result[i] = null;
                                    }
                                    else {
                                        result[i] = this._spaceManager.getAndMark(keys[i * DistortedTimeResolver.KEYS_SIZE], keys[i * DistortedTimeResolver.KEYS_SIZE + 1], keys[i * DistortedTimeResolver.KEYS_SIZE + 2]);
                                        if (result[i] == null) {
                                            toLoadIndexes[i] = true;
                                            nbElem++;
                                        }
                                        else {
                                            toLoadIndexes[i] = false;
                                        }
                                    }
                                }
                                if (nbElem == 0) {
                                    callback(result);
                                }
                                else {
                                    var keysToLoad = new Float64Array(nbElem * 3);
                                    var lastInsertedIndex = 0;
                                    for (var i = 0; i < nbKeys; i++) {
                                        if (toLoadIndexes[i]) {
                                            keysToLoad[lastInsertedIndex] = keys[i * DistortedTimeResolver.KEYS_SIZE];
                                            lastInsertedIndex++;
                                            keysToLoad[lastInsertedIndex] = keys[i * DistortedTimeResolver.KEYS_SIZE + 1];
                                            lastInsertedIndex++;
                                            keysToLoad[lastInsertedIndex] = keys[i * DistortedTimeResolver.KEYS_SIZE + 2];
                                            lastInsertedIndex++;
                                        }
                                    }
                                    this.load(keysToLoad, function (loadedElements) {
                                        var currentIndexToMerge = 0;
                                        for (var i = 0; i < nbKeys; i++) {
                                            if (toLoadIndexes[i]) {
                                                result[i] = loadedElements[currentIndexToMerge];
                                                currentIndexToMerge++;
                                            }
                                        }
                                        callback(result);
                                    });
                                }
                            };
                            DistortedTimeResolver.prototype.getRoot = function (universe, time, callback) {
                                var _this = this;
                                var rootFixedKey = org.kevoree.modeling.KConfig.END_OF_TIME;
                                this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                    if (theGlobalUniverseOrderElement == null) {
                                        callback(null);
                                        return;
                                    }
                                    _this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, rootFixedKey, function (rootGlobalUniverseOrderElement) {
                                        if (rootGlobalUniverseOrderElement == null) {
                                            _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                            callback(null);
                                            return;
                                        }
                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, rootGlobalUniverseOrderElement, time, universe);
                                        _this.getOrLoadAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, rootFixedKey, function (theRootTimeTree) {
                                            var resolvedCurrentRootUUID = theRootTimeTree.previousOrEqualValue(time);
                                            _this._spaceManager.unmarkMemoryElement(theRootTimeTree);
                                            _this._spaceManager.unmarkMemoryElement(rootGlobalUniverseOrderElement);
                                            _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                            if (resolvedCurrentRootUUID == org.kevoree.modeling.KConfig.NULL_LONG) {
                                                callback(null);
                                            }
                                            else {
                                                _this._manager.lookup(universe, time, resolvedCurrentRootUUID, callback);
                                            }
                                        });
                                    });
                                });
                            };
                            DistortedTimeResolver.prototype.setRoot = function (newRoot, callback) {
                                var _this = this;
                                var rootFixedKey = org.kevoree.modeling.KConfig.END_OF_TIME;
                                this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                    if (theGlobalUniverseOrderElement == null) {
                                        callback(null);
                                        return;
                                    }
                                    _this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, rootFixedKey, function (rootGlobalUniverseOrderElement) {
                                        var rootGlobalUniverseOrder = rootGlobalUniverseOrderElement;
                                        if (rootGlobalUniverseOrderElement == null) {
                                            rootGlobalUniverseOrder = _this._spaceManager.createAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP);
                                        }
                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, rootGlobalUniverseOrderElement, newRoot.now(), newRoot.universe());
                                        rootGlobalUniverseOrder.put(newRoot.universe(), newRoot.now());
                                        if (closestUniverse != newRoot.universe()) {
                                            var newTimeTree = _this._spaceManager.createAndMark(newRoot.universe(), org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE);
                                            newTimeTree.insert(newRoot.now(), newRoot.uuid());
                                            _this._spaceManager.unmarkMemoryElement(newTimeTree);
                                            _this._spaceManager.unmarkMemoryElement(rootGlobalUniverseOrderElement);
                                            _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                            if (callback != null) {
                                                callback(null);
                                            }
                                        }
                                        else {
                                            _this.getOrLoadAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, function (resolvedRootTimeTree) {
                                                var initializedTree = resolvedRootTimeTree;
                                                if (initializedTree == null) {
                                                    initializedTree = _this._spaceManager.createAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE);
                                                }
                                                initializedTree.insert(newRoot.now(), newRoot.uuid());
                                                _this._spaceManager.unmarkMemoryElement(resolvedRootTimeTree);
                                                _this._spaceManager.unmarkMemoryElement(rootGlobalUniverseOrderElement);
                                                _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                if (callback != null) {
                                                    callback(null);
                                                }
                                            });
                                        }
                                    });
                                });
                            };
                            DistortedTimeResolver.prototype.resolveTimes = function (currentUniverse, currentUuid, startTime, endTime, callback) {
                                var _this = this;
                                var keys = new Float64Array([org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, currentUuid]);
                                this.getOrLoadAndMarkAll(keys, function (kMemoryChunks) {
                                    if (kMemoryChunks == null || kMemoryChunks.length == 0) {
                                        callback(new Float64Array(0));
                                        return;
                                    }
                                    var collectedUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.universeSelectByRange(kMemoryChunks[0], kMemoryChunks[1], startTime, endTime, currentUniverse);
                                    var nbKeys = collectedUniverse.length * 3;
                                    var timeTreeKeys = new Float64Array(nbKeys);
                                    for (var i = 0; i < collectedUniverse.length; i++) {
                                        timeTreeKeys[i * 3] = collectedUniverse[i];
                                        timeTreeKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                        timeTreeKeys[i * 3 + 2] = currentUuid;
                                    }
                                    var objUniverse = kMemoryChunks[1];
                                    _this.getOrLoadAndMarkAll(timeTreeKeys, function (timeTrees) {
                                        if (timeTrees == null || timeTrees.length == 0) {
                                            _this._spaceManager.unmarkAllMemoryElements(kMemoryChunks);
                                            callback(new Float64Array(0));
                                            return;
                                        }
                                        var collector = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                        var previousDivergenceTime = endTime;
                                        for (var i = 0; i < collectedUniverse.length; i++) {
                                            var timeTree = timeTrees[i];
                                            if (timeTree != null) {
                                                var currentDivergenceTime = objUniverse.get(collectedUniverse[i]);
                                                var finalPreviousDivergenceTime = previousDivergenceTime;
                                                timeTree.range(currentDivergenceTime, previousDivergenceTime, function (t) {
                                                    if (collector.size() == 0) {
                                                        collector.put(collector.size(), t);
                                                    }
                                                    else {
                                                        if (t != finalPreviousDivergenceTime) {
                                                            collector.put(collector.size(), t);
                                                        }
                                                    }
                                                });
                                                previousDivergenceTime = currentDivergenceTime;
                                            }
                                        }
                                        var orderedTime = new Float64Array(collector.size());
                                        for (var i = 0; i < collector.size(); i++) {
                                            orderedTime[i] = collector.get(i);
                                        }
                                        _this._spaceManager.unmarkAllMemoryElements(timeTrees);
                                        _this._spaceManager.unmarkAllMemoryElements(kMemoryChunks);
                                        callback(orderedTime);
                                    });
                                });
                            };
                            DistortedTimeResolver.resolve_universe = function (globalTree, objUniverseTree, timeToResolve, originUniverseId) {
                                if (globalTree == null || objUniverseTree == null) {
                                    return originUniverseId;
                                }
                                var currentUniverse = originUniverseId;
                                var previousUniverse = org.kevoree.modeling.KConfig.NULL_LONG;
                                var divergenceTime = objUniverseTree.get(currentUniverse);
                                while (currentUniverse != previousUniverse) {
                                    if (divergenceTime != org.kevoree.modeling.KConfig.NULL_LONG && divergenceTime <= timeToResolve) {
                                        return currentUniverse;
                                    }
                                    previousUniverse = currentUniverse;
                                    currentUniverse = globalTree.get(currentUniverse);
                                    divergenceTime = objUniverseTree.get(currentUniverse);
                                }
                                return originUniverseId;
                            };
                            DistortedTimeResolver.universeSelectByRange = function (globalTree, objUniverseTree, rangeMin, rangeMax, originUniverseId) {
                                var collected = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                var currentUniverse = originUniverseId;
                                var previousUniverse = org.kevoree.modeling.KConfig.NULL_LONG;
                                var divergenceTime = objUniverseTree.get(currentUniverse);
                                while (currentUniverse != previousUniverse) {
                                    if (divergenceTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                        if (divergenceTime <= rangeMin) {
                                            collected.put(collected.size(), currentUniverse);
                                            break;
                                        }
                                        else {
                                            if (divergenceTime <= rangeMax) {
                                                collected.put(collected.size(), currentUniverse);
                                            }
                                        }
                                    }
                                    previousUniverse = currentUniverse;
                                    currentUniverse = globalTree.get(currentUniverse);
                                    divergenceTime = objUniverseTree.get(currentUniverse);
                                }
                                var trimmed = new Float64Array(collected.size());
                                for (var i = 0; i < collected.size(); i++) {
                                    trimmed[i] = collected.get(i);
                                }
                                return trimmed;
                            };
                            DistortedTimeResolver.prototype.load = function (keys, callback) {
                                var _this = this;
                                this._manager.cdn().get(keys, function (payloads) {
                                    var results = new Array();
                                    for (var i = 0; i < payloads.length; i++) {
                                        var loopUniverse = keys[i * 3];
                                        var loopTime = keys[i * 3 + 1];
                                        var loopUuid = keys[i * 3 + 2];
                                        results[i] = _this._spaceManager.createAndMark(loopUniverse, loopTime, loopUuid, _this.typeFromKey(loopUniverse, loopTime, loopUuid));
                                        var classIndex = -1;
                                        if (loopUniverse != org.kevoree.modeling.KConfig.NULL_LONG && loopTime != org.kevoree.modeling.KConfig.NULL_LONG && loopUuid != org.kevoree.modeling.KConfig.NULL_LONG) {
                                            var alreadyLoadedOrder = _this._spaceManager.getAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, loopUuid);
                                            if (alreadyLoadedOrder != null) {
                                                classIndex = alreadyLoadedOrder.metaClassIndex();
                                                _this._spaceManager.unmarkMemoryElement(alreadyLoadedOrder);
                                            }
                                        }
                                        results[i].init(payloads[i], _this._manager.model().metaModel(), classIndex);
                                    }
                                    callback(results);
                                });
                            };
                            DistortedTimeResolver.prototype.getRelatedKeys = function (uuid, previousResolution) {
                                return new Float64Array([previousResolution[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX], previousResolution[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX], uuid, previousResolution[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX], org.kevoree.modeling.KConfig.NULL_LONG, uuid, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]);
                            };
                            DistortedTimeResolver.KEYS_SIZE = 3;
                            return DistortedTimeResolver;
                        })();
                        impl.DistortedTimeResolver = DistortedTimeResolver;
                    })(impl = resolver.impl || (resolver.impl = {}));
                })(resolver = memory.resolver || (memory.resolver = {}));
                var space;
                (function (space) {
                    var KChunkTypes = (function () {
                        function KChunkTypes() {
                        }
                        KChunkTypes.OBJECT_CHUNK = 0;
                        KChunkTypes.LONG_TREE = 1;
                        KChunkTypes.LONG_LONG_TREE = 2;
                        KChunkTypes.LONG_LONG_MAP = 3;
                        return KChunkTypes;
                    })();
                    space.KChunkTypes = KChunkTypes;
                    var impl;
                    (function (impl) {
                        var AbstractCountingChunkSpaceManager = (function () {
                            function AbstractCountingChunkSpaceManager(p_storage) {
                                this._space = p_storage;
                            }
                            AbstractCountingChunkSpaceManager.prototype.getAndMark = function (universe, time, obj) {
                                var resolvedElement = this._space.get(universe, time, obj);
                                if (resolvedElement != null && (resolvedElement.getFlags() & org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT) != org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT) {
                                    resolvedElement.inc();
                                }
                                return resolvedElement;
                            };
                            AbstractCountingChunkSpaceManager.prototype.unmark = function (universe, time, obj) {
                                var resolvedElement = this._space.get(universe, time, obj);
                                if (resolvedElement != null) {
                                    var newCount = resolvedElement.dec();
                                    if (newCount == 0 && (resolvedElement.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        resolvedElement.setFlags(org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT, 0);
                                        this._space.remove(resolvedElement.universe(), resolvedElement.time(), resolvedElement.obj(), this._metaModel);
                                    }
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.createAndMark = function (universe, time, obj, type) {
                                var newCreatedElement = this._space.create(universe, time, obj, type);
                                if (newCreatedElement != null) {
                                    newCreatedElement.inc();
                                }
                                return newCreatedElement;
                            };
                            AbstractCountingChunkSpaceManager.prototype.unmarkMemoryElement = function (element) {
                                var newCount = element.dec();
                                if (newCount == 0 && (element.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                    element.setFlags(org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT, 0);
                                    this._space.remove(element.universe(), element.time(), element.obj(), this._metaModel);
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.unmarkAllMemoryElements = function (elements) {
                                for (var i = 0; i < elements.length; i++) {
                                    var loopChunk = elements[i];
                                    var newCount = elements[i].dec();
                                    if (newCount == 0 && (loopChunk.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        loopChunk.setFlags(org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT, 0);
                                        this._space.remove(loopChunk.universe(), loopChunk.time(), loopChunk.obj(), this._metaModel);
                                    }
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.cloneMarkAndUnmark = function (previous, newUniverse, newTime, obj, metaModel) {
                                var newCreatedElement = this._space.clone(previous, newUniverse, newTime, obj, metaModel);
                                newCreatedElement.inc();
                                var newCount = previous.dec();
                                if (newCount == 0 && (previous.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                    previous.setFlags(org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT, 0);
                                    this._space.remove(previous.universe(), previous.time(), previous.obj(), this._metaModel);
                                }
                                return newCreatedElement;
                            };
                            AbstractCountingChunkSpaceManager.prototype.clear = function () {
                            };
                            AbstractCountingChunkSpaceManager.prototype.register = function (object) {
                                throw "Abstract method";
                            };
                            AbstractCountingChunkSpaceManager.prototype.registerAll = function (objects) {
                                throw "Abstract method";
                            };
                            AbstractCountingChunkSpaceManager.prototype.setResolver = function (resolver) {
                                throw "Abstract method";
                            };
                            return AbstractCountingChunkSpaceManager;
                        })();
                        impl.AbstractCountingChunkSpaceManager = AbstractCountingChunkSpaceManager;
                        var ChunkIterator = (function () {
                            function ChunkIterator(p_dirties, p_origin) {
                                this.currentIndex = 0;
                                this.maxIndex = 0;
                                this._dirties = p_dirties;
                                this._origin = p_origin;
                                this.maxIndex = p_dirties.length / 3;
                                this.tempKeys = new Float64Array(3);
                            }
                            ChunkIterator.prototype.hasNext = function () {
                                return this.currentIndex < this.maxIndex;
                            };
                            ChunkIterator.prototype.next = function () {
                                if (this.currentIndex < this.maxIndex) {
                                    this.tempKeys[0] = this._dirties[this.currentIndex * 3];
                                    this.tempKeys[1] = this._dirties[this.currentIndex * 3 + 1];
                                    this.tempKeys[2] = this._dirties[this.currentIndex * 3 + 2];
                                }
                                this.currentIndex++;
                                return this.tempKeys;
                            };
                            ChunkIterator.prototype.size = function () {
                                return this.maxIndex;
                            };
                            return ChunkIterator;
                        })();
                        impl.ChunkIterator = ChunkIterator;
                        var HeapChunkSpace = (function () {
                            function HeapChunkSpace() {
                                this._dirtyState = new java.util.concurrent.atomic.AtomicReference();
                                this._state = new java.util.concurrent.atomic.AtomicReference();
                                this._dirtyState.set(new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalDirtyState());
                                var initialCapacity = org.kevoree.modeling.KConfig.CACHE_INIT_SIZE;
                                var newstate = new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalState(initialCapacity, new Float64Array(initialCapacity * 3), new Int32Array(initialCapacity), new Int32Array(initialCapacity), new Array());
                                for (var i = 0; i < initialCapacity; i++) {
                                    newstate.elementNext[i] = -1;
                                    newstate.elementHash.set(i, -1);
                                }
                                newstate._threshold = (newstate.elementDataSize * HeapChunkSpace.LOAD_FACTOR);
                                this._state.set(newstate);
                            }
                            HeapChunkSpace.prototype.get = function (universe, time, obj) {
                                var internalState = this._state.get();
                                if (internalState.elementDataSize == 0) {
                                    return null;
                                }
                                var index = ((universe ^ time ^ obj) & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = internalState.elementHash.get(index);
                                while (m != -1) {
                                    if (universe == internalState.elementK3[(m * 3)] && time == internalState.elementK3[((m * 3) + 1)] && obj == internalState.elementK3[((m * 3) + 2)]) {
                                        return internalState.values[m];
                                    }
                                    else {
                                        m = internalState.elementNext[m];
                                    }
                                }
                                return null;
                            };
                            HeapChunkSpace.prototype.create = function (universe, time, obj, type) {
                                var newElement = this.internal_createElement(universe, time, obj, type);
                                return this.internal_put(universe, time, obj, newElement);
                            };
                            HeapChunkSpace.prototype.clone = function (previousElement, newUniverse, newTime, newObj, metaModel) {
                                return this.internal_put(newUniverse, newTime, newObj, previousElement.clone(newUniverse, newTime, newObj, metaModel));
                            };
                            HeapChunkSpace.prototype.internal_createElement = function (p_universe, p_time, p_obj, type) {
                                switch (type) {
                                    case org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK:
                                        return new org.kevoree.modeling.memory.chunk.impl.HeapObjectChunk(p_universe, p_time, p_obj, this);
                                    case org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP:
                                        return new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(p_universe, p_time, p_obj, this);
                                    case org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE:
                                        return new org.kevoree.modeling.memory.chunk.impl.ArrayLongTree(p_universe, p_time, p_obj, this);
                                    case org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE:
                                        return new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongTree(p_universe, p_time, p_obj, this);
                                    default:
                                        return null;
                                }
                            };
                            HeapChunkSpace.prototype.internal_put = function (universe, time, p_obj, payload) {
                                var currentState;
                                var nextState;
                                var result;
                                var nbTry = 0;
                                do {
                                    currentState = this._state.get();
                                    var entry = -1;
                                    var index = -1;
                                    var hash = (universe ^ time ^ p_obj);
                                    if (currentState.elementDataSize != 0) {
                                        index = (hash & 0x7FFFFFFF) % currentState.elementDataSize;
                                        entry = this.findNonNullKeyEntry(universe, time, p_obj, index, currentState);
                                    }
                                    if (entry == -1) {
                                        var nextValueIndex = currentState._valuesIndex.getAndIncrement();
                                        if (nextValueIndex > currentState._threshold) {
                                            return this.complex_insert(universe, time, p_obj, payload, hash, nextValueIndex);
                                        }
                                        else {
                                            nextState = currentState;
                                        }
                                        nextState.elementK3[(nextValueIndex * 3)] = universe;
                                        nextState.elementK3[((nextValueIndex * 3) + 1)] = time;
                                        nextState.elementK3[((nextValueIndex * 3) + 2)] = p_obj;
                                        nextState.values[nextValueIndex] = payload;
                                        nextState.elementNext[nextValueIndex] = nextState.elementHash.getAndSet(index, nextValueIndex);
                                        nextState._elementCount.incrementAndGet();
                                        result = payload;
                                    }
                                    else {
                                        nextState = currentState;
                                        result = nextState.values[entry];
                                    }
                                    nbTry++;
                                    if (nbTry == org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                        throw new java.lang.RuntimeException("CompareAndSwap error, failed to converge");
                                    }
                                } while (!this._state.compareAndSet(currentState, nextState));
                                return result;
                            };
                            HeapChunkSpace.prototype.complex_insert = function (universe, time, p_obj, payload, prehash, nextValueIndex) {
                                var currentState;
                                var nextState;
                                do {
                                    currentState = this._state.get();
                                    if (nextValueIndex > currentState._threshold) {
                                        nextState = this.rehashCapacity(currentState);
                                    }
                                    else {
                                        nextState = currentState;
                                    }
                                    var index = (prehash & 0x7FFFFFFF) % nextState.elementDataSize;
                                    nextState.elementK3[(nextValueIndex * 3)] = universe;
                                    nextState.elementK3[((nextValueIndex * 3) + 1)] = time;
                                    nextState.elementK3[((nextValueIndex * 3) + 2)] = p_obj;
                                    nextState.values[nextValueIndex] = payload;
                                    nextState.elementNext[nextValueIndex] = nextState.elementHash.getAndSet(index, nextValueIndex);
                                    nextState._elementCount.incrementAndGet();
                                } while (!this._state.compareAndSet(currentState, nextState));
                                return payload;
                            };
                            HeapChunkSpace.prototype.rehashCapacity = function (previousState) {
                                var length = (previousState.elementDataSize == 0 ? 1 : previousState.elementDataSize << 1);
                                var newElementKV = new Float64Array(length * 3);
                                var newValues = new Array();
                                var previousIsSparse = previousState.sparse;
                                if (!previousIsSparse) {
                                    System.arraycopy(previousState.elementK3, 0, newElementKV, 0, previousState.elementDataSize * 3);
                                    System.arraycopy(previousState.values, 0, newValues, 0, previousState.elementDataSize);
                                }
                                var newElementNext = new Int32Array(length);
                                var newElementHash = new Int32Array(length);
                                for (var i = 0; i < length; i++) {
                                    newElementNext[i] = -1;
                                    newElementHash[i] = -1;
                                }
                                var currentIndex = 0;
                                for (var i = 0; i < previousState.elementDataSize; i++) {
                                    if (previousState.values[i] != null) {
                                        var hash = (previousState.elementK3[(i * 3)] ^ previousState.elementK3[(i * 3) + 1] ^ previousState.elementK3[(i * 3) + 2]);
                                        var index = (hash & 0x7FFFFFFF) % length;
                                        newElementNext[i] = newElementHash[index];
                                        newElementHash[index] = i;
                                        if (previousIsSparse) {
                                            newValues[currentIndex] = previousState.values[i];
                                            newElementKV[(currentIndex * 3)] = previousState.elementK3[(i * 3)];
                                            newElementKV[(currentIndex * 3) + 1] = previousState.elementK3[(i * 3) + 1];
                                            newElementKV[(currentIndex * 3) + 2] = previousState.elementK3[(i * 3) + 2];
                                            currentIndex++;
                                        }
                                    }
                                }
                                var newState = new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalState(length, newElementKV, newElementNext, newElementHash, newValues);
                                newState._threshold = (length * HeapChunkSpace.LOAD_FACTOR);
                                newState._valuesIndex.set(previousState._valuesIndex.get());
                                if (previousIsSparse) {
                                    newState._elementCount.set(currentIndex);
                                    newState._valuesIndex.set(currentIndex);
                                }
                                else {
                                    newState._elementCount.set(previousState._elementCount.get());
                                    newState._valuesIndex.set(previousState._valuesIndex.get());
                                }
                                return newState;
                            };
                            HeapChunkSpace.prototype.findNonNullKeyEntry = function (universe, time, obj, index, internalState) {
                                var m = internalState.elementHash.get(index);
                                while (m >= 0) {
                                    if (universe == internalState.elementK3[m * 3] && time == internalState.elementK3[(m * 3) + 1] && obj == internalState.elementK3[(m * 3) + 2]) {
                                        return m;
                                    }
                                    m = internalState.elementNext[m];
                                }
                                return -1;
                            };
                            HeapChunkSpace.prototype.size = function () {
                                return this._state.get()._elementCount.get();
                            };
                            HeapChunkSpace.prototype.detachDirties = function () {
                                var detachedState = this._dirtyState.getAndSet(new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalDirtyState());
                                var maxIndex = detachedState._dirtyIndex.get();
                                var shrinked = new Float64Array(maxIndex * 3);
                                System.arraycopy(detachedState._dirtyList, 0, shrinked, 0, maxIndex * 3);
                                return new org.kevoree.modeling.memory.space.impl.ChunkIterator(shrinked, this);
                            };
                            HeapChunkSpace.prototype.declareDirty = function (dirtyChunk) {
                                var nbTry = 0;
                                var current;
                                do {
                                    current = this._dirtyState.get();
                                    current.declareDirty(dirtyChunk.universe(), dirtyChunk.time(), dirtyChunk.obj());
                                    nbTry++;
                                    if (nbTry == org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                        throw new java.lang.RuntimeException("CompareAndSwap error, failed to converge");
                                    }
                                } while (!this._dirtyState.compareAndSet(current, current));
                            };
                            HeapChunkSpace.prototype.remove = function (universe, time, obj, p_metaModel) {
                                var previousState;
                                var nbTry = 0;
                                do {
                                    previousState = this._state.get();
                                    var hash = (universe ^ time ^ obj);
                                    var index = (hash & 0x7FFFFFFF) % previousState.elementDataSize;
                                    if (previousState.elementDataSize == 0) {
                                        return;
                                    }
                                    var m = previousState.elementHash.get(index);
                                    var last = -1;
                                    while (m >= 0) {
                                        if (universe == previousState.elementK3[m * 3] && time == previousState.elementK3[(m * 3) + 1] && obj == previousState.elementK3[(m * 3) + 2]) {
                                            break;
                                        }
                                        last = m;
                                        m = previousState.elementNext[m];
                                    }
                                    if (m == -1) {
                                        return;
                                    }
                                    if (last == -1) {
                                        var previousNext = previousState.elementNext[m];
                                        if (!previousState.elementHash.compareAndSet(index, m, previousNext)) {
                                        }
                                    }
                                    else {
                                        previousState.elementNext[last] = previousState.elementNext[m];
                                    }
                                    previousState.elementNext[m] = -1;
                                    var previousValue = previousState.values[m];
                                    previousState.values[m] = null;
                                    previousValue.free(p_metaModel);
                                    previousState._elementCount.decrementAndGet();
                                    nbTry++;
                                    if (nbTry == org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                        throw new java.lang.RuntimeException("CompareAndSwap error, failed to converge");
                                    }
                                } while (!this._state.compareAndSet(previousState, previousState));
                            };
                            HeapChunkSpace.prototype.clear = function (metaModel) {
                                var previousState = this._state.get();
                                if (previousState._elementCount.get() > 0) {
                                    for (var i = 0; i < previousState.elementDataSize; i++) {
                                        if (previousState.values[i] != null) {
                                            previousState.values[i].free(metaModel);
                                        }
                                    }
                                    var initialCapacity = org.kevoree.modeling.KConfig.CACHE_INIT_SIZE;
                                    var newstate = new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalState(initialCapacity, new Float64Array(initialCapacity * 3), new Int32Array(initialCapacity), new Int32Array(initialCapacity), new Array());
                                    for (var i = 0; i < initialCapacity; i++) {
                                        newstate.elementNext[i] = -1;
                                        newstate.elementHash.set(i, -1);
                                    }
                                    newstate._elementCount.set(0);
                                    newstate._valuesIndex.set(0);
                                    newstate._threshold = (newstate.elementDataSize * HeapChunkSpace.LOAD_FACTOR);
                                    this._state.set(newstate);
                                }
                            };
                            HeapChunkSpace.prototype.delete = function (metaModel) {
                                var internalState = this._state.getAndSet(null);
                                for (var i = 0; i < internalState.elementDataSize; i++) {
                                    if (internalState.values[i] != null) {
                                        internalState.values[i].free(metaModel);
                                    }
                                }
                                internalState._elementCount.set(0);
                                internalState._valuesIndex.set(0);
                                internalState._threshold = 0;
                            };
                            HeapChunkSpace.prototype.printDebug = function (p_metaModel) {
                                try {
                                    var state = this._state.get();
                                    for (var i = 0; i < state.values.length; i++) {
                                        var loopChunk = state.values[i];
                                        if (loopChunk != null) {
                                            var content = loopChunk.serialize(p_metaModel);
                                            System.err.println(state.elementK3[i * 3] + "," + state.elementK3[i * 3 + 1] + "," + state.elementK3[i * 3 + 2] + "=>" + loopChunk.type() + "(count:" + loopChunk.counter() + ",flag:" + loopChunk.getFlags() + ")" + "==>" + content);
                                        }
                                    }
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                        e.printStackTrace();
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            };
                            HeapChunkSpace.LOAD_FACTOR = (75 / 100);
                            return HeapChunkSpace;
                        })();
                        impl.HeapChunkSpace = HeapChunkSpace;
                        var HeapChunkSpace;
                        (function (HeapChunkSpace) {
                            var InternalState = (function () {
                                function InternalState(p_elementDataSize, p_elementKE, p_elementNext, p_elementHash, p_values) {
                                    this.sparse = false;
                                    this.elementDataSize = p_elementDataSize;
                                    this.elementK3 = p_elementKE;
                                    this.elementNext = p_elementNext;
                                    this.elementHash = new java.util.concurrent.atomic.AtomicIntegerArray(p_elementHash);
                                    this.values = p_values;
                                    this._elementCount = new java.util.concurrent.atomic.AtomicInteger(0);
                                    this._valuesIndex = new java.util.concurrent.atomic.AtomicInteger(0);
                                }
                                return InternalState;
                            })();
                            HeapChunkSpace.InternalState = InternalState;
                            var InternalDirtyState = (function () {
                                function InternalDirtyState() {
                                    this._dirtyList = new Float64Array(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE * 3);
                                    this._dirtyIndex = new java.util.concurrent.atomic.AtomicInteger(0);
                                }
                                InternalDirtyState.prototype.declareDirty = function (universe, time, obj) {
                                    var nextIndex = this._dirtyIndex.getAndIncrement() * 3;
                                    if (nextIndex + 2 < this._dirtyList.length) {
                                        this._dirtyList[nextIndex] = universe;
                                        this._dirtyList[nextIndex + 1] = time;
                                        this._dirtyList[nextIndex + 2] = obj;
                                    }
                                    else {
                                        this.reallocate(nextIndex);
                                        this._dirtyList[nextIndex] = universe;
                                        this._dirtyList[nextIndex + 1] = time;
                                        this._dirtyList[nextIndex + 2] = obj;
                                    }
                                };
                                InternalDirtyState.prototype.reallocate = function (wantedIndex) {
                                    if (wantedIndex + 2 >= this._dirtyList.length) {
                                        var newlength = wantedIndex << 1;
                                        var previousList = this._dirtyList;
                                        this._dirtyList = new Float64Array(newlength);
                                        System.arraycopy(previousList, 0, this._dirtyList, 0, wantedIndex);
                                    }
                                };
                                return InternalDirtyState;
                            })();
                            HeapChunkSpace.InternalDirtyState = InternalDirtyState;
                        })(HeapChunkSpace = impl.HeapChunkSpace || (impl.HeapChunkSpace = {}));
                        var NoopChunkSpaceManager = (function () {
                            function NoopChunkSpaceManager(p_space) {
                                this._space = p_space;
                            }
                            NoopChunkSpaceManager.prototype.getAndMark = function (universe, time, obj) {
                                return this._space.get(universe, time, obj);
                            };
                            NoopChunkSpaceManager.prototype.unmark = function (universe, time, obj) {
                            };
                            NoopChunkSpaceManager.prototype.createAndMark = function (universe, time, obj, type) {
                                return this._space.create(universe, time, obj, type);
                            };
                            NoopChunkSpaceManager.prototype.unmarkMemoryElement = function (element) {
                            };
                            NoopChunkSpaceManager.prototype.unmarkAllMemoryElements = function (elements) {
                            };
                            NoopChunkSpaceManager.prototype.cloneMarkAndUnmark = function (previous, newUniverse, newTime, obj, metaModel) {
                                return this._space.clone(previous, newUniverse, newTime, obj, metaModel);
                            };
                            NoopChunkSpaceManager.prototype.clear = function () {
                            };
                            NoopChunkSpaceManager.prototype.register = function (object) {
                            };
                            NoopChunkSpaceManager.prototype.registerAll = function (objects) {
                            };
                            NoopChunkSpaceManager.prototype.setResolver = function (resolver) {
                            };
                            return NoopChunkSpaceManager;
                        })();
                        impl.NoopChunkSpaceManager = NoopChunkSpaceManager;
                    })(impl = space.impl || (space.impl = {}));
                })(space = memory.space || (memory.space = {}));
                var strategy;
                (function (strategy) {
                    var impl;
                    (function (impl) {
                        var HeapMemoryStrategy = (function () {
                            function HeapMemoryStrategy() {
                            }
                            HeapMemoryStrategy.prototype.newSpace = function () {
                                return new org.kevoree.modeling.memory.space.impl.HeapChunkSpace();
                            };
                            HeapMemoryStrategy.prototype.newSpaceManager = function (p_space) {
                                return new org.kevoree.modeling.memory.space.impl.NoopChunkSpaceManager(p_space);
                            };
                            return HeapMemoryStrategy;
                        })();
                        impl.HeapMemoryStrategy = HeapMemoryStrategy;
                    })(impl = strategy.impl || (strategy.impl = {}));
                })(strategy = memory.strategy || (memory.strategy = {}));
            })(memory = modeling.memory || (modeling.memory = {}));
            var message;
            (function (message) {
                var KMessageLoader = (function () {
                    function KMessageLoader() {
                    }
                    KMessageLoader.load = function (payload) {
                        if (payload == null) {
                            return null;
                        }
                        var objectReader = new org.kevoree.modeling.format.json.JsonObjectReader();
                        objectReader.parseObject(payload);
                        try {
                            var parsedType = java.lang.Integer.parseInt(objectReader.get(KMessageLoader.TYPE_NAME).toString());
                            if (parsedType == KMessageLoader.EVENTS_TYPE) {
                                var eventsMessage = null;
                                if (objectReader.get(KMessageLoader.KEYS_NAME) != null) {
                                    var objIdsRaw = objectReader.getAsStringArray(KMessageLoader.KEYS_NAME);
                                    var keys = new Float64Array(objIdsRaw.length);
                                    for (var i = 0; i < objIdsRaw.length; i++) {
                                        try {
                                            keys[i] = org.kevoree.modeling.util.maths.Base64.decodeToLong(objIdsRaw[i]);
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    eventsMessage = new org.kevoree.modeling.message.impl.Events(keys);
                                }
                                return eventsMessage;
                            }
                            else {
                                if (parsedType == KMessageLoader.GET_REQ_TYPE) {
                                    var getKeysRequest = new org.kevoree.modeling.message.impl.GetRequest();
                                    if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                        getKeysRequest.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                    }
                                    if (objectReader.get(KMessageLoader.KEYS_NAME) != null) {
                                        var metaInt = objectReader.getAsStringArray(KMessageLoader.KEYS_NAME);
                                        var keys = new Float64Array(metaInt.length);
                                        for (var i = 0; i < metaInt.length; i++) {
                                            keys[i] = org.kevoree.modeling.util.maths.Base64.decodeToLong(metaInt[i]);
                                        }
                                        getKeysRequest.keys = keys;
                                    }
                                    return getKeysRequest;
                                }
                                else {
                                    if (parsedType == KMessageLoader.GET_RES_TYPE) {
                                        var getResult = new org.kevoree.modeling.message.impl.GetResult();
                                        if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                            getResult.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                        }
                                        if (objectReader.get(KMessageLoader.VALUES_NAME) != null) {
                                            var metaInt = objectReader.getAsStringArray(KMessageLoader.VALUES_NAME);
                                            var values = new Array();
                                            for (var i = 0; i < metaInt.length; i++) {
                                                values[i] = org.kevoree.modeling.format.json.JsonString.unescape(metaInt[i]);
                                            }
                                            getResult.values = values;
                                        }
                                        return getResult;
                                    }
                                    else {
                                        if (parsedType == KMessageLoader.PUT_REQ_TYPE) {
                                            var putRequest = new org.kevoree.modeling.message.impl.PutRequest();
                                            if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                                putRequest.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                            }
                                            var toFlatKeys = null;
                                            var toFlatValues = null;
                                            if (objectReader.get(KMessageLoader.KEYS_NAME) != null) {
                                                toFlatKeys = objectReader.getAsStringArray(KMessageLoader.KEYS_NAME);
                                            }
                                            if (objectReader.get(KMessageLoader.VALUES_NAME) != null) {
                                                toFlatValues = objectReader.getAsStringArray(KMessageLoader.VALUES_NAME);
                                            }
                                            if (toFlatKeys != null && toFlatValues != null) {
                                                putRequest.keys = new Float64Array(toFlatKeys.length);
                                                putRequest.values = new Array();
                                                for (var i = 0; i < toFlatKeys.length; i++) {
                                                    putRequest.keys[i] = org.kevoree.modeling.util.maths.Base64.decodeToLong(toFlatKeys[i]);
                                                }
                                                for (var i = 0; i < toFlatValues.length; i++) {
                                                    putRequest.values[i] = org.kevoree.modeling.format.json.JsonString.unescape(toFlatValues[i]);
                                                }
                                            }
                                            return putRequest;
                                        }
                                        else {
                                            if (parsedType == KMessageLoader.PUT_RES_TYPE) {
                                                var putResult = new org.kevoree.modeling.message.impl.PutResult();
                                                if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                                    putResult.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                                }
                                                return putResult;
                                            }
                                            else {
                                                if (parsedType == KMessageLoader.OPERATION_CALL_TYPE) {
                                                    return null;
                                                }
                                                else {
                                                    if (parsedType == KMessageLoader.OPERATION_RESULT_TYPE) {
                                                        var resultMessage = new org.kevoree.modeling.message.impl.OperationResultMessage();
                                                        if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                                            resultMessage.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                                        }
                                                        if (objectReader.get(KMessageLoader.KEY_NAME) != null) {
                                                            resultMessage.key = org.kevoree.modeling.KContentKey.create(objectReader.get(KMessageLoader.KEY_NAME).toString());
                                                        }
                                                        if (objectReader.get(KMessageLoader.VALUE_NAME) != null) {
                                                            resultMessage.value = objectReader.get(KMessageLoader.VALUE_NAME).toString();
                                                        }
                                                        return resultMessage;
                                                    }
                                                    else {
                                                        if (parsedType == KMessageLoader.ATOMIC_GET_INC_REQUEST_TYPE) {
                                                            var atomicGetMessage = new org.kevoree.modeling.message.impl.AtomicGetIncrementRequest();
                                                            if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                                                atomicGetMessage.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                                            }
                                                            if (objectReader.get(KMessageLoader.KEYS_NAME) != null) {
                                                                var metaInt = objectReader.getAsStringArray(KMessageLoader.KEYS_NAME);
                                                                var keys = new Float64Array(metaInt.length);
                                                                for (var i = 0; i < metaInt.length; i++) {
                                                                    keys[i] = org.kevoree.modeling.util.maths.Base64.decodeToLong(metaInt[i]);
                                                                }
                                                                atomicGetMessage.keys = keys;
                                                            }
                                                            return atomicGetMessage;
                                                        }
                                                        else {
                                                            if (parsedType == KMessageLoader.ATOMIC_GET_INC_RESULT_TYPE) {
                                                                var atomicGetResultMessage = new org.kevoree.modeling.message.impl.AtomicGetIncrementResult();
                                                                if (objectReader.get(KMessageLoader.ID_NAME) != null) {
                                                                    atomicGetResultMessage.id = java.lang.Long.parseLong(objectReader.get(KMessageLoader.ID_NAME).toString());
                                                                }
                                                                if (objectReader.get(KMessageLoader.VALUE_NAME) != null) {
                                                                    try {
                                                                        atomicGetResultMessage.value = java.lang.Short.parseShort(objectReader.get(KMessageLoader.VALUE_NAME).toString());
                                                                    }
                                                                    catch ($ex$) {
                                                                        if ($ex$ instanceof java.lang.Exception) {
                                                                            var e = $ex$;
                                                                            e.printStackTrace();
                                                                        }
                                                                        else {
                                                                            throw $ex$;
                                                                        }
                                                                    }
                                                                }
                                                                return atomicGetResultMessage;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            return null;
                        }
                        catch ($ex$) {
                            if ($ex$ instanceof java.lang.Exception) {
                                var e = $ex$;
                                e.printStackTrace();
                                return null;
                            }
                            else {
                                throw $ex$;
                            }
                        }
                    };
                    KMessageLoader.TYPE_NAME = "type";
                    KMessageLoader.OPERATION_NAME = "op";
                    KMessageLoader.KEY_NAME = "key";
                    KMessageLoader.KEYS_NAME = "keys";
                    KMessageLoader.ID_NAME = "id";
                    KMessageLoader.VALUE_NAME = "value";
                    KMessageLoader.VALUES_NAME = "values";
                    KMessageLoader.CLASS_IDX_NAME = "class";
                    KMessageLoader.PARAMETERS_NAME = "params";
                    KMessageLoader.EVENTS_TYPE = 0;
                    KMessageLoader.GET_REQ_TYPE = 1;
                    KMessageLoader.GET_RES_TYPE = 2;
                    KMessageLoader.PUT_REQ_TYPE = 3;
                    KMessageLoader.PUT_RES_TYPE = 4;
                    KMessageLoader.OPERATION_CALL_TYPE = 5;
                    KMessageLoader.OPERATION_RESULT_TYPE = 6;
                    KMessageLoader.ATOMIC_GET_INC_REQUEST_TYPE = 7;
                    KMessageLoader.ATOMIC_GET_INC_RESULT_TYPE = 8;
                    return KMessageLoader;
                })();
                message.KMessageLoader = KMessageLoader;
                var impl;
                (function (impl) {
                    var AtomicGetIncrementRequest = (function () {
                        function AtomicGetIncrementRequest() {
                        }
                        AtomicGetIncrementRequest.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            if (this.keys != null) {
                                buffer.append(",");
                                buffer.append("\"");
                                buffer.append(org.kevoree.modeling.message.KMessageLoader.KEYS_NAME).append("\":[");
                                for (var i = 0; i < this.keys.length; i++) {
                                    if (i != 0) {
                                        buffer.append(",");
                                    }
                                    buffer.append("\"");
                                    org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(this.keys[i], buffer);
                                    buffer.append("\"");
                                }
                                buffer.append("]\n");
                            }
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        AtomicGetIncrementRequest.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.ATOMIC_GET_INC_REQUEST_TYPE;
                        };
                        return AtomicGetIncrementRequest;
                    })();
                    impl.AtomicGetIncrementRequest = AtomicGetIncrementRequest;
                    var AtomicGetIncrementResult = (function () {
                        function AtomicGetIncrementResult() {
                        }
                        AtomicGetIncrementResult.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.value, org.kevoree.modeling.message.KMessageLoader.VALUE_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        AtomicGetIncrementResult.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.ATOMIC_GET_INC_RESULT_TYPE;
                        };
                        return AtomicGetIncrementResult;
                    })();
                    impl.AtomicGetIncrementResult = AtomicGetIncrementResult;
                    var Events = (function () {
                        function Events(p_keys) {
                            this._keys = p_keys;
                        }
                        Events.prototype.allKeys = function () {
                            return this._keys;
                        };
                        Events.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            buffer.append(",");
                            buffer.append("\"");
                            buffer.append(org.kevoree.modeling.message.KMessageLoader.KEYS_NAME).append("\":[");
                            for (var i = 0; i < this._keys.length; i++) {
                                if (i != 0) {
                                    buffer.append(",");
                                }
                                buffer.append("\"");
                                org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(this._keys[i], buffer);
                                buffer.append("\"");
                            }
                            buffer.append("]\n");
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        Events.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.EVENTS_TYPE;
                        };
                        return Events;
                    })();
                    impl.Events = Events;
                    var GetRequest = (function () {
                        function GetRequest() {
                        }
                        GetRequest.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            if (this.keys != null) {
                                buffer.append(",");
                                buffer.append("\"");
                                buffer.append(org.kevoree.modeling.message.KMessageLoader.KEYS_NAME).append("\":[");
                                for (var i = 0; i < this.keys.length; i++) {
                                    if (i != 0) {
                                        buffer.append(",");
                                    }
                                    buffer.append("\"");
                                    org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(this.keys[i], buffer);
                                    buffer.append("\"");
                                }
                                buffer.append("]\n");
                            }
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        GetRequest.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.GET_REQ_TYPE;
                        };
                        return GetRequest;
                    })();
                    impl.GetRequest = GetRequest;
                    var GetResult = (function () {
                        function GetResult() {
                        }
                        GetResult.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            if (this.values != null) {
                                buffer.append(",");
                                buffer.append("\"");
                                buffer.append(org.kevoree.modeling.message.KMessageLoader.VALUES_NAME).append("\":[");
                                for (var i = 0; i < this.values.length; i++) {
                                    if (i != 0) {
                                        buffer.append(",");
                                    }
                                    buffer.append("\"");
                                    buffer.append(org.kevoree.modeling.format.json.JsonString.encode(this.values[i]));
                                    buffer.append("\"");
                                }
                                buffer.append("]\n");
                            }
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        GetResult.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.GET_RES_TYPE;
                        };
                        return GetResult;
                    })();
                    impl.GetResult = GetResult;
                    var MessageHelper = (function () {
                        function MessageHelper() {
                        }
                        MessageHelper.printJsonStart = function (builder) {
                            builder.append("{\n");
                        };
                        MessageHelper.printJsonEnd = function (builder) {
                            builder.append("}\n");
                        };
                        MessageHelper.printType = function (builder, type) {
                            builder.append("\"");
                            builder.append(org.kevoree.modeling.message.KMessageLoader.TYPE_NAME);
                            builder.append("\":\"");
                            builder.append(type);
                            builder.append("\"\n");
                        };
                        MessageHelper.printElem = function (elem, name, builder) {
                            if (elem != null) {
                                builder.append(",");
                                builder.append("\"");
                                builder.append(name);
                                builder.append("\":\"");
                                builder.append(elem.toString());
                                builder.append("\"\n");
                            }
                        };
                        return MessageHelper;
                    })();
                    impl.MessageHelper = MessageHelper;
                    var OperationCallMessage = (function () {
                        function OperationCallMessage() {
                        }
                        OperationCallMessage.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.key, org.kevoree.modeling.message.KMessageLoader.KEY_NAME, buffer);
                            buffer.append(",\"").append(org.kevoree.modeling.message.KMessageLoader.CLASS_IDX_NAME).append("\":\"").append(this.classIndex).append("\"");
                            buffer.append(",\"").append(org.kevoree.modeling.message.KMessageLoader.OPERATION_NAME).append("\":\"").append(this.opIndex).append("\"");
                            if (this.params != null) {
                                buffer.append(",\"");
                                buffer.append(org.kevoree.modeling.message.KMessageLoader.PARAMETERS_NAME).append("\":[");
                                for (var i = 0; i < this.params.length; i++) {
                                    if (i != 0) {
                                        buffer.append(",");
                                    }
                                    buffer.append("\"");
                                    buffer.append(org.kevoree.modeling.format.json.JsonString.encode(this.params[i]));
                                    buffer.append("\"");
                                }
                                buffer.append("]\n");
                            }
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        OperationCallMessage.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.OPERATION_CALL_TYPE;
                        };
                        return OperationCallMessage;
                    })();
                    impl.OperationCallMessage = OperationCallMessage;
                    var OperationResultMessage = (function () {
                        function OperationResultMessage() {
                        }
                        OperationResultMessage.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.key, org.kevoree.modeling.message.KMessageLoader.KEY_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.value, org.kevoree.modeling.message.KMessageLoader.VALUE_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        OperationResultMessage.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.OPERATION_RESULT_TYPE;
                        };
                        return OperationResultMessage;
                    })();
                    impl.OperationResultMessage = OperationResultMessage;
                    var PutRequest = (function () {
                        function PutRequest() {
                        }
                        PutRequest.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            if (this.keys != null && this.values != null) {
                                buffer.append(",\"");
                                buffer.append(org.kevoree.modeling.message.KMessageLoader.KEYS_NAME).append("\":[");
                                for (var i = 0; i < this.keys.length; i++) {
                                    if (i != 0) {
                                        buffer.append(",");
                                    }
                                    buffer.append("\"");
                                    org.kevoree.modeling.util.maths.Base64.encodeLongToBuffer(this.keys[i], buffer);
                                    buffer.append("\"");
                                }
                                buffer.append("]\n");
                                buffer.append(",\"");
                                buffer.append(org.kevoree.modeling.message.KMessageLoader.VALUES_NAME).append("\":[");
                                for (var i = 0; i < this.values.length; i++) {
                                    if (i != 0) {
                                        buffer.append(",");
                                    }
                                    buffer.append("\"");
                                    buffer.append(org.kevoree.modeling.format.json.JsonString.encode(this.values[i]));
                                    buffer.append("\"");
                                }
                                buffer.append("]\n");
                            }
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        PutRequest.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.PUT_REQ_TYPE;
                        };
                        return PutRequest;
                    })();
                    impl.PutRequest = PutRequest;
                    var PutResult = (function () {
                        function PutResult() {
                        }
                        PutResult.prototype.json = function () {
                            var buffer = new java.lang.StringBuilder();
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonStart(buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printType(buffer, this.type());
                            org.kevoree.modeling.message.impl.MessageHelper.printElem(this.id, org.kevoree.modeling.message.KMessageLoader.ID_NAME, buffer);
                            org.kevoree.modeling.message.impl.MessageHelper.printJsonEnd(buffer);
                            return buffer.toString();
                        };
                        PutResult.prototype.type = function () {
                            return org.kevoree.modeling.message.KMessageLoader.PUT_RES_TYPE;
                        };
                        return PutResult;
                    })();
                    impl.PutResult = PutResult;
                })(impl = message.impl || (message.impl = {}));
            })(message = modeling.message || (modeling.message = {}));
            var meta;
            (function (meta) {
                var KPrimitiveTypes = (function () {
                    function KPrimitiveTypes() {
                    }
                    KPrimitiveTypes.BOOL_ID = -1;
                    KPrimitiveTypes.STRING_ID = -2;
                    KPrimitiveTypes.LONG_ID = -3;
                    KPrimitiveTypes.INT_ID = -4;
                    KPrimitiveTypes.DOUBLE_ID = -5;
                    KPrimitiveTypes.CONTINUOUS_ID = -6;
                    KPrimitiveTypes.BOOL = new org.kevoree.modeling.abs.AbstractDataType("BOOL", false, KPrimitiveTypes.BOOL_ID);
                    KPrimitiveTypes.STRING = new org.kevoree.modeling.abs.AbstractDataType("STRING", false, KPrimitiveTypes.STRING_ID);
                    KPrimitiveTypes.LONG = new org.kevoree.modeling.abs.AbstractDataType("LONG", false, KPrimitiveTypes.LONG_ID);
                    KPrimitiveTypes.INT = new org.kevoree.modeling.abs.AbstractDataType("INT", false, KPrimitiveTypes.INT_ID);
                    KPrimitiveTypes.DOUBLE = new org.kevoree.modeling.abs.AbstractDataType("DOUBLE", false, KPrimitiveTypes.DOUBLE_ID);
                    KPrimitiveTypes.CONTINUOUS = new org.kevoree.modeling.abs.AbstractDataType("CONTINUOUS", false, KPrimitiveTypes.CONTINUOUS_ID);
                    return KPrimitiveTypes;
                })();
                meta.KPrimitiveTypes = KPrimitiveTypes;
                var MetaType = (function () {
                    function MetaType() {
                    }
                    MetaType.prototype.equals = function (other) {
                        return this == other;
                    };
                    MetaType.values = function () {
                        return MetaType._MetaTypeVALUES;
                    };
                    MetaType.ATTRIBUTE = new MetaType();
                    MetaType.REFERENCE = new MetaType();
                    MetaType.DEPENDENCY = new MetaType();
                    MetaType.DEPENDENCIES = new MetaType();
                    MetaType.INPUT = new MetaType();
                    MetaType.OUTPUT = new MetaType();
                    MetaType.OPERATION = new MetaType();
                    MetaType.CLASS = new MetaType();
                    MetaType.MODEL = new MetaType();
                    MetaType.ENUM = new MetaType();
                    MetaType.LITERAL = new MetaType();
                    MetaType._MetaTypeVALUES = [
                        MetaType.ATTRIBUTE,
                        MetaType.REFERENCE,
                        MetaType.DEPENDENCY,
                        MetaType.DEPENDENCIES,
                        MetaType.INPUT,
                        MetaType.OUTPUT,
                        MetaType.OPERATION,
                        MetaType.CLASS,
                        MetaType.MODEL,
                        MetaType.ENUM,
                        MetaType.LITERAL
                    ];
                    return MetaType;
                })();
                meta.MetaType = MetaType;
                var impl;
                (function (impl) {
                    var GenericModel = (function (_super) {
                        __extends(GenericModel, _super);
                        function GenericModel(mm, p_manager) {
                            _super.call(this, p_manager);
                            this._p_metaModel = mm;
                        }
                        GenericModel.prototype.metaModel = function () {
                            return this._p_metaModel;
                        };
                        GenericModel.prototype.internalCreateUniverse = function (universe) {
                            return new org.kevoree.modeling.meta.impl.GenericUniverse(universe, this._manager);
                        };
                        GenericModel.prototype.internalCreateObject = function (universe, time, uuid, clazz, previousUniverse, previousTime) {
                            if (clazz.inferAlg() != null) {
                                return new org.kevoree.modeling.meta.impl.GenericObjectInfer(universe, time, uuid, clazz, this._manager, previousUniverse, previousTime);
                            }
                            else {
                                return new org.kevoree.modeling.meta.impl.GenericObject(universe, time, uuid, clazz, this._manager, previousUniverse, previousTime);
                            }
                        };
                        return GenericModel;
                    })(org.kevoree.modeling.abs.AbstractKModel);
                    impl.GenericModel = GenericModel;
                    var GenericObject = (function (_super) {
                        __extends(GenericObject, _super);
                        function GenericObject(p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime) {
                            _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime);
                        }
                        return GenericObject;
                    })(org.kevoree.modeling.abs.AbstractKObject);
                    impl.GenericObject = GenericObject;
                    var GenericObjectInfer = (function (_super) {
                        __extends(GenericObjectInfer, _super);
                        function GenericObjectInfer(p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime) {
                            _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime);
                        }
                        return GenericObjectInfer;
                    })(org.kevoree.modeling.abs.AbstractKObjectInfer);
                    impl.GenericObjectInfer = GenericObjectInfer;
                    var GenericUniverse = (function (_super) {
                        __extends(GenericUniverse, _super);
                        function GenericUniverse(p_key, p_manager) {
                            _super.call(this, p_key, p_manager);
                        }
                        GenericUniverse.prototype.internal_create = function (timePoint) {
                            return new org.kevoree.modeling.meta.impl.GenericView(this._universe, timePoint, this._manager);
                        };
                        return GenericUniverse;
                    })(org.kevoree.modeling.abs.AbstractKUniverse);
                    impl.GenericUniverse = GenericUniverse;
                    var GenericView = (function (_super) {
                        __extends(GenericView, _super);
                        function GenericView(p_universe, _time, p_manager) {
                            _super.call(this, p_universe, _time, p_manager);
                        }
                        return GenericView;
                    })(org.kevoree.modeling.abs.AbstractKView);
                    impl.GenericView = GenericView;
                    var MetaAttribute = (function () {
                        function MetaAttribute(p_name, p_index, p_precision, p_key, p_metaType, p_extrapolation) {
                            this._name = p_name;
                            this._index = p_index;
                            this._precision = p_precision;
                            this._key = p_key;
                            this._metaType = p_metaType;
                            this._extrapolation = p_extrapolation;
                            if (this._extrapolation == null) {
                                this._extrapolation = org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance();
                            }
                        }
                        MetaAttribute.prototype.attributeType = function () {
                            return this._metaType;
                        };
                        MetaAttribute.prototype.index = function () {
                            return this._index;
                        };
                        MetaAttribute.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaAttribute.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.ATTRIBUTE;
                        };
                        MetaAttribute.prototype.precision = function () {
                            return this._precision;
                        };
                        MetaAttribute.prototype.key = function () {
                            return this._key;
                        };
                        MetaAttribute.prototype.strategy = function () {
                            return this._extrapolation;
                        };
                        MetaAttribute.prototype.setExtrapolation = function (extrapolation) {
                            this._extrapolation = extrapolation;
                        };
                        MetaAttribute.prototype.setPrecision = function (p_precision) {
                            this._precision = p_precision;
                        };
                        return MetaAttribute;
                    })();
                    impl.MetaAttribute = MetaAttribute;
                    var MetaClass = (function () {
                        function MetaClass(p_name, p_index, p_alg) {
                            this._indexes = null;
                            this._cachedInputs = null;
                            this._cachedOutputs = null;
                            this._temporalResolution = 1;
                            this._name = p_name;
                            this._index = p_index;
                            this._meta = new Array();
                            this._alg = p_alg;
                            this._indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            if (this._alg != null) {
                                this.internal_add_meta(new org.kevoree.modeling.meta.impl.MetaDependencies(this._meta.length, this));
                            }
                        }
                        MetaClass.prototype.init = function (p_metaElements) {
                            this._indexes.clear();
                            this._meta = p_metaElements;
                            for (var i = 0; i < this._meta.length; i++) {
                                this._indexes.put(p_metaElements[i].metaName(), p_metaElements[i].index());
                            }
                            this.clearCached();
                        };
                        MetaClass.prototype.metaByName = function (name) {
                            if (this._indexes != null) {
                                var resolvedIndex = this._indexes.get(name);
                                if (resolvedIndex != null) {
                                    return this._meta[resolvedIndex];
                                }
                            }
                            return null;
                        };
                        MetaClass.prototype.attribute = function (name) {
                            var resolved = this.metaByName(name);
                            if (resolved != null && resolved.metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                return resolved;
                            }
                            return null;
                        };
                        MetaClass.prototype.reference = function (name) {
                            var resolved = this.metaByName(name);
                            if (resolved != null && resolved.metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                return resolved;
                            }
                            return null;
                        };
                        MetaClass.prototype.operation = function (name) {
                            var resolved = this.metaByName(name);
                            if (resolved != null && resolved.metaType() == org.kevoree.modeling.meta.MetaType.OUTPUT) {
                                return resolved;
                            }
                            return null;
                        };
                        MetaClass.prototype.metaElements = function () {
                            return this._meta;
                        };
                        MetaClass.prototype.index = function () {
                            return this._index;
                        };
                        MetaClass.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaClass.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.CLASS;
                        };
                        MetaClass.prototype.meta = function (index) {
                            if (index >= 0 && index < this._meta.length) {
                                return this._meta[index];
                            }
                            else {
                                return null;
                            }
                        };
                        MetaClass.prototype.addAttribute = function (attributeName, p_type) {
                            return this.internal_addatt(attributeName, p_type);
                        };
                        MetaClass.prototype.internal_addatt = function (attributeName, p_type) {
                            var precisionCleaned = -1;
                            var extrapolation;
                            if (p_type.id() == org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID) {
                                extrapolation = org.kevoree.modeling.extrapolation.impl.PolynomialExtrapolation.instance();
                                precisionCleaned = 0.1;
                            }
                            else {
                                extrapolation = org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance();
                            }
                            var tempAttribute = new org.kevoree.modeling.meta.impl.MetaAttribute(attributeName, this._meta.length, precisionCleaned, false, p_type, extrapolation);
                            this.internal_add_meta(tempAttribute);
                            return tempAttribute;
                        };
                        MetaClass.prototype.addReference = function (referenceName, p_metaClass, oppositeName, toMany) {
                            return this.internal_addref(referenceName, p_metaClass, oppositeName, toMany);
                        };
                        MetaClass.prototype.internal_addref = function (referenceName, p_metaClass, oppositeName, toMany) {
                            var tempOrigin = this;
                            var opName = oppositeName;
                            if (opName == null) {
                                opName = "op_" + referenceName;
                                p_metaClass.getOrCreate(opName, referenceName, this, false, false);
                            }
                            else {
                                p_metaClass.getOrCreate(opName, referenceName, this, true, false);
                            }
                            var tempReference = new org.kevoree.modeling.meta.impl.MetaReference(referenceName, this._meta.length, false, !toMany, function () {
                                return p_metaClass;
                            }, opName, function () {
                                return tempOrigin;
                            });
                            this.internal_add_meta(tempReference);
                            return tempReference;
                        };
                        MetaClass.prototype.getOrCreate = function (p_name, p_oppositeName, p_oppositeClass, p_visible, p_single) {
                            var previous = this.reference(p_name);
                            if (previous != null) {
                                return previous;
                            }
                            var tempOrigin = this;
                            var tempReference = new org.kevoree.modeling.meta.impl.MetaReference(p_name, this._meta.length, p_visible, p_single, function () {
                                return p_oppositeClass;
                            }, p_oppositeName, function () {
                                return tempOrigin;
                            });
                            this.internal_add_meta(tempReference);
                            return tempReference;
                        };
                        MetaClass.prototype.addOperation = function (operationName) {
                            var tempOrigin = this;
                            var tempOperation = new org.kevoree.modeling.meta.impl.MetaOperation(operationName, this._meta.length, function () {
                                return tempOrigin;
                            });
                            this.internal_add_meta(tempOperation);
                            return tempOperation;
                        };
                        MetaClass.prototype.inferAlg = function () {
                            return this._alg;
                        };
                        MetaClass.prototype.addDependency = function (dependencyName, p_metaClass, oppositeName) {
                            var currentDeps = this.dependencies();
                            if (currentDeps != null) {
                                return currentDeps.addDependency(dependencyName, p_metaClass, oppositeName);
                            }
                            return null;
                        };
                        MetaClass.prototype.addInput = function (p_name, p_extractor) {
                            var newInput = new org.kevoree.modeling.meta.impl.MetaInferInput(p_name, this._meta.length, p_extractor);
                            this.internal_add_meta(newInput);
                            return newInput;
                        };
                        MetaClass.prototype.addOutput = function (p_name, p_type) {
                            var newOutput = new org.kevoree.modeling.meta.impl.MetaInferOutput(p_name, this._meta.length, p_type);
                            this.internal_add_meta(newOutput);
                            return newOutput;
                        };
                        MetaClass.prototype.dependencies = function () {
                            return this.metaByName(org.kevoree.modeling.meta.impl.MetaDependencies.DEPENDENCIES_NAME);
                        };
                        MetaClass.prototype.inputs = function () {
                            if (this._cachedInputs == null) {
                                this.cacheInputs();
                            }
                            return this._cachedInputs;
                        };
                        MetaClass.prototype.cacheInputs = function () {
                            var nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.INPUT)) {
                                    nb++;
                                }
                            }
                            this._cachedInputs = new Array();
                            nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.INPUT)) {
                                    this._cachedInputs[nb] = this._meta[i];
                                    nb++;
                                }
                            }
                        };
                        MetaClass.prototype.outputs = function () {
                            if (this._cachedOutputs == null) {
                                this.cacheOuputs();
                            }
                            return this._cachedOutputs;
                        };
                        MetaClass.prototype.temporalResolution = function () {
                            return this._temporalResolution;
                        };
                        MetaClass.prototype.setTemporalResolution = function (p_tempo) {
                            this._temporalResolution = p_tempo;
                        };
                        MetaClass.prototype.cacheOuputs = function () {
                            var nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.OUTPUT)) {
                                    nb++;
                                }
                            }
                            this._cachedOutputs = new Array();
                            nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.OUTPUT)) {
                                    this._cachedOutputs[nb] = this._meta[i];
                                    nb++;
                                }
                            }
                        };
                        MetaClass.prototype.clearCached = function () {
                            this._cachedOutputs = null;
                            this._cachedInputs = null;
                        };
                        MetaClass.prototype.internal_add_meta = function (p_new_meta) {
                            this.clearCached();
                            this._meta[p_new_meta.index()] = p_new_meta;
                            this._indexes.put(p_new_meta.metaName(), p_new_meta.index());
                        };
                        return MetaClass;
                    })();
                    impl.MetaClass = MetaClass;
                    var MetaDependencies = (function () {
                        function MetaDependencies(p_index, p_origin) {
                            this._indexes = null;
                            this._index = p_index;
                            this._origin = p_origin;
                            this._dependencies = new Array();
                            this._indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        MetaDependencies.prototype.origin = function () {
                            return this._origin;
                        };
                        MetaDependencies.prototype.allDependencies = function () {
                            return this._dependencies;
                        };
                        MetaDependencies.prototype.dependencyByName = function (dependencyName) {
                            var foundedIndex = this._indexes.get(dependencyName);
                            if (foundedIndex != null) {
                                return this._dependencies[foundedIndex];
                            }
                            else {
                                return null;
                            }
                        };
                        MetaDependencies.prototype.index = function () {
                            return this._index;
                        };
                        MetaDependencies.prototype.metaName = function () {
                            return MetaDependencies.DEPENDENCIES_NAME;
                        };
                        MetaDependencies.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.DEPENDENCIES;
                        };
                        MetaDependencies.prototype.addDependency = function (p_dependencyName, p_type, op_name) {
                            if (op_name != null) {
                                throw new java.lang.RuntimeException("Not Implemented Yet!");
                            }
                            var newDependency = new org.kevoree.modeling.meta.impl.MetaDependency(p_dependencyName, this._dependencies.length, this, function () {
                                return p_type;
                            }, op_name);
                            this.internal_add_dep(newDependency);
                            return newDependency;
                        };
                        MetaDependencies.prototype.internal_add_dep = function (p_new_meta) {
                            this._dependencies[p_new_meta.index()] = p_new_meta;
                            this._indexes.put(p_new_meta.metaName(), p_new_meta.index());
                        };
                        MetaDependencies.DEPENDENCIES_NAME = "allDependencies";
                        return MetaDependencies;
                    })();
                    impl.MetaDependencies = MetaDependencies;
                    var MetaDependency = (function () {
                        function MetaDependency(p_name, p_index, p_origin, p_lazyMetaType, p_oppositeName) {
                            this._name = p_name;
                            this._index = p_index;
                            this._origin = p_origin;
                            this._lazyMetaType = p_lazyMetaType;
                            this._oppositeName = p_oppositeName;
                        }
                        MetaDependency.prototype.type = function () {
                            if (this._lazyMetaType != null) {
                                return this._lazyMetaType();
                            }
                            else {
                                return null;
                            }
                        };
                        MetaDependency.prototype.opposite = function () {
                            if (this._oppositeName != null) {
                                var dependencies = this.type().dependencies();
                                if (dependencies != null) {
                                    return dependencies.dependencyByName(this._oppositeName);
                                }
                            }
                            return null;
                        };
                        MetaDependency.prototype.origin = function () {
                            return this._origin;
                        };
                        MetaDependency.prototype.index = function () {
                            return this._index;
                        };
                        MetaDependency.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaDependency.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.DEPENDENCY;
                        };
                        return MetaDependency;
                    })();
                    impl.MetaDependency = MetaDependency;
                    var MetaEnum = (function () {
                        function MetaEnum(p_name, p_index) {
                            this._indexes = null;
                            this._name = p_name;
                            this._index = p_index;
                            this._literals = new Array();
                            this._indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        MetaEnum.prototype.literals = function () {
                            return this._literals;
                        };
                        MetaEnum.prototype.literalByName = function (p_name) {
                            if (this._indexes != null) {
                                var resolvedIndex = this._indexes.get(p_name);
                                if (resolvedIndex != null) {
                                    return this._literals[resolvedIndex];
                                }
                            }
                            return null;
                        };
                        MetaEnum.prototype.literal = function (p_index) {
                            return this._literals[p_index];
                        };
                        MetaEnum.prototype.addLiteral = function (p_name) {
                            var newLiteral = new org.kevoree.modeling.meta.impl.MetaLiteral(p_name, this._literals.length, this._name);
                            this.internal_add_meta(newLiteral);
                            return newLiteral;
                        };
                        MetaEnum.prototype.name = function () {
                            return this._name;
                        };
                        MetaEnum.prototype.isEnum = function () {
                            return true;
                        };
                        MetaEnum.prototype.id = function () {
                            return this._index;
                        };
                        MetaEnum.prototype.index = function () {
                            return this._index;
                        };
                        MetaEnum.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaEnum.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.ENUM;
                        };
                        MetaEnum.prototype.internal_add_meta = function (p_new_meta) {
                            this._literals[p_new_meta.index()] = p_new_meta;
                            this._indexes.put(p_new_meta.metaName(), p_new_meta.index());
                        };
                        return MetaEnum;
                    })();
                    impl.MetaEnum = MetaEnum;
                    var MetaInferInput = (function () {
                        function MetaInferInput(p_name, p_index, p_extractor) {
                            this._name = p_name;
                            this._index = p_index;
                            this._extractor = p_extractor;
                        }
                        MetaInferInput.prototype.extractorQuery = function () {
                            return this._extractor;
                        };
                        MetaInferInput.prototype.extractor = function () {
                            if (this._cachedTraversal != null) {
                                return this._cachedTraversal;
                            }
                            else {
                                return this.cacheTraversal();
                            }
                        };
                        MetaInferInput.prototype.cacheTraversal = function () {
                            this._cachedTraversal = org.kevoree.modeling.traversal.query.impl.QueryEngine.getINSTANCE().buildTraversal(this._extractor);
                            return this._cachedTraversal;
                        };
                        MetaInferInput.prototype.index = function () {
                            return this._index;
                        };
                        MetaInferInput.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaInferInput.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.INPUT;
                        };
                        return MetaInferInput;
                    })();
                    impl.MetaInferInput = MetaInferInput;
                    var MetaInferOutput = (function () {
                        function MetaInferOutput(p_name, p_index, p_type) {
                            this._name = p_name;
                            this._index = p_index;
                            this._type = p_type;
                        }
                        MetaInferOutput.prototype.index = function () {
                            return this._index;
                        };
                        MetaInferOutput.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaInferOutput.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.OUTPUT;
                        };
                        MetaInferOutput.prototype.type = function () {
                            return this._type;
                        };
                        return MetaInferOutput;
                    })();
                    impl.MetaInferOutput = MetaInferOutput;
                    var MetaLiteral = (function () {
                        function MetaLiteral(p_name, p_index, p_className) {
                            this._name = p_name;
                            this._index = p_index;
                            this._className = p_className;
                        }
                        MetaLiteral.prototype.index = function () {
                            return this._index;
                        };
                        MetaLiteral.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaLiteral.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.LITERAL;
                        };
                        MetaLiteral.prototype.toString = function () {
                            return "KLiteral@" + this._className + "." + this._name;
                        };
                        return MetaLiteral;
                    })();
                    impl.MetaLiteral = MetaLiteral;
                    var MetaModel = (function () {
                        function MetaModel(p_name) {
                            this._metaClasses_indexes = null;
                            this._metaTypes_indexes = null;
                            this._name = p_name;
                            this._index = 0;
                            this._metaClasses = new Array();
                            this._metaTypes = new Array();
                            this._metaClasses_indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this._metaTypes_indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        MetaModel.prototype.index = function () {
                            return this._index;
                        };
                        MetaModel.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaModel.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.MODEL;
                        };
                        MetaModel.prototype.init = function (p_metaClasses) {
                            this._metaClasses_indexes.clear();
                            this._metaClasses = p_metaClasses;
                            for (var i = 0; i < this._metaClasses.length; i++) {
                                this._metaClasses_indexes.put(p_metaClasses[i].metaName(), p_metaClasses[i].index());
                            }
                        };
                        MetaModel.prototype.metaClasses = function () {
                            return this._metaClasses;
                        };
                        MetaModel.prototype.metaClassByName = function (name) {
                            if (this._metaClasses_indexes == null) {
                                return null;
                            }
                            var resolved = this._metaClasses_indexes.get(name);
                            if (resolved == null) {
                                return null;
                            }
                            else {
                                return this._metaClasses[resolved];
                            }
                        };
                        MetaModel.prototype.metaClass = function (index) {
                            if (index >= 0 && index < this._metaClasses.length) {
                                return this._metaClasses[index];
                            }
                            return null;
                        };
                        MetaModel.prototype.addMetaClass = function (metaClassName) {
                            return this.internal_addmetaclass(metaClassName, null);
                        };
                        MetaModel.prototype.addInferMetaClass = function (metaClassName, inferAlg) {
                            return this.internal_addmetaclass(metaClassName, inferAlg);
                        };
                        MetaModel.prototype.metaTypes = function () {
                            return this._metaTypes;
                        };
                        MetaModel.prototype.metaTypeByName = function (p_name) {
                            if (this._metaTypes == null) {
                                return null;
                            }
                            var resolved = this._metaTypes_indexes.get(p_name);
                            if (resolved == null) {
                                return null;
                            }
                            else {
                                return this._metaTypes[resolved];
                            }
                        };
                        MetaModel.prototype.addMetaEnum = function (enumName) {
                            var newEnumType = new org.kevoree.modeling.meta.impl.MetaEnum(enumName, this._metaTypes.length);
                            this.internal_add_type(newEnumType);
                            return newEnumType;
                        };
                        MetaModel.prototype.internal_addmetaclass = function (metaClassName, alg) {
                            if (this._metaClasses_indexes.contains(metaClassName)) {
                                return this.metaClassByName(metaClassName);
                            }
                            else {
                                if (this._metaClasses == null) {
                                    this._metaClasses = new Array();
                                    this._metaClasses[0] = new org.kevoree.modeling.meta.impl.MetaClass(metaClassName, 0, alg);
                                    this._metaClasses_indexes.put(metaClassName, this._metaClasses[0].index());
                                    return this._metaClasses[0];
                                }
                                else {
                                    var newMetaClass = new org.kevoree.modeling.meta.impl.MetaClass(metaClassName, this._metaClasses.length, alg);
                                    this.internal_add_meta_class(newMetaClass);
                                    return newMetaClass;
                                }
                            }
                        };
                        MetaModel.prototype.internal_add_meta_class = function (p_newMetaClass) {
                            this._metaClasses[p_newMetaClass.index()] = p_newMetaClass;
                            this._metaClasses_indexes.put(p_newMetaClass.metaName(), p_newMetaClass.index());
                        };
                        MetaModel.prototype.internal_add_type = function (p_newType) {
                            this._metaTypes[p_newType.index()] = p_newType;
                            this._metaTypes_indexes.put(p_newType.metaName(), p_newType.index());
                        };
                        MetaModel.prototype.createModel = function (p_manager) {
                            return new org.kevoree.modeling.meta.impl.GenericModel(this, p_manager);
                        };
                        return MetaModel;
                    })();
                    impl.MetaModel = MetaModel;
                    var MetaOperation = (function () {
                        function MetaOperation(p_name, p_index, p_lazyMetaClass) {
                            this._name = p_name;
                            this._index = p_index;
                            this._lazyMetaClass = p_lazyMetaClass;
                        }
                        MetaOperation.prototype.index = function () {
                            return this._index;
                        };
                        MetaOperation.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaOperation.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.OPERATION;
                        };
                        MetaOperation.prototype.origin = function () {
                            if (this._lazyMetaClass != null) {
                                return this._lazyMetaClass();
                            }
                            return null;
                        };
                        return MetaOperation;
                    })();
                    impl.MetaOperation = MetaOperation;
                    var MetaReference = (function () {
                        function MetaReference(p_name, p_index, p_visible, p_single, p_lazyMetaType, op_name, p_lazyMetaOrigin) {
                            this._name = p_name;
                            this._index = p_index;
                            this._visible = p_visible;
                            this._single = p_single;
                            this._lazyMetaType = p_lazyMetaType;
                            this._op_name = op_name;
                            this._lazyMetaOrigin = p_lazyMetaOrigin;
                        }
                        MetaReference.prototype.single = function () {
                            return this._single;
                        };
                        MetaReference.prototype.type = function () {
                            if (this._lazyMetaType != null) {
                                return this._lazyMetaType();
                            }
                            else {
                                return null;
                            }
                        };
                        MetaReference.prototype.opposite = function () {
                            if (this._op_name != null) {
                                return this.type().reference(this._op_name);
                            }
                            return null;
                        };
                        MetaReference.prototype.origin = function () {
                            if (this._lazyMetaOrigin != null) {
                                return this._lazyMetaOrigin();
                            }
                            return null;
                        };
                        MetaReference.prototype.index = function () {
                            return this._index;
                        };
                        MetaReference.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaReference.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.REFERENCE;
                        };
                        MetaReference.prototype.visible = function () {
                            return this._visible;
                        };
                        return MetaReference;
                    })();
                    impl.MetaReference = MetaReference;
                })(impl = meta.impl || (meta.impl = {}));
            })(meta = modeling.meta || (modeling.meta = {}));
            var operation;
            (function (operation_1) {
                var impl;
                (function (impl) {
                    var HashOperationManager = (function () {
                        function HashOperationManager(p_manager) {
                            this.remoteCallCallbacks = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this._callbackId = 0;
                            this.staticOperations = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this.instanceOperations = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this._manager = p_manager;
                        }
                        HashOperationManager.prototype.registerOperation = function (operation, callback, target) {
                            if (target == null) {
                                var clazzOperations = this.staticOperations.get(operation.origin().index());
                                if (clazzOperations == null) {
                                    clazzOperations = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this.staticOperations.put(operation.origin().index(), clazzOperations);
                                }
                                clazzOperations.put(operation.index(), callback);
                            }
                            else {
                                var objectOperations = this.instanceOperations.get(target.uuid());
                                if (objectOperations == null) {
                                    objectOperations = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this.instanceOperations.put(target.uuid(), objectOperations);
                                }
                                objectOperations.put(operation.index(), callback);
                            }
                        };
                        HashOperationManager.prototype.searchOperation = function (source, clazz, operation) {
                            var objectOperations = this.instanceOperations.get(source);
                            if (objectOperations != null) {
                                return objectOperations.get(operation);
                            }
                            var clazzOperations = this.staticOperations.get(clazz);
                            if (clazzOperations != null) {
                                return clazzOperations.get(operation);
                            }
                            return null;
                        };
                        HashOperationManager.prototype.call = function (source, operation, param, callback) {
                            var operationCore = this.searchOperation(source.uuid(), operation.origin().index(), operation.index());
                            if (operationCore != null) {
                                operationCore(source, param, callback);
                            }
                            else {
                                this.sendToRemote(source, operation, param, callback);
                            }
                        };
                        HashOperationManager.prototype.sendToRemote = function (source, operation, param, callback) {
                            var stringParams = new Array();
                            for (var i = 0; i < param.length; i++) {
                                stringParams[i] = param[i].toString();
                            }
                            var operationCall = new org.kevoree.modeling.message.impl.OperationCallMessage();
                            operationCall.id = this.nextKey();
                            operationCall.key = new Float64Array([source.universe(), source.now(), source.uuid()]);
                            operationCall.classIndex = source.metaClass().index();
                            operationCall.opIndex = operation.index();
                            operationCall.params = stringParams;
                            this.remoteCallCallbacks.put(operationCall.id, callback);
                        };
                        HashOperationManager.prototype.nextKey = function () {
                            if (this._callbackId == org.kevoree.modeling.KConfig.CALLBACK_HISTORY) {
                                this._callbackId = 0;
                            }
                            else {
                                this._callbackId++;
                            }
                            return this._callbackId;
                        };
                        HashOperationManager.prototype.operationEventReceived = function (operationEvent) {
                            if (operationEvent.type() == org.kevoree.modeling.message.KMessageLoader.OPERATION_RESULT_TYPE) {
                                var operationResult = operationEvent;
                                var cb = this.remoteCallCallbacks.get(operationResult.id);
                                if (cb != null) {
                                    cb(operationResult.value);
                                }
                            }
                            else {
                                if (operationEvent.type() == org.kevoree.modeling.message.KMessageLoader.OPERATION_CALL_TYPE) {
                                    var operationCall = operationEvent;
                                    var sourceKey = operationCall.key;
                                    var operationCore = this.searchOperation(sourceKey[2], operationCall.classIndex, operationCall.opIndex);
                                    if (operationCore != null) {
                                        var view = this._manager.model().universe(sourceKey[0]).time(sourceKey[1]);
                                        view.lookup(sourceKey[2], function (kObject) {
                                            if (kObject != null) {
                                                operationCore(kObject, operationCall.params, function (o) {
                                                });
                                            }
                                        });
                                    }
                                }
                                else {
                                    System.err.println("BAD ROUTING !");
                                }
                            }
                        };
                        return HashOperationManager;
                    })();
                    impl.HashOperationManager = HashOperationManager;
                })(impl = operation_1.impl || (operation_1.impl = {}));
            })(operation = modeling.operation || (modeling.operation = {}));
            var scheduler;
            (function (scheduler) {
                var impl;
                (function (impl) {
                    var DirectScheduler = (function () {
                        function DirectScheduler() {
                        }
                        DirectScheduler.prototype.dispatch = function (runnable) {
                            runnable.run();
                        };
                        DirectScheduler.prototype.stop = function () {
                        };
                        return DirectScheduler;
                    })();
                    impl.DirectScheduler = DirectScheduler;
                    var ExecutorServiceScheduler = (function () {
                        function ExecutorServiceScheduler() {
                        }
                        ExecutorServiceScheduler.prototype.dispatch = function (p_runnable) {
                            p_runnable.run();
                        };
                        ExecutorServiceScheduler.prototype.stop = function () {
                        };
                        return ExecutorServiceScheduler;
                    })();
                    impl.ExecutorServiceScheduler = ExecutorServiceScheduler;
                })(impl = scheduler.impl || (scheduler.impl = {}));
            })(scheduler = modeling.scheduler || (modeling.scheduler = {}));
            var traversal;
            (function (traversal_1) {
                var impl;
                (function (impl) {
                    var Traversal = (function () {
                        function Traversal(p_roots) {
                            this._terminated = false;
                            this._initObjs = p_roots;
                        }
                        Traversal.prototype.internal_chain_action = function (p_action) {
                            if (this._terminated) {
                                throw new java.lang.RuntimeException(Traversal.TERMINATED_MESSAGE);
                            }
                            if (this._initAction == null) {
                                this._initAction = p_action;
                            }
                            if (this._lastAction != null) {
                                this._lastAction.chain(p_action);
                            }
                            this._lastAction = p_action;
                            return this;
                        };
                        Traversal.prototype.traverse = function (p_metaReference) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.TraverseAction(p_metaReference));
                        };
                        Traversal.prototype.traverseQuery = function (p_metaReferenceQuery) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.TraverseQueryAction(p_metaReferenceQuery));
                        };
                        Traversal.prototype.withAttribute = function (p_attribute, p_expectedValue) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterAttributeAction(p_attribute, p_expectedValue));
                        };
                        Traversal.prototype.withoutAttribute = function (p_attribute, p_expectedValue) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterNotAttributeAction(p_attribute, p_expectedValue));
                        };
                        Traversal.prototype.attributeQuery = function (p_attributeQuery) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterAttributeQueryAction(p_attributeQuery));
                        };
                        Traversal.prototype.filter = function (p_filter) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterAction(p_filter));
                        };
                        Traversal.prototype.collect = function (metaReference, continueCondition) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.DeepCollectAction(metaReference, continueCondition));
                        };
                        Traversal.prototype.traverseIndex = function (p_indexName) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.TraverseIndexAction(p_indexName));
                        };
                        Traversal.prototype.traverseTime = function (timeOffset, steps, continueCondition) {
                            throw new java.lang.RuntimeException("Not Implemented Yet!");
                        };
                        Traversal.prototype.traverseUniverse = function (universeOffset, continueCondition) {
                            throw new java.lang.RuntimeException("Not Implemented Yet!");
                        };
                        Traversal.prototype.then = function (cb) {
                            if (this._initObjs != null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(this._initObjs, null, function (objects) {
                                    cb(objects);
                                }));
                            }
                        };
                        Traversal.prototype.eval = function (p_expression, callback) {
                            this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.MathExpressionAction(p_expression));
                            this._terminated = true;
                            if (this._initObjs != null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(this._initObjs, null, callback));
                            }
                        };
                        Traversal.prototype.map = function (attribute, cb) {
                            this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.MapAction(attribute));
                            this._terminated = true;
                            if (this._initObjs != null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(this._initObjs, null, cb));
                            }
                        };
                        Traversal.prototype.exec = function (origins, resolver, callback) {
                            if (this._initObjs == null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(origins, resolver, callback));
                            }
                        };
                        Traversal.TERMINATED_MESSAGE = "Traversal is terminated by the call of done method, please create another promise";
                        return Traversal;
                    })();
                    impl.Traversal = Traversal;
                    var TraversalContext = (function () {
                        function TraversalContext(_inputs, _resolver, p_finalCallback) {
                            this._inputs = _inputs;
                            this._resolver = _resolver;
                            this._finalCallback = p_finalCallback;
                        }
                        TraversalContext.prototype.inputObjects = function () {
                            return this._inputs;
                        };
                        TraversalContext.prototype.setInputObjects = function (p_newSet) {
                            this._inputs = p_newSet;
                        };
                        TraversalContext.prototype.indexResolver = function () {
                            return this._resolver;
                        };
                        TraversalContext.prototype.finalCallback = function () {
                            return this._finalCallback;
                        };
                        return TraversalContext;
                    })();
                    impl.TraversalContext = TraversalContext;
                    var actions;
                    (function (actions) {
                        var DeepCollectAction = (function () {
                            function DeepCollectAction(p_reference, p_continueCondition) {
                                this._alreadyPassed = null;
                                this._finalElements = null;
                                this._reference = p_reference;
                                this._continueCondition = p_continueCondition;
                            }
                            DeepCollectAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            DeepCollectAction.prototype.execute = function (context) {
                                var _this = this;
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    this._alreadyPassed = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this._finalElements = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    var filtered_inputs = new Array();
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (this._continueCondition == null || this._continueCondition(context.inputObjects()[i])) {
                                            filtered_inputs[i] = context.inputObjects()[i];
                                            this._alreadyPassed.put(context.inputObjects()[i].uuid(), context.inputObjects()[i]);
                                        }
                                    }
                                    var iterationCallbacks = new Array();
                                    iterationCallbacks[0] = function (traversed) {
                                        var filtered_inputs2 = new Array();
                                        var nbSize = 0;
                                        for (var i = 0; i < traversed.length; i++) {
                                            if ((_this._continueCondition == null || _this._continueCondition(traversed[i])) && !_this._alreadyPassed.contains(traversed[i].uuid())) {
                                                filtered_inputs2[i] = traversed[i];
                                                _this._alreadyPassed.put(traversed[i].uuid(), traversed[i]);
                                                _this._finalElements.put(traversed[i].uuid(), traversed[i]);
                                                nbSize++;
                                            }
                                        }
                                        if (nbSize > 0) {
                                            _this.executeStep(filtered_inputs2, iterationCallbacks[0]);
                                        }
                                        else {
                                            var trimmed = new Array();
                                            var nbInserted = new Int32Array([0]);
                                            _this._finalElements.each(function (key, value) {
                                                trimmed[nbInserted[0]] = value;
                                                nbInserted[0]++;
                                            });
                                            if (_this._next == null) {
                                                context.finalCallback()(trimmed);
                                            }
                                            else {
                                                context.setInputObjects(trimmed);
                                                _this._next.execute(context);
                                            }
                                        }
                                    };
                                    this.executeStep(filtered_inputs, iterationCallbacks[0]);
                                }
                            };
                            DeepCollectAction.prototype.executeStep = function (p_inputStep, private_callback) {
                                var currentObject = null;
                                var nextIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                for (var i = 0; i < p_inputStep.length; i++) {
                                    if (p_inputStep[i] != null) {
                                        try {
                                            var loopObj = p_inputStep[i];
                                            currentObject = loopObj;
                                            var raw = loopObj._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._reference == null) {
                                                    var metaElements = loopObj.metaClass().metaElements();
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] != null && metaElements[j].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                            var resolved = raw.getLongArray(metaElements[j].index(), loopObj.metaClass());
                                                            if (resolved != null) {
                                                                for (var k = 0; k < resolved.length; k++) {
                                                                    nextIds.put(resolved[k], resolved[k]);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedRef = loopObj.internal_transpose_ref(this._reference);
                                                    if (translatedRef != null) {
                                                        var resolved = raw.getLongArray(translatedRef.index(), loopObj.metaClass());
                                                        if (resolved != null) {
                                                            for (var j = 0; j < resolved.length; j++) {
                                                                nextIds.put(resolved[j], resolved[j]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                }
                                var trimmed = new Float64Array(nextIds.size());
                                var inserted = new Int32Array([0]);
                                nextIds.each(function (key, value) {
                                    trimmed[inserted[0]] = key;
                                    inserted[0]++;
                                });
                                currentObject._manager.lookupAllObjects(currentObject.universe(), currentObject.now(), trimmed, function (kObjects) {
                                    private_callback(kObjects);
                                });
                            };
                            return DeepCollectAction;
                        })();
                        actions.DeepCollectAction = DeepCollectAction;
                        var FilterAction = (function () {
                            function FilterAction(p_filter) {
                                this._filter = p_filter;
                            }
                            FilterAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterAction.prototype.execute = function (context) {
                                var selectedIndex = new Array();
                                var selected = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    try {
                                        if (this._filter(context.inputObjects()[i])) {
                                            selectedIndex[i] = true;
                                            selected++;
                                        }
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof java.lang.Exception) {
                                            var e = $ex$;
                                            e.printStackTrace();
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                                var nextStepElement = new Array();
                                var inserted = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (selectedIndex[i]) {
                                        nextStepElement[inserted] = context.inputObjects()[i];
                                        inserted++;
                                    }
                                }
                                if (this._next == null) {
                                    context.finalCallback()(nextStepElement);
                                }
                                else {
                                    context.setInputObjects(nextStepElement);
                                    this._next.execute(context);
                                }
                            };
                            return FilterAction;
                        })();
                        actions.FilterAction = FilterAction;
                        var FilterAttributeAction = (function () {
                            function FilterAttributeAction(p_attribute, p_expectedValue) {
                                this._attribute = p_attribute;
                                this._expectedValue = p_expectedValue;
                            }
                            FilterAttributeAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterAttributeAction.prototype.execute = function (context) {
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var selectedIndexes = new Array();
                                    var nbSelected = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = (loopObj)._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._attribute == null) {
                                                    if (this._expectedValue == null) {
                                                        selectedIndexes[i] = true;
                                                        nbSelected++;
                                                    }
                                                    else {
                                                        var addToNext = false;
                                                        var metaElements = loopObj.metaClass().metaElements();
                                                        for (var j = 0; j < metaElements.length; j++) {
                                                            if (metaElements[j] instanceof org.kevoree.modeling.meta.impl.MetaAttribute) {
                                                                var resolved = raw.getPrimitiveType(metaElements[j].index(), loopObj.metaClass());
                                                                if (resolved == null) {
                                                                    if (this._expectedValue.toString().equals("*")) {
                                                                        addToNext = true;
                                                                    }
                                                                }
                                                                else {
                                                                    if (resolved.equals(this._expectedValue)) {
                                                                        addToNext = true;
                                                                    }
                                                                    else {
                                                                        if (resolved.toString().matches(this._expectedValue.toString().replace("*", ".*"))) {
                                                                            addToNext = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (addToNext) {
                                                            selectedIndexes[i] = true;
                                                            nbSelected++;
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedAtt = loopObj.internal_transpose_att(this._attribute);
                                                    if (translatedAtt != null) {
                                                        var resolved = raw.getPrimitiveType(translatedAtt.index(), loopObj.metaClass());
                                                        if (this._expectedValue == null) {
                                                            if (resolved == null) {
                                                                selectedIndexes[i] = true;
                                                                nbSelected++;
                                                            }
                                                        }
                                                        else {
                                                            if (resolved == null) {
                                                                if (this._expectedValue.toString().equals("*")) {
                                                                    selectedIndexes[i] = true;
                                                                    nbSelected++;
                                                                }
                                                            }
                                                            else {
                                                                if (resolved.equals(this._expectedValue)) {
                                                                    selectedIndexes[i] = true;
                                                                    nbSelected++;
                                                                }
                                                                else {
                                                                    if (resolved.toString().matches(this._expectedValue.toString().replace("*", ".*"))) {
                                                                        selectedIndexes[i] = true;
                                                                        nbSelected++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                System.err.println("WARN: Empty KObject " + loopObj.uuid());
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var nextStepElement = new Array();
                                    var inserted = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (selectedIndexes[i]) {
                                            nextStepElement[inserted] = context.inputObjects()[i];
                                            inserted++;
                                        }
                                    }
                                    if (this._next == null) {
                                        context.finalCallback()(nextStepElement);
                                    }
                                    else {
                                        context.setInputObjects(nextStepElement);
                                        this._next.execute(context);
                                    }
                                }
                            };
                            return FilterAttributeAction;
                        })();
                        actions.FilterAttributeAction = FilterAttributeAction;
                        var FilterAttributeQueryAction = (function () {
                            function FilterAttributeQueryAction(p_attributeQuery) {
                                this._attributeQuery = p_attributeQuery;
                            }
                            FilterAttributeQueryAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterAttributeQueryAction.prototype.execute = function (context) {
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var selectedIndexes = new Array();
                                    var nbSelected = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            if (this._attributeQuery == null) {
                                                selectedIndexes[i] = true;
                                                nbSelected++;
                                            }
                                            else {
                                                var metaElements = loopObj.metaClass().metaElements();
                                                var params = this.buildParams(this._attributeQuery);
                                                var selectedForNext = [true];
                                                params.each(function (key, param) {
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] instanceof org.kevoree.modeling.meta.impl.MetaAttribute) {
                                                            var metaAttribute = metaElements[j];
                                                            if (metaAttribute.metaName().matches("^" + param.name() + "$")) {
                                                                var o_raw = loopObj.get(metaAttribute);
                                                                if (o_raw != null) {
                                                                    if (param.value().equals("null")) {
                                                                        if (!param.isNegative()) {
                                                                            selectedForNext[0] = false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if (o_raw.toString().matches("^" + param.value() + "$")) {
                                                                            if (param.isNegative()) {
                                                                                selectedForNext[0] = false;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if (!param.isNegative()) {
                                                                                selectedForNext[0] = false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    if (param.value().equals("null") || param.value().equals("*")) {
                                                                        if (param.isNegative()) {
                                                                            selectedForNext[0] = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                });
                                                if (selectedForNext[0]) {
                                                    selectedIndexes[i] = true;
                                                    nbSelected++;
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var nextStepElement = new Array();
                                    var inserted = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (selectedIndexes[i]) {
                                            nextStepElement[inserted] = context.inputObjects()[i];
                                            inserted++;
                                        }
                                    }
                                    if (this._next == null) {
                                        context.finalCallback()(nextStepElement);
                                    }
                                    else {
                                        context.setInputObjects(nextStepElement);
                                        this._next.execute(context);
                                    }
                                }
                            };
                            FilterAttributeQueryAction.prototype.buildParams = function (p_paramString) {
                                var params = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                var iParam = 0;
                                var lastStart = iParam;
                                while (iParam < p_paramString.length) {
                                    if (p_paramString.charAt(iParam) == ',') {
                                        var p = p_paramString.substring(lastStart, iParam).trim();
                                        if (!p.equals("") && !p.equals("*")) {
                                            if (p.endsWith("=")) {
                                                p = p + "*";
                                            }
                                            var pArray = p.split("=");
                                            var pObject;
                                            if (pArray.length > 1) {
                                                var paramKey = pArray[0].trim();
                                                var negative = paramKey.endsWith("!");
                                                pObject = new org.kevoree.modeling.traversal.impl.actions.FilterAttributeQueryAction.QueryParam(paramKey.replace("!", "").replace("*", ".*"), pArray[1].trim().replace("*", ".*"), negative);
                                                params.put(pObject.name(), pObject);
                                            }
                                        }
                                        lastStart = iParam + 1;
                                    }
                                    iParam = iParam + 1;
                                }
                                var lastParam = p_paramString.substring(lastStart, iParam).trim();
                                if (!lastParam.equals("") && !lastParam.equals("*")) {
                                    if (lastParam.endsWith("=")) {
                                        lastParam = lastParam + "*";
                                    }
                                    var pArray = lastParam.split("=");
                                    var pObject;
                                    if (pArray.length > 1) {
                                        var paramKey = pArray[0].trim();
                                        var negative = paramKey.endsWith("!");
                                        pObject = new org.kevoree.modeling.traversal.impl.actions.FilterAttributeQueryAction.QueryParam(paramKey.replace("!", "").replace("*", ".*"), pArray[1].trim().replace("*", ".*"), negative);
                                        params.put(pObject.name(), pObject);
                                    }
                                }
                                return params;
                            };
                            return FilterAttributeQueryAction;
                        })();
                        actions.FilterAttributeQueryAction = FilterAttributeQueryAction;
                        var FilterAttributeQueryAction;
                        (function (FilterAttributeQueryAction) {
                            var QueryParam = (function () {
                                function QueryParam(p_name, p_value, p_negative) {
                                    this._name = p_name;
                                    this._value = p_value;
                                    this._negative = p_negative;
                                }
                                QueryParam.prototype.name = function () {
                                    return this._name;
                                };
                                QueryParam.prototype.value = function () {
                                    return this._value;
                                };
                                QueryParam.prototype.isNegative = function () {
                                    return this._negative;
                                };
                                return QueryParam;
                            })();
                            FilterAttributeQueryAction.QueryParam = QueryParam;
                        })(FilterAttributeQueryAction = actions.FilterAttributeQueryAction || (actions.FilterAttributeQueryAction = {}));
                        var FilterNotAttributeAction = (function () {
                            function FilterNotAttributeAction(p_attribute, p_expectedValue) {
                                this._attribute = p_attribute;
                                this._expectedValue = p_expectedValue;
                            }
                            FilterNotAttributeAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterNotAttributeAction.prototype.execute = function (context) {
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var selectedIndexes = new Array();
                                    var nbSelected = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = loopObj._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._attribute == null) {
                                                    if (this._expectedValue == null) {
                                                        selectedIndexes[i] = true;
                                                        nbSelected++;
                                                    }
                                                    else {
                                                        var addToNext = true;
                                                        var metaElements = loopObj.metaClass().metaElements();
                                                        for (var j = 0; j < metaElements.length; j++) {
                                                            if (metaElements[j] instanceof org.kevoree.modeling.meta.impl.MetaAttribute) {
                                                                var ref = metaElements[j];
                                                                var resolved = raw.getPrimitiveType(ref.index(), loopObj.metaClass());
                                                                if (resolved == null) {
                                                                    if (this._expectedValue.toString().equals("*")) {
                                                                        addToNext = false;
                                                                    }
                                                                }
                                                                else {
                                                                    if (resolved.equals(this._expectedValue)) {
                                                                        addToNext = false;
                                                                    }
                                                                    else {
                                                                        if (resolved.toString().matches(this._expectedValue.toString().replace("*", ".*"))) {
                                                                            addToNext = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (addToNext) {
                                                            selectedIndexes[i] = true;
                                                            nbSelected++;
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedAtt = loopObj.internal_transpose_att(this._attribute);
                                                    if (translatedAtt != null) {
                                                        var resolved = raw.getPrimitiveType(translatedAtt.index(), loopObj.metaClass());
                                                        if (this._expectedValue == null) {
                                                            if (resolved != null) {
                                                                selectedIndexes[i] = true;
                                                                nbSelected++;
                                                            }
                                                        }
                                                        else {
                                                            if (resolved == null) {
                                                                if (!this._expectedValue.toString().equals("*")) {
                                                                    selectedIndexes[i] = true;
                                                                    nbSelected++;
                                                                }
                                                            }
                                                            else {
                                                                if (resolved.equals(this._expectedValue)) {
                                                                }
                                                                else {
                                                                    if (resolved.toString().matches(this._expectedValue.toString().replace("*", ".*"))) {
                                                                    }
                                                                    else {
                                                                        selectedIndexes[i] = true;
                                                                        nbSelected++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                System.err.println("WARN: Empty KObject " + loopObj.uuid());
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var nextStepElement = new Array();
                                    var inserted = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (selectedIndexes[i]) {
                                            nextStepElement[inserted] = context.inputObjects()[i];
                                            inserted++;
                                        }
                                    }
                                    if (this._next == null) {
                                        context.finalCallback()(nextStepElement);
                                    }
                                    else {
                                        context.setInputObjects(nextStepElement);
                                        this._next.execute(context);
                                    }
                                }
                            };
                            return FilterNotAttributeAction;
                        })();
                        actions.FilterNotAttributeAction = FilterNotAttributeAction;
                        var MapAction = (function () {
                            function MapAction(p_attribute) {
                                this._attribute = p_attribute;
                            }
                            MapAction.prototype.chain = function (next) {
                            };
                            MapAction.prototype.execute = function (context) {
                                var selected = new Array();
                                var nbElem = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (context.inputObjects()[i] != null) {
                                        var resolved = context.inputObjects()[i].get(this._attribute);
                                        if (resolved != null) {
                                            selected[i] = resolved;
                                            nbElem++;
                                        }
                                    }
                                }
                                var trimmed = new Array();
                                var nbInserted = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (selected[i] != null) {
                                        trimmed[nbInserted] = selected[i];
                                        nbInserted++;
                                    }
                                }
                                if (context.finalCallback() != null) {
                                    context.finalCallback()(trimmed);
                                }
                            };
                            return MapAction;
                        })();
                        actions.MapAction = MapAction;
                        var MathExpressionAction = (function () {
                            function MathExpressionAction(p_expression) {
                                this._expression = p_expression;
                                this._engine = new org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine();
                            }
                            MathExpressionAction.prototype.chain = function (next) {
                            };
                            MathExpressionAction.prototype.execute = function (context) {
                                var selected = new Array();
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (context.inputObjects()[i] != null) {
                                        var finalI = i;
                                        this._engine.setVarResolver(function (potentialVarName) {
                                            if (potentialVarName.equals("PI")) {
                                                return Math.PI;
                                            }
                                            if (potentialVarName.equals("TRUE")) {
                                                return 1.0;
                                            }
                                            if (potentialVarName.equals("FALSE")) {
                                                return 0.0;
                                            }
                                            var resolved = context.inputObjects()[finalI].getByName(potentialVarName);
                                            if (resolved != null) {
                                                if (resolved instanceof org.kevoree.modeling.meta.impl.MetaLiteral) {
                                                    return resolved.index();
                                                }
                                                else {
                                                    var valueString = resolved.toString();
                                                    if (valueString.equals("true")) {
                                                        return 1.0;
                                                    }
                                                    else {
                                                        if (valueString.equals("false")) {
                                                            return 0.0;
                                                        }
                                                        else {
                                                            try {
                                                                return java.lang.Double.parseDouble(resolved.toString());
                                                            }
                                                            catch ($ex$) {
                                                                if ($ex$ instanceof java.lang.Exception) {
                                                                    var e = $ex$;
                                                                }
                                                                else {
                                                                    throw $ex$;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return null;
                                        });
                                        selected[finalI] = this._engine.eval(this._expression);
                                    }
                                }
                                if (context.finalCallback() != null) {
                                    context.finalCallback()(selected);
                                }
                            };
                            return MathExpressionAction;
                        })();
                        actions.MathExpressionAction = MathExpressionAction;
                        var RemoveDuplicateAction = (function () {
                            function RemoveDuplicateAction() {
                            }
                            RemoveDuplicateAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            RemoveDuplicateAction.prototype.execute = function (context) {
                                var elems = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(context.inputObjects().length, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    elems.put(context.inputObjects()[i].uuid(), context.inputObjects()[i]);
                                }
                                var trimmed = new Array();
                                var nbInserted = new Int32Array([0]);
                                elems.each(function (key, value) {
                                    trimmed[nbInserted[0]] = value;
                                    nbInserted[0]++;
                                });
                                if (this._next == null) {
                                    context.finalCallback()(trimmed);
                                }
                                else {
                                    context.setInputObjects(trimmed);
                                    this._next.execute(context);
                                }
                            };
                            return RemoveDuplicateAction;
                        })();
                        actions.RemoveDuplicateAction = RemoveDuplicateAction;
                        var TraverseAction = (function () {
                            function TraverseAction(p_reference) {
                                this._reference = p_reference;
                            }
                            TraverseAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseAction.prototype.execute = function (context) {
                                var _this = this;
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var currentObject = context.inputObjects()[0];
                                    var nextIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = currentObject._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._reference == null) {
                                                    var metaElements = loopObj.metaClass().metaElements();
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] != null && metaElements[j].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                            var ref = metaElements[j];
                                                            var resolved = raw.getLongArray(ref.index(), currentObject.metaClass());
                                                            if (resolved != null) {
                                                                for (var k = 0; k < resolved.length; k++) {
                                                                    nextIds.put(resolved[k], resolved[k]);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedRef = loopObj.internal_transpose_ref(this._reference);
                                                    if (translatedRef != null) {
                                                        var resolved = raw.getLongArray(translatedRef.index(), currentObject.metaClass());
                                                        if (resolved != null) {
                                                            for (var j = 0; j < resolved.length; j++) {
                                                                nextIds.put(resolved[j], resolved[j]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var trimmed = new Float64Array(nextIds.size());
                                    var inserted = new Int32Array([0]);
                                    nextIds.each(function (key, value) {
                                        trimmed[inserted[0]] = key;
                                        inserted[0]++;
                                    });
                                    currentObject._manager.lookupAllObjects(currentObject.universe(), currentObject.now(), trimmed, function (kObjects) {
                                        if (_this._next == null) {
                                            context.finalCallback()(kObjects);
                                        }
                                        else {
                                            context.setInputObjects(kObjects);
                                            _this._next.execute(context);
                                        }
                                    });
                                }
                            };
                            return TraverseAction;
                        })();
                        actions.TraverseAction = TraverseAction;
                        var TraverseIndexAction = (function () {
                            function TraverseIndexAction(p_indexName) {
                                this._indexName = p_indexName;
                            }
                            TraverseIndexAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseIndexAction.prototype.execute = function (context) {
                                var _this = this;
                                if (this._indexName.equals("root")) {
                                    if (context.inputObjects().length > 0) {
                                        context.inputObjects()[0].manager().getRoot(context.inputObjects()[0].universe(), context.inputObjects()[0].now(), function (root) {
                                            var selectedElems = new Array();
                                            selectedElems[0] = root;
                                            if (_this._next == null) {
                                                context.finalCallback()(selectedElems);
                                            }
                                            else {
                                                context.setInputObjects(selectedElems);
                                                _this._next.execute(context);
                                            }
                                        });
                                    }
                                }
                                else {
                                    var resolver = context.indexResolver();
                                    if (resolver != null) {
                                        var resolved = resolver(this._indexName);
                                        if (resolved != null) {
                                            if (this._next == null) {
                                                context.finalCallback()(resolved);
                                            }
                                            else {
                                                context.setInputObjects(resolved);
                                                this._next.execute(context);
                                            }
                                        }
                                    }
                                    else {
                                        if (this._next == null) {
                                            context.finalCallback()(context.inputObjects());
                                        }
                                        else {
                                            this._next.execute(context);
                                        }
                                    }
                                }
                            };
                            return TraverseIndexAction;
                        })();
                        actions.TraverseIndexAction = TraverseIndexAction;
                        var TraverseQueryAction = (function () {
                            function TraverseQueryAction(p_referenceQuery) {
                                this.SEP = ",";
                                this._referenceQuery = p_referenceQuery;
                            }
                            TraverseQueryAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseQueryAction.prototype.execute = function (context) {
                                var _this = this;
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var currentFirstObject = context.inputObjects()[0];
                                    var nextIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = loopObj._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            var metaElements = loopObj.metaClass().metaElements();
                                            if (raw != null) {
                                                if (this._referenceQuery == null) {
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] != null && metaElements[j].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                            var resolved = raw.getLongArray(metaElements[j].index(), loopObj.metaClass());
                                                            if (resolved != null) {
                                                                for (var k = 0; k < resolved.length; k++) {
                                                                    var idResolved = resolved[k];
                                                                    nextIds.put(idResolved, idResolved);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    var queries = this._referenceQuery.split(this.SEP);
                                                    for (var k = 0; k < queries.length; k++) {
                                                        queries[k] = queries[k].replace("*", ".*");
                                                    }
                                                    for (var h = 0; h < metaElements.length; h++) {
                                                        if (metaElements[h] != null && metaElements[h].metaType() == org.kevoree.modeling.meta.MetaType.REFERENCE) {
                                                            var metaReference = metaElements[h];
                                                            var selected = false;
                                                            for (var k = 0; k < queries.length; k++) {
                                                                if (queries[k] != null && queries[k].trim().startsWith("<<")) {
                                                                    if (metaReference.opposite().metaName().matches(queries[k].trim().substring(2))) {
                                                                        selected = true;
                                                                        break;
                                                                    }
                                                                }
                                                                else {
                                                                    if (metaReference.metaName().matches("^" + queries[k] + "$")) {
                                                                        selected = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (selected) {
                                                                var resolved = raw.getLongArray(metaElements[h].index(), loopObj.metaClass());
                                                                if (resolved != null) {
                                                                    for (var j = 0; j < resolved.length; j++) {
                                                                        nextIds.put(resolved[j], resolved[j]);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof java.lang.Exception) {
                                                var e = $ex$;
                                                e.printStackTrace();
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var trimmed = new Float64Array(nextIds.size());
                                    var inserted = new Int32Array([0]);
                                    nextIds.each(function (key, value) {
                                        trimmed[inserted[0]] = key;
                                        inserted[0]++;
                                    });
                                    currentFirstObject._manager.lookupAllObjects(currentFirstObject.universe(), currentFirstObject.now(), trimmed, function (nextStepElement) {
                                        if (_this._next == null) {
                                            context.finalCallback()(nextStepElement);
                                        }
                                        else {
                                            context.setInputObjects(nextStepElement);
                                            _this._next.execute(context);
                                        }
                                    });
                                }
                            };
                            return TraverseQueryAction;
                        })();
                        actions.TraverseQueryAction = TraverseQueryAction;
                        var TraverseTimeAction = (function () {
                            function TraverseTimeAction(p_timeOffset, p_steps, p_continueCondition) {
                                this._timeOffset = p_timeOffset;
                                this._steps = p_steps;
                                this._continueContition = p_continueCondition;
                            }
                            TraverseTimeAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseTimeAction.prototype.execute = function (context) {
                                throw new java.lang.RuntimeException("Not implemented Yet!");
                            };
                            return TraverseTimeAction;
                        })();
                        actions.TraverseTimeAction = TraverseTimeAction;
                    })(actions = impl.actions || (impl.actions = {}));
                })(impl = traversal_1.impl || (traversal_1.impl = {}));
                var query;
                (function (query_1) {
                    var impl;
                    (function (impl) {
                        var QueryEngine = (function () {
                            function QueryEngine() {
                            }
                            QueryEngine.getINSTANCE = function () {
                                if (QueryEngine.INSTANCE == null) {
                                    QueryEngine.INSTANCE = new org.kevoree.modeling.traversal.query.impl.QueryEngine();
                                }
                                return QueryEngine.INSTANCE;
                            };
                            QueryEngine.prototype.eval = function (query, origins, callback) {
                                if (callback != null) {
                                    this.buildTraversal(query).exec(origins, null, callback);
                                }
                            };
                            QueryEngine.prototype.buildTraversal = function (query) {
                                if (query == null || query.length == 0) {
                                    return null;
                                }
                                else {
                                    var traversal = new org.kevoree.modeling.traversal.impl.Traversal(null);
                                    var i = 0;
                                    var escaped = false;
                                    var previousKQueryStart = 0;
                                    var previousKQueryNameEnd = -1;
                                    var previousKQueryAttributesEnd = -1;
                                    var previousKQueryAttributesStart = 0;
                                    var endEval = false;
                                    while (i < query.length && !endEval) {
                                        var notLastElem = (i + 1) != query.length;
                                        if (escaped && notLastElem) {
                                            escaped = false;
                                        }
                                        else {
                                            var currentChar = query.charAt(i);
                                            if (currentChar == QueryEngine.CLOSE_BRACKET && notLastElem) {
                                                previousKQueryAttributesEnd = i;
                                            }
                                            else {
                                                if (currentChar == '\\' && notLastElem) {
                                                    escaped = true;
                                                }
                                                else {
                                                    if (currentChar == QueryEngine.OPEN_BRACKET && notLastElem) {
                                                        previousKQueryNameEnd = i;
                                                        previousKQueryAttributesStart = i + 1;
                                                    }
                                                    else {
                                                        if (currentChar == QueryEngine.PIPE_SEP || !notLastElem) {
                                                            var relationName;
                                                            var atts = null;
                                                            if (previousKQueryNameEnd == -1) {
                                                                if (notLastElem) {
                                                                    previousKQueryNameEnd = i;
                                                                }
                                                                else {
                                                                    previousKQueryNameEnd = i + 1;
                                                                }
                                                            }
                                                            else {
                                                                if (previousKQueryAttributesStart != -1) {
                                                                    if (previousKQueryAttributesEnd == -1) {
                                                                        if (notLastElem || currentChar == QueryEngine.PIPE_SEP || currentChar == QueryEngine.CLOSE_BRACKET) {
                                                                            previousKQueryAttributesEnd = i;
                                                                        }
                                                                        else {
                                                                            previousKQueryAttributesEnd = i + 1;
                                                                        }
                                                                    }
                                                                    atts = query.substring(previousKQueryAttributesStart, previousKQueryAttributesEnd);
                                                                    if (atts.length == 0) {
                                                                        atts = null;
                                                                    }
                                                                }
                                                            }
                                                            relationName = query.substring(previousKQueryStart, previousKQueryNameEnd).trim();
                                                            if (relationName.startsWith("@")) {
                                                                traversal = traversal.traverseIndex(relationName.substring(1));
                                                            }
                                                            else {
                                                                if (relationName.startsWith("=")) {
                                                                    traversal.eval(relationName.substring(1), null);
                                                                    endEval = true;
                                                                }
                                                                else {
                                                                    if (relationName.startsWith(">>")) {
                                                                        traversal = traversal.traverseQuery(relationName.substring(2));
                                                                        if (atts != null) {
                                                                            traversal = traversal.attributeQuery(atts);
                                                                        }
                                                                    }
                                                                    else {
                                                                        if (relationName.startsWith("<<")) {
                                                                            traversal = traversal.traverseQuery(relationName);
                                                                            if (atts != null) {
                                                                                traversal = traversal.attributeQuery(atts);
                                                                            }
                                                                        }
                                                                        else {
                                                                            traversal = traversal.traverseQuery(relationName);
                                                                            if (atts != null) {
                                                                                traversal = traversal.attributeQuery(atts);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            previousKQueryStart = i + 1;
                                                            previousKQueryNameEnd = -1;
                                                            previousKQueryAttributesEnd = -1;
                                                            previousKQueryAttributesStart = -1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        i = i + 1;
                                    }
                                    return traversal;
                                }
                            };
                            QueryEngine.INSTANCE = null;
                            QueryEngine.OPEN_BRACKET = '[';
                            QueryEngine.CLOSE_BRACKET = ']';
                            QueryEngine.PIPE_SEP = '|';
                            return QueryEngine;
                        })();
                        impl.QueryEngine = QueryEngine;
                    })(impl = query_1.impl || (query_1.impl = {}));
                })(query = traversal_1.query || (traversal_1.query = {}));
                var visitor;
                (function (visitor) {
                    var KVisitResult = (function () {
                        function KVisitResult() {
                        }
                        KVisitResult.prototype.equals = function (other) {
                            return this == other;
                        };
                        KVisitResult.values = function () {
                            return KVisitResult._KVisitResultVALUES;
                        };
                        KVisitResult.CONTINUE = new KVisitResult();
                        KVisitResult.SKIP = new KVisitResult();
                        KVisitResult.STOP = new KVisitResult();
                        KVisitResult._KVisitResultVALUES = [
                            KVisitResult.CONTINUE,
                            KVisitResult.SKIP,
                            KVisitResult.STOP
                        ];
                        return KVisitResult;
                    })();
                    visitor.KVisitResult = KVisitResult;
                })(visitor = traversal_1.visitor || (traversal_1.visitor = {}));
            })(traversal = modeling.traversal || (modeling.traversal = {}));
            var util;
            (function (util) {
                var Checker = (function () {
                    function Checker() {
                    }
                    Checker.isDefined = function (param) {
                        return param != undefined && param != null;
                    };
                    return Checker;
                })();
                util.Checker = Checker;
                var maths;
                (function (maths) {
                    var Base64 = (function () {
                        function Base64() {
                        }
                        Base64.encodeLong = function (l) {
                            var result = "";
                            var tmp = l;
                            if (l < 0) {
                                tmp = -tmp;
                            }
                            for (var i = 47; i >= 5; i -= 6) {
                                if (!(result.equals("") && ((tmp / Math.pow(2, i)) & 0x3F) == 0)) {
                                    result += Base64.encodeArray[(tmp / Math.pow(2, i)) & 0x3F];
                                }
                            }
                            result += Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)];
                            return result;
                        };
                        Base64.encodeLongToBuffer = function (l, buffer) {
                            var empty = true;
                            var tmp = l;
                            if (l < 0) {
                                tmp = -tmp;
                            }
                            for (var i = 47; i >= 5; i -= 6) {
                                if (!(empty && ((tmp / Math.pow(2, i)) & 0x3F) == 0)) {
                                    empty = false;
                                    buffer.append(Base64.encodeArray[(tmp / Math.pow(2, i)) & 0x3F]);
                                }
                            }
                            buffer.append(Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)]);
                        };
                        Base64.encodeInt = function (l) {
                            var result = "";
                            var tmp = l;
                            if (l < 0) {
                                tmp = -tmp;
                            }
                            for (var i = 29; i >= 5; i -= 6) {
                                if (!(result.equals("") && ((tmp / Math.pow(2, i)) & 0x3F) == 0)) {
                                    result += Base64.encodeArray[(tmp / Math.pow(2, i)) & 0x3F];
                                }
                            }
                            result += Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)];
                            return result;
                        };
                        Base64.encodeIntToBuffer = function (l, buffer) {
                            var empty = true;
                            var tmp = l;
                            if (l < 0) {
                                tmp = -tmp;
                            }
                            for (var i = 29; i >= 5; i -= 6) {
                                if (!(empty && ((tmp / Math.pow(2, i)) & 0x3F) == 0)) {
                                    empty = false;
                                    buffer.append(Base64.encodeArray[(tmp / Math.pow(2, i)) & 0x3F]);
                                }
                            }
                            buffer.append(Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)]);
                        };
                        Base64.decodeToLong = function (s) {
                            return Base64.decodeToLongWithBounds(s, 0, s.length);
                        };
                        Base64.decodeToLongWithBounds = function (s, offsetBegin, offsetEnd) {
                            var result = 0;
                            result += (Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) / 2;
                            for (var i = 1; i < (offsetEnd - offsetBegin); i++) {
                                result += (Base64.decodeArray[s.charAt((offsetEnd - 1) - i)] & 0xFF) * Math.pow(2, (6 * i) - 1);
                            }
                            if (((Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) & 0x1) != 0) {
                                result = -result;
                            }
                            return result;
                        };
                        Base64.decodeToInt = function (s) {
                            return Base64.decodeToIntWithBounds(s, 0, s.length);
                        };
                        Base64.decodeToIntWithBounds = function (s, offsetBegin, offsetEnd) {
                            var result = 0;
                            result += (Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) / 2;
                            for (var i = 1; i < (offsetEnd - offsetBegin); i++) {
                                result += (Base64.decodeArray[s.charAt((offsetEnd - 1) - i)] & 0xFF) * Math.pow(2, (6 * i) - 1);
                            }
                            if (((Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) & 0x1) != 0) {
                                result = -result;
                            }
                            return result;
                        };
                        Base64.encodeDouble = function (d) {
                            var result = "";
                            var float = new Float64Array(1);
                            var bytes = new Uint8Array(float.buffer);
                            float[0] = d;
                            var exponent = ((bytes[7] & 0x7f) << 4 | bytes[6] >> 4) - 0x3ff;
                            var signAndExp = (((bytes[7] >> 7) & 0x1) << 11) + (exponent + 1023);
                            //encode sign + exp
                            result += Base64.encodeArray[(signAndExp >> 6) & 0x3F];
                            result += Base64.encodeArray[signAndExp & 0x3F];
                            result += Base64.encodeArray[bytes[6] & 0x0F];
                            result += Base64.encodeArray[(bytes[5] >> 2) & 0x3F];
                            result += Base64.encodeArray[(bytes[5] & 0x3) << 4 | bytes[4] >> 4];
                            result += Base64.encodeArray[(bytes[4] & 0x0F) << 2 | bytes[3] >> 6];
                            result += Base64.encodeArray[(bytes[3] & 0x3F)];
                            result += Base64.encodeArray[(bytes[2] >> 2) & 0x3F];
                            result += Base64.encodeArray[(bytes[2] & 0x3) << 4 | bytes[1] >> 4];
                            result += Base64.encodeArray[(bytes[1] & 0x0F) << 2 | bytes[0] >> 6];
                            result += Base64.encodeArray[(bytes[0] & 0x3F)];
                            var i = result.length - 1;
                            while (i >= 3 && result.charAt(i) == 'A') {
                                i--;
                            }
                            return result.substr(0, i + 1);
                        };
                        Base64.encodeDoubleToBuffer = function (d, buffer) {
                            var result = "";
                            var float = new Float64Array(1);
                            var bytes = new Uint8Array(float.buffer);
                            float[0] = d;
                            var exponent = ((bytes[7] & 0x7f) << 4 | bytes[6] >> 4) - 0x3ff;
                            var signAndExp = (((bytes[7] >> 7) & 0x1) << 11) + (exponent + 1023);
                            //encode sign + exp
                            result += Base64.encodeArray[(signAndExp >> 6) & 0x3F];
                            result += Base64.encodeArray[signAndExp & 0x3F];
                            result += Base64.encodeArray[bytes[6] & 0x0F];
                            result += Base64.encodeArray[(bytes[5] >> 2) & 0x3F];
                            result += Base64.encodeArray[(bytes[5] & 0x3) << 4 | bytes[4] >> 4];
                            result += Base64.encodeArray[(bytes[4] & 0x0F) << 2 | bytes[3] >> 6];
                            result += Base64.encodeArray[(bytes[3] & 0x3F)];
                            result += Base64.encodeArray[(bytes[2] >> 2) & 0x3F];
                            result += Base64.encodeArray[(bytes[2] & 0x3) << 4 | bytes[1] >> 4];
                            result += Base64.encodeArray[(bytes[1] & 0x0F) << 2 | bytes[0] >> 6];
                            result += Base64.encodeArray[(bytes[0] & 0x3F)];
                            var i = result.length - 1;
                            while (i >= 3 && result.charAt(i) == 'A') {
                                i--;
                            }
                            buffer.append(result);
                        };
                        Base64.decodeToDouble = function (s) {
                            return Base64.decodeToDoubleWithBounds(s, 0, s.length);
                        };
                        Base64.decodeToDoubleWithBounds = function (s, offsetBegin, offsetEnd) {
                            var signAndExp = ((Base64.decodeArray[s.charAt(0)] & 0xFF) * Math.pow(2, 6)) + (Base64.decodeArray[s.charAt(1)] & 0xFF);
                            var sign = ((signAndExp & 0x800) != 0 ? -1 : 1);
                            var exp = signAndExp & 0x7FF;
                            //Mantisse
                            var mantissaBits = 0;
                            for (var i = 2; i < (offsetEnd - offsetBegin); i++) {
                                mantissaBits += (Base64.decodeArray[s.charAt(offsetBegin + i)] & 0xFF) * Math.pow(2, (48 - (6 * (i - 2))));
                            }
                            return (exp != 0) ? sign * Math.pow(2, exp - 1023) * (1 + (mantissaBits / Math.pow(2, 52))) : sign * Math.pow(2, -1022) * (0 + (mantissaBits / Math.pow(2, 52)));
                        };
                        Base64.encodeBoolArray = function (boolArr) {
                            var result = "";
                            var tmpVal = 0;
                            for (var i = 0; i < boolArr.length; i++) {
                                tmpVal = tmpVal | ((boolArr[i] ? 1 : 0) * Math.pow(2, i % 6));
                                if (i % 6 == 5 || i == (boolArr.length - 1)) {
                                    result += Base64.encodeArray[tmpVal];
                                    tmpVal = 0;
                                }
                            }
                            return result;
                        };
                        Base64.encodeBoolArrayToBuffer = function (boolArr, buffer) {
                            var tmpVal = 0;
                            for (var i = 0; i < boolArr.length; i++) {
                                tmpVal = tmpVal | ((boolArr[i] ? 1 : 0) * Math.pow(2, i % 6));
                                if (i % 6 == 5 || i == boolArr.length - 1) {
                                    buffer.append(Base64.encodeArray[tmpVal]);
                                    tmpVal = 0;
                                }
                            }
                        };
                        Base64.decodeBoolArray = function (s, arraySize) {
                            return Base64.decodeToBoolArrayWithBounds(s, 0, s.length, arraySize);
                        };
                        Base64.decodeToBoolArrayWithBounds = function (s, offsetBegin, offsetEnd, arraySize) {
                            var resultTmp = [];
                            for (var i = 0; i < (offsetEnd - offsetBegin); i++) {
                                var bitarray = Base64.decodeArray[s.charAt(offsetBegin + i)] & 0xFF;
                                for (var bit_i = 0; bit_i < 6; bit_i++) {
                                    if ((6 * i) + bit_i < arraySize) {
                                        resultTmp[(6 * i) + bit_i] = (bitarray & (1 * Math.pow(2, bit_i))) != 0;
                                    }
                                    else {
                                        break;
                                    }
                                }
                            }
                            return resultTmp;
                        };
                        Base64.encodeArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'];
                        Base64.decodeArray = { "A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5, "G": 6, "H": 7, "I": 8, "J": 9, "K": 10, "L": 11, "M": 12, "N": 13, "O": 14, "P": 15, "Q": 16, "R": 17, "S": 18, "T": 19, "U": 20, "V": 21, "W": 22, "X": 23, "Y": 24, "Z": 25, "a": 26, "b": 27, "c": 28, "d": 29, "e": 30, "f": 31, "g": 32, "h": 33, "i": 34, "j": 35, "k": 36, "l": 37, "m": 38, "n": 39, "o": 40, "p": 41, "q": 42, "r": 43, "s": 44, "t": 45, "u": 46, "v": 47, "w": 48, "x": 49, "y": 50, "z": 51, "0": 52, "1": 53, "2": 54, "3": 55, "4": 56, "5": 57, "6": 58, "7": 59, "8": 60, "9": 61, "+": 62, "/": 63 };
                        return Base64;
                    })();
                    maths.Base64 = Base64;
                    var Correlations = (function () {
                        function Correlations() {
                        }
                        Correlations.pearson = function (x, y) {
                            var meanX = 0.0;
                            var meanY = 0.0;
                            for (var i = 0; i < x.length; i++) {
                                meanX += x[i];
                                meanY += y[i];
                            }
                            meanX /= x.length;
                            meanY /= x.length;
                            var sumXY = 0.0;
                            var sumX2 = 0.0;
                            var sumY2 = 0.0;
                            for (var i = 0; i < x.length; i++) {
                                sumXY += ((x[i] - meanX) * (y[i] - meanY));
                                sumX2 += (x[i] - meanX) * (x[i] - meanX);
                                sumY2 += (y[i] - meanY) * (y[i] - meanY);
                            }
                            return (sumXY / (Math.sqrt(sumX2) * Math.sqrt(sumY2)));
                        };
                        return Correlations;
                    })();
                    maths.Correlations = Correlations;
                    var Distribution = (function () {
                        function Distribution() {
                        }
                        Distribution.inverseNormalCDF = function (q) {
                            var b = new Float64Array([1.570796288, 0.03706987906, -0.8364353589e-3, -0.2250947176e-3, 0.6841218299e-5, 0.5824238515e-5, -0.104527497e-5, 0.8360937017e-7, -0.3231081277e-8, 0.3657763036e-10, 0.6936233982e-12]);
                            if (q < 0.0 || 1.0 < q || q == 0.5) {
                                return 0.0;
                            }
                            var w1 = q;
                            if (q > 0.5) {
                                w1 = 1.0 - q;
                            }
                            var w3 = -Math.log(4.0 * w1 * (1.0 - w1));
                            w1 = b[0];
                            for (var i = 1; i < 11; i++) {
                                w1 += b[i] * Math.pow(w3, i);
                            }
                            return q > 0.5 ? Math.sqrt(w1 * w3) : -Math.sqrt(w1 * w3);
                        };
                        Distribution.gaussian = function (features, means, variances) {
                            var dim = features.length;
                            var p = 1;
                            for (var i = 0; i < dim; i++) {
                                p = p * (1 / Math.sqrt(2 * Math.PI * variances[i])) * Math.exp(-((features[i] - means[i]) * (features[i] - means[i])) / (2 * variances[i]));
                            }
                            return p;
                        };
                        Distribution.gaussianArray = function (features, row, means, variances) {
                            var dim = features.nbColumns();
                            var p = 1;
                            for (var i = 0; i < dim; i++) {
                                p = p * (1 / Math.sqrt(2 * Math.PI * variances[i])) * Math.exp(-((features.get(row, i) - means[i]) * (features.get(row, i) - means[i])) / (2 * variances[i]));
                            }
                            return p;
                        };
                        Distribution.parallelGaussian = function (features, means, variances) {
                            var dim = features.length;
                            var p = new Float64Array(dim);
                            for (var i = 0; i < dim; i++) {
                                p[i] = (1 / Math.sqrt(2 * Math.PI * variances[i])) * Math.exp(-((features[i] - means[i]) * (features[i] - means[i])) / (2 * variances[i]));
                            }
                            return p;
                        };
                        Distribution.gaussianOneFeature = function (feature, mean, variance) {
                            return (1 / Math.sqrt(2 * Math.PI * variance)) * Math.exp(-((feature - mean) * (feature - mean)) / (2 * variance));
                        };
                        return Distribution;
                    })();
                    maths.Distribution = Distribution;
                    var PolynomialFit = (function () {
                        function PolynomialFit(degree) {
                            this.coef = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(degree + 1, 1);
                            this.A = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, degree + 1);
                            this.y = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                            this.solver = new org.kevoree.modeling.util.maths.matrix.solvers.AdjLinearSolverQr();
                        }
                        PolynomialFit.prototype.getCoef = function () {
                            return this.coef.data;
                        };
                        PolynomialFit.prototype.fit = function (samplePoints, observations) {
                            this.y.reshapeBoolean(observations.length, 1, false);
                            System.arraycopy(observations, 0, this.y.data, 0, observations.length);
                            this.A.reshapeBoolean(this.y.numRows, this.coef.numRows, false);
                            for (var i = 0; i < observations.length; i++) {
                                var obs = 1;
                                for (var j = 0; j < this.coef.numRows; j++) {
                                    this.A.cset(i, j, obs);
                                    obs *= samplePoints[i];
                                }
                            }
                            this.solver.setA(this.A);
                            this.solver.solve(this.y, this.coef);
                        };
                        PolynomialFit.extrapolate = function (time, weights) {
                            var result = 0;
                            var power = 1;
                            for (var j = 0; j < weights.length; j++) {
                                result += weights[j] * power;
                                power = power * time;
                            }
                            return result;
                        };
                        return PolynomialFit;
                    })();
                    maths.PolynomialFit = PolynomialFit;
                    var Ranking = (function () {
                        function Ranking() {
                        }
                        Ranking.wilsonRank = function (positive, negative, confidence) {
                            var n = positive + negative;
                            if (n == 0) {
                                return 0.0;
                            }
                            var z = org.kevoree.modeling.util.maths.Distribution.inverseNormalCDF(1.0 - confidence / 2.0);
                            var p_hat = (1.0 * positive) / n;
                            return (p_hat + z * z / (2.0 * n) - z * Math.sqrt((p_hat * (1.0 - p_hat) + z * z / (4.0 * n)) / n)) / (1.0 + z * z / n);
                        };
                        return Ranking;
                    })();
                    maths.Ranking = Ranking;
                    var Statistic = (function () {
                        function Statistic() {
                        }
                        Statistic.calcHistogram = function (data, dataratings, numBins) {
                            var result = new Int32Array(numBins);
                            var max;
                            var min;
                            min = data[0];
                            max = data[0];
                            for (var i = 0; i < data.length; i++) {
                                if (data[i] < min) {
                                    min = data[i];
                                }
                                if (data[i] > max) {
                                    max = data[i];
                                }
                            }
                            var binSize = (max - min) / numBins;
                            for (var i = 0; i < data.length; i++) {
                                var bin = ((data[i] - min) / binSize);
                                result[bin]++;
                            }
                        };
                        return Statistic;
                    })();
                    maths.Statistic = Statistic;
                    var StringDistance = (function () {
                        function StringDistance() {
                        }
                        StringDistance.levenshtein = function (s0, s1) {
                            var len0 = s0.length + 1;
                            var len1 = s1.length + 1;
                            var cost = new Int32Array(len0);
                            var newcost = new Int32Array(len0);
                            for (var i = 0; i < len0; i++) {
                                cost[i] = i;
                            }
                            for (var j = 1; j < len1; j++) {
                                newcost[0] = j;
                                for (var i = 1; i < len0; i++) {
                                    var match = (s0.charAt(i - 1) == s1.charAt(j - 1)) ? 0 : 1;
                                    var cost_replace = cost[i - 1] + match;
                                    var cost_insert = cost[i] + 1;
                                    var cost_delete = newcost[i - 1] + 1;
                                    newcost[i] = Math.min(Math.min(cost_insert, cost_delete), cost_replace);
                                }
                                var swap = cost;
                                cost = newcost;
                                newcost = swap;
                            }
                            return cost[len0 - 1];
                        };
                        return StringDistance;
                    })();
                    maths.StringDistance = StringDistance;
                    var expression;
                    (function (expression_1) {
                        var impl;
                        (function (impl) {
                            var MathEntities = (function () {
                                function MathEntities() {
                                    this.operators = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this.operators.put("+", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("+", 20, true));
                                    this.operators.put("-", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("-", 20, true));
                                    this.operators.put("*", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("*", 30, true));
                                    this.operators.put("/", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("/", 30, true));
                                    this.operators.put("%", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("%", 30, true));
                                    this.operators.put("^", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("^", 40, false));
                                    this.operators.put("&&", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("&&", 4, false));
                                    this.operators.put("||", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("||", 2, false));
                                    this.operators.put(">", new org.kevoree.modeling.util.maths.expression.impl.MathOperation(">", 10, false));
                                    this.operators.put(">=", new org.kevoree.modeling.util.maths.expression.impl.MathOperation(">=", 10, false));
                                    this.operators.put("<", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("<", 10, false));
                                    this.operators.put("<=", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("<=", 10, false));
                                    this.operators.put("==", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("==", 7, false));
                                    this.operators.put("!=", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("!=", 7, false));
                                    this.functions = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this.functions.put("NOT", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("NOT", 1));
                                    this.functions.put("IF", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("IF", 3));
                                    this.functions.put("RAND", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("RAND", 0));
                                    this.functions.put("SIN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("SIN", 1));
                                    this.functions.put("COS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("COS", 1));
                                    this.functions.put("TAN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("TAN", 1));
                                    this.functions.put("ASIN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ASIN", 1));
                                    this.functions.put("ACOS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ACOS", 1));
                                    this.functions.put("ATAN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ATAN", 1));
                                    this.functions.put("MAX", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MAX", 2));
                                    this.functions.put("MIN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MIN", 2));
                                    this.functions.put("ABS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ABS", 1));
                                    this.functions.put("LOG", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("LOG", 1));
                                    this.functions.put("ROUND", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ROUND", 2));
                                    this.functions.put("FLOOR", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("FLOOR", 1));
                                    this.functions.put("CEILING", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("CEILING", 1));
                                    this.functions.put("SQRT", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("SQRT", 1));
                                    this.functions.put("SECONDS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("SECONDS", 1));
                                    this.functions.put("MINUTES", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MINUTES", 1));
                                    this.functions.put("HOURS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("HOURS", 1));
                                    this.functions.put("DAY", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("DAY", 1));
                                    this.functions.put("MONTH", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MONTH", 1));
                                    this.functions.put("YEAR", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("YEAR", 1));
                                    this.functions.put("DAYOFWEEK", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("DAYOFWEEK", 1));
                                }
                                MathEntities.getINSTANCE = function () {
                                    if (MathEntities.INSTANCE == null) {
                                        MathEntities.INSTANCE = new org.kevoree.modeling.util.maths.expression.impl.MathEntities();
                                    }
                                    return MathEntities.INSTANCE;
                                };
                                MathEntities.INSTANCE = null;
                                return MathEntities;
                            })();
                            impl.MathEntities = MathEntities;
                            var MathExpressionEngine = (function () {
                                function MathExpressionEngine() {
                                    this.varResolver = function (potentialVarName) {
                                        if (potentialVarName.equals("PI")) {
                                            return Math.PI;
                                        }
                                        if (potentialVarName.equals("TRUE")) {
                                            return 1.0;
                                        }
                                        if (potentialVarName.equals("FALSE")) {
                                            return 0.0;
                                        }
                                        return null;
                                    };
                                }
                                MathExpressionEngine.isNumber = function (st) {
                                    return !isNaN(+st);
                                };
                                MathExpressionEngine.isDigit = function (c) {
                                    var cc = c.charCodeAt(0);
                                    if (cc >= 0x30 && cc <= 0x39) {
                                        return true;
                                    }
                                    return false;
                                };
                                MathExpressionEngine.isLetter = function (c) {
                                    var cc = c.charCodeAt(0);
                                    if ((cc >= 0x41 && cc <= 0x5A) || (cc >= 0x61 && cc <= 0x7A)) {
                                        return true;
                                    }
                                    return false;
                                };
                                MathExpressionEngine.isWhitespace = function (c) {
                                    var cc = c.charCodeAt(0);
                                    if ((cc >= 0x0009 && cc <= 0x000D) || (cc == 0x0020) || (cc == 0x0085) || (cc == 0x00A0)) {
                                        return true;
                                    }
                                    return false;
                                };
                                MathExpressionEngine.prototype.shuntingYard = function (expression) {
                                    var outputQueue = new java.util.ArrayList();
                                    var stack = new java.util.Stack();
                                    var tokenizer = new org.kevoree.modeling.util.maths.expression.impl.MathExpressionTokenizer(expression);
                                    var lastFunction = null;
                                    var previousToken = null;
                                    while (tokenizer.hasNext()) {
                                        var token = tokenizer.next();
                                        if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isNumber(token)) {
                                            outputQueue.add(token);
                                        }
                                        else {
                                            if (this.varResolver(token) != null) {
                                                outputQueue.add(token);
                                            }
                                            else {
                                                if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.contains(token.toUpperCase())) {
                                                    stack.push(token);
                                                    lastFunction = token;
                                                }
                                                else {
                                                    if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(token.charAt(0))) {
                                                        stack.push(token);
                                                    }
                                                    else {
                                                        if (",".equals(token)) {
                                                            while (!stack.isEmpty() && !"(".equals(stack.peek())) {
                                                                outputQueue.add(stack.pop());
                                                            }
                                                            if (stack.isEmpty()) {
                                                                throw new java.lang.RuntimeException("Parse error for function '" + lastFunction + "'");
                                                            }
                                                        }
                                                        else {
                                                            if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token)) {
                                                                var o1 = org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token);
                                                                var token2 = stack.isEmpty() ? null : stack.peek();
                                                                while (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token2) && ((o1.isLeftAssoc() && o1.getPrecedence() <= org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token2).getPrecedence()) || (o1.getPrecedence() < org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token2).getPrecedence()))) {
                                                                    outputQueue.add(stack.pop());
                                                                    token2 = stack.isEmpty() ? null : stack.peek();
                                                                }
                                                                stack.push(token);
                                                            }
                                                            else {
                                                                if ("(".equals(token)) {
                                                                    if (previousToken != null) {
                                                                        if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isNumber(previousToken)) {
                                                                            throw new java.lang.RuntimeException("Missing operator at character position " + tokenizer.getPos());
                                                                        }
                                                                    }
                                                                    stack.push(token);
                                                                }
                                                                else {
                                                                    if (")".equals(token)) {
                                                                        while (!stack.isEmpty() && !"(".equals(stack.peek())) {
                                                                            outputQueue.add(stack.pop());
                                                                        }
                                                                        if (stack.isEmpty()) {
                                                                            throw new java.lang.RuntimeException("Mismatched parentheses");
                                                                        }
                                                                        stack.pop();
                                                                        if (!stack.isEmpty() && org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.contains(stack.peek().toUpperCase())) {
                                                                            outputQueue.add(stack.pop());
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        previousToken = token;
                                    }
                                    while (!stack.isEmpty()) {
                                        var element = stack.pop();
                                        if ("(".equals(element) || ")".equals(element)) {
                                            throw new java.lang.RuntimeException("Mismatched parentheses");
                                        }
                                        if (!org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(element)) {
                                            throw new java.lang.RuntimeException("Unknown operator or function: " + element);
                                        }
                                        outputQueue.add(element);
                                    }
                                    return outputQueue;
                                };
                                MathExpressionEngine.prototype.eval = function (p_expression) {
                                    var rpn = this.shuntingYard(p_expression);
                                    var stack = new java.util.Stack();
                                    for (var ii = 0; ii < rpn.size(); ii++) {
                                        var token = rpn.get(ii);
                                        if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token)) {
                                            var v1 = stack.pop();
                                            var v2 = stack.pop();
                                            stack.push(org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token).eval(v2, v1));
                                        }
                                        else {
                                            if (this.varResolver(token) != null) {
                                                stack.push(this.varResolver(token));
                                            }
                                            else {
                                                if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.contains(token.toUpperCase())) {
                                                    var f = org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.get(token.toUpperCase());
                                                    var p = new Float64Array(f.getNumParams());
                                                    for (var i = f.getNumParams() - 1; i >= 0; i--) {
                                                        p[i] = stack.pop();
                                                    }
                                                    var fResult = f.eval(p);
                                                    stack.push(fResult);
                                                }
                                                else {
                                                    stack.push(java.lang.Double.parseDouble(token));
                                                }
                                            }
                                        }
                                    }
                                    return stack.pop();
                                };
                                MathExpressionEngine.prototype.setVarResolver = function (p_resolver) {
                                    this.varResolver = p_resolver;
                                };
                                MathExpressionEngine.decimalSeparator = '.';
                                MathExpressionEngine.minusSign = '-';
                                return MathExpressionEngine;
                            })();
                            impl.MathExpressionEngine = MathExpressionEngine;
                            var MathExpressionTokenizer = (function () {
                                function MathExpressionTokenizer(input) {
                                    this.pos = 0;
                                    this.input = input.trim();
                                }
                                MathExpressionTokenizer.prototype.hasNext = function () {
                                    return (this.pos < this.input.length);
                                };
                                MathExpressionTokenizer.prototype.peekNextChar = function () {
                                    if (this.pos < (this.input.length - 1)) {
                                        return this.input.charAt(this.pos + 1);
                                    }
                                    else {
                                        return '\0';
                                    }
                                };
                                MathExpressionTokenizer.prototype.next = function () {
                                    var token = new java.lang.StringBuilder();
                                    if (this.pos >= this.input.length) {
                                        return this.previousToken = null;
                                    }
                                    var ch = this.input.charAt(this.pos);
                                    while (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isWhitespace(ch) && this.pos < this.input.length) {
                                        ch = this.input.charAt(++this.pos);
                                    }
                                    if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch)) {
                                        while ((org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch) || ch == org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.decimalSeparator) && (this.pos < this.input.length)) {
                                            token.append(this.input.charAt(this.pos++));
                                            ch = this.pos == this.input.length ? '\0' : this.input.charAt(this.pos);
                                        }
                                    }
                                    else {
                                        if (ch == org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.minusSign && org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(this.peekNextChar()) && ("(".equals(this.previousToken) || ",".equals(this.previousToken) || this.previousToken == null || org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(this.previousToken))) {
                                            token.append(org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.minusSign);
                                            this.pos++;
                                            token.append(this.next());
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(ch) || (ch == '_')) {
                                                while ((org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(ch) || org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch) || (ch == '_')) && (this.pos < this.input.length)) {
                                                    token.append(this.input.charAt(this.pos++));
                                                    ch = this.pos == this.input.length ? '\0' : this.input.charAt(this.pos);
                                                }
                                            }
                                            else {
                                                if (ch == '(' || ch == ')' || ch == ',') {
                                                    token.append(ch);
                                                    this.pos++;
                                                }
                                                else {
                                                    while (!org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(ch) && !org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch) && ch != '_' && !org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isWhitespace(ch) && ch != '(' && ch != ')' && ch != ',' && (this.pos < this.input.length)) {
                                                        token.append(this.input.charAt(this.pos));
                                                        this.pos++;
                                                        ch = this.pos == this.input.length ? '\0' : this.input.charAt(this.pos);
                                                        if (ch == org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.minusSign) {
                                                            break;
                                                        }
                                                    }
                                                    if (!org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token.toString())) {
                                                        throw new java.lang.RuntimeException("Unknown operator '" + token + "' at position " + (this.pos - token.length + 1));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return this.previousToken = token.toString();
                                };
                                MathExpressionTokenizer.prototype.getPos = function () {
                                    return this.pos;
                                };
                                return MathExpressionTokenizer;
                            })();
                            impl.MathExpressionTokenizer = MathExpressionTokenizer;
                            var MathFunction = (function () {
                                function MathFunction(name, numParams) {
                                    this.name = name.toUpperCase();
                                    this.numParams = numParams;
                                }
                                MathFunction.prototype.getName = function () {
                                    return this.name;
                                };
                                MathFunction.prototype.getNumParams = function () {
                                    return this.numParams;
                                };
                                MathFunction.prototype.eval = function (p) {
                                    if (this.name.equals("NOT")) {
                                        return (p[0] == 0) ? 1 : 0;
                                    }
                                    else {
                                        if (this.name.equals("IF")) {
                                            return !(p[0] == 0) ? p[1] : p[2];
                                        }
                                        else {
                                            if (this.name.equals("RAND")) {
                                                return Math.random();
                                            }
                                            else {
                                                if (this.name.equals("SIN")) {
                                                    return Math.sin(p[0]);
                                                }
                                                else {
                                                    if (this.name.equals("COS")) {
                                                        return Math.cos(p[0]);
                                                    }
                                                    else {
                                                        if (this.name.equals("TAN")) {
                                                            return Math.tan(p[0]);
                                                        }
                                                        else {
                                                            if (this.name.equals("ASIN")) {
                                                                return Math.asin(p[0]);
                                                            }
                                                            else {
                                                                if (this.name.equals("ACOS")) {
                                                                    return Math.acos(p[0]);
                                                                }
                                                                else {
                                                                    if (this.name.equals("ATAN")) {
                                                                        return Math.atan(p[0]);
                                                                    }
                                                                    else {
                                                                        if (this.name.equals("MAX")) {
                                                                            return p[0] > p[1] ? p[0] : p[1];
                                                                        }
                                                                        else {
                                                                            if (this.name.equals("MIN")) {
                                                                                return p[0] < p[1] ? p[0] : p[1];
                                                                            }
                                                                            else {
                                                                                if (this.name.equals("ABS")) {
                                                                                    return Math.abs(p[0]);
                                                                                }
                                                                                else {
                                                                                    if (this.name.equals("LOG")) {
                                                                                        return Math.log(p[0]);
                                                                                    }
                                                                                    else {
                                                                                        if (this.name.equals("ROUND")) {
                                                                                            var factor = Math.pow(10, p[1]);
                                                                                            var value = p[0] * factor;
                                                                                            var tmp = Math.round(value);
                                                                                            return tmp / factor;
                                                                                        }
                                                                                        else {
                                                                                            if (this.name.equals("FLOOR")) {
                                                                                                Math.floor(p[0]);
                                                                                            }
                                                                                            else {
                                                                                                if (this.name.equals("CEILING")) {
                                                                                                    Math.ceil(p[0]);
                                                                                                }
                                                                                                else {
                                                                                                    if (this.name.equals("SQRT")) {
                                                                                                        return Math.sqrt(p[0]);
                                                                                                    }
                                                                                                    else {
                                                                                                        if (this.name.equals("SECONDS")) {
                                                                                                            return this.date_to_seconds(p[0]);
                                                                                                        }
                                                                                                        else {
                                                                                                            if (this.name.equals("MINUTES")) {
                                                                                                                return this.date_to_minutes(p[0]);
                                                                                                            }
                                                                                                            else {
                                                                                                                if (this.name.equals("HOURS")) {
                                                                                                                    return this.date_to_hours(p[0]);
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (this.name.equals("DAY")) {
                                                                                                                        return this.date_to_days(p[0]);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (this.name.equals("MONTH")) {
                                                                                                                            return this.date_to_months(p[0]);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (this.name.equals("YEAR")) {
                                                                                                                                return this.date_to_year(p[0]);
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if (this.name.equals("DAYOFWEEK")) {
                                                                                                                                    return this.date_to_dayofweek(p[0]);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return 0;
                                };
                                MathFunction.prototype.date_to_seconds = function (value) {
                                    var date = new Date(value);
                                    return date.getSeconds();
                                };
                                MathFunction.prototype.date_to_minutes = function (value) {
                                    var date = new Date(value);
                                    return date.getMinutes();
                                };
                                MathFunction.prototype.date_to_hours = function (value) {
                                    var date = new Date(value);
                                    return date.getHours();
                                };
                                MathFunction.prototype.date_to_days = function (value) {
                                    var date = new Date(value);
                                    return date.getDate();
                                };
                                MathFunction.prototype.date_to_months = function (value) {
                                    var date = new Date(value);
                                    return date.getMonth();
                                };
                                MathFunction.prototype.date_to_year = function (value) {
                                    var date = new Date(value);
                                    return date.getFullYear();
                                };
                                MathFunction.prototype.date_to_dayofweek = function (value) {
                                    var date = new Date(value);
                                    return date.getDay();
                                };
                                return MathFunction;
                            })();
                            impl.MathFunction = MathFunction;
                            var MathOperation = (function () {
                                function MathOperation(oper, precedence, leftAssoc) {
                                    this.oper = oper;
                                    this.precedence = precedence;
                                    this.leftAssoc = leftAssoc;
                                }
                                MathOperation.prototype.getOper = function () {
                                    return this.oper;
                                };
                                MathOperation.prototype.getPrecedence = function () {
                                    return this.precedence;
                                };
                                MathOperation.prototype.isLeftAssoc = function () {
                                    return this.leftAssoc;
                                };
                                MathOperation.prototype.eval = function (v1, v2) {
                                    if (this.oper.equals("+")) {
                                        return v1 + v2;
                                    }
                                    else {
                                        if (this.oper.equals("-")) {
                                            return v1 - v2;
                                        }
                                        else {
                                            if (this.oper.equals("*")) {
                                                return v1 * v2;
                                            }
                                            else {
                                                if (this.oper.equals("/")) {
                                                    return v1 / v2;
                                                }
                                                else {
                                                    if (this.oper.equals("%")) {
                                                        return v1 % v2;
                                                    }
                                                    else {
                                                        if (this.oper.equals("^")) {
                                                            return Math.pow(v1, v2);
                                                        }
                                                        else {
                                                            if (this.oper.equals("&&")) {
                                                                var b1 = !(v1 == 0);
                                                                var b2 = !(v2 == 0);
                                                                return b1 && b2 ? 1 : 0;
                                                            }
                                                            else {
                                                                if (this.oper.equals("||")) {
                                                                    var b1 = !(v1 == 0);
                                                                    var b2 = !(v2 == 0);
                                                                    return b1 || b2 ? 1 : 0;
                                                                }
                                                                else {
                                                                    if (this.oper.equals(">")) {
                                                                        return v1 > v2 ? 1 : 0;
                                                                    }
                                                                    else {
                                                                        if (this.oper.equals(">=")) {
                                                                            return v1 >= v2 ? 1 : 0;
                                                                        }
                                                                        else {
                                                                            if (this.oper.equals("<")) {
                                                                                return v1 < v2 ? 1 : 0;
                                                                            }
                                                                            else {
                                                                                if (this.oper.equals("<=")) {
                                                                                    return v1 <= v2 ? 1 : 0;
                                                                                }
                                                                                else {
                                                                                    if (this.oper.equals("==")) {
                                                                                        return v1 == v2 ? 1 : 0;
                                                                                    }
                                                                                    else {
                                                                                        if (this.oper.equals("!=")) {
                                                                                            return v1 != v2 ? 1 : 0;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return 0;
                                };
                                return MathOperation;
                            })();
                            impl.MathOperation = MathOperation;
                        })(impl = expression_1.impl || (expression_1.impl = {}));
                    })(expression = maths.expression || (maths.expression = {}));
                    var gmm;
                    (function (gmm) {
                        var BaseSampleDistribution = (function () {
                            function BaseSampleDistribution() {
                            }
                            BaseSampleDistribution.prototype.getForgettingFactor = function () {
                                return this.mForgettingFactor;
                            };
                            BaseSampleDistribution.prototype.setForgettingFactor = function (forgettingFactor) {
                                this.mForgettingFactor = forgettingFactor;
                            };
                            BaseSampleDistribution.prototype.getGlobalWeight = function () {
                                return this.mGlobalWeight;
                            };
                            BaseSampleDistribution.prototype.getBandwidthMatrix = function () {
                                return this.mBandwidthMatrix;
                            };
                            BaseSampleDistribution.prototype.setBandwidthMatrix = function (mBandwidthMatrix) {
                                throw "Abstract method";
                            };
                            BaseSampleDistribution.prototype.getGlobalCovariance = function () {
                                return this.mGlobalCovariance;
                            };
                            BaseSampleDistribution.prototype.setGlobalCovariance = function (globalCovariance) {
                                this.mGlobalCovariance = globalCovariance;
                            };
                            BaseSampleDistribution.prototype.getSubspaceGlobalCovariance = function () {
                                return this.mSubspaceGlobalCovariance;
                            };
                            BaseSampleDistribution.prototype.setGlobalWeight = function (weight) {
                                this.mGlobalWeight = weight;
                            };
                            BaseSampleDistribution.prototype.scaleGlobalWeight = function (scaleFactor) {
                                this.mGlobalWeight = this.mGlobalWeight * scaleFactor;
                            };
                            BaseSampleDistribution.prototype.setSubspaceGlobalCovariance = function (subspaceCovariance) {
                                this.mSubspaceGlobalCovariance = subspaceCovariance;
                            };
                            BaseSampleDistribution.prototype.getSubspaceInverseCovariance = function () {
                                return this.mSubspaceInverseCovariance;
                            };
                            BaseSampleDistribution.prototype.setSubspaceInverseCovariance = function (subspaceInverseCovariance) {
                                this.mSubspaceInverseCovariance = subspaceInverseCovariance;
                            };
                            BaseSampleDistribution.prototype.evaluateMatrix = function (pointVector) {
                                throw "Abstract method";
                            };
                            BaseSampleDistribution.prototype.evaluate = function (points) {
                                var resultPoints = new Float64Array(points.length);
                                for (var i = 0; i < points.length; i++) {
                                    resultPoints[i] = this.evaluateMatrix(points[i]);
                                }
                                return resultPoints;
                            };
                            BaseSampleDistribution.prototype.getGlobalMean = function () {
                                return this.mGlobalMean;
                            };
                            BaseSampleDistribution.prototype.setGlobalMean = function (globalMean) {
                                this.mGlobalMean = globalMean;
                            };
                            BaseSampleDistribution.prototype.getmGlobalCovarianceSmoothed = function () {
                                if (this.mBandwidthMatrix == null) {
                                    this.mBandwidthMatrix = this.mGlobalCovariance.scale(0);
                                }
                                return (this.mGlobalCovariance.plus(this.mBandwidthMatrix));
                            };
                            return BaseSampleDistribution;
                        })();
                        gmm.BaseSampleDistribution = BaseSampleDistribution;
                        var Compressor = (function () {
                            function Compressor() {
                            }
                            Compressor.setNoOfComponentsThreshold = function (dist, noOfCompsBeforeCompression, noOfCompsAfterCompression) {
                                var threshold = dist.getNoOfCompsThreshold();
                                if (noOfCompsAfterCompression > threshold) {
                                    threshold = threshold * Compressor.INC_TH_SCALE;
                                }
                                else {
                                    if (noOfCompsAfterCompression <= threshold * Compressor.CHECK_IF_DEC_SCALE) {
                                        threshold = threshold * Compressor.DEC_TH_SCALE;
                                    }
                                }
                                dist.setNoOfCompsThreshold(threshold);
                            };
                            Compressor.emUpdate = function (dist, updatePoints) {
                                var subDistributions = dist.getSubDistributions();
                                var means = dist.getSubMeans();
                                var smoothedCovariances = dist.getSubSmoothedCovariances();
                                var covariances = dist.getSubCovariances();
                                var weights = dist.getSubWeights();
                                var pointMerged = false;
                                var count = 0;
                                for (var k = 0; k < updatePoints.length; k++) {
                                    var point = updatePoints[k];
                                    for (var i = 0; i < means.length && i != point && !pointMerged; i++) {
                                        if (subDistributions[i] instanceof org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution) {
                                            var subComponent = subDistributions[i];
                                            var md = means[point].minus(means[i]).transpose().mult(smoothedCovariances[i].invert()).mult(means[point].minus(means[i])).trace();
                                            if (md < Compressor.MIN_EM_DISTANCE) {
                                                var subSubComponents = subComponent.getSubComponents();
                                                var distance1 = org.kevoree.modeling.util.maths.gmm.Compressor.euclidianDistance(subSubComponents[0].getGlobalMean(), means[point]);
                                                var distance2 = org.kevoree.modeling.util.maths.gmm.Compressor.euclidianDistance(subSubComponents[1].getGlobalMean(), means[point]);
                                                var mergeId = 0;
                                                if (distance1 < distance2) {
                                                    mergeId = 0;
                                                }
                                                else {
                                                    mergeId = 1;
                                                }
                                                var componentToMerge = subSubComponents[mergeId];
                                                var meansArray = [componentToMerge.getGlobalMean(), means[point]];
                                                var covarianceArray = [componentToMerge.getGlobalCovariance(), covariances[point]];
                                                var subSubweight1 = componentToMerge.getGlobalWeight() * subComponent.getGlobalWeight();
                                                var subSubweight2 = weights[point];
                                                var globalWeight = subComponent.getGlobalWeight() + subSubweight2;
                                                var subSubWeightSum = subSubweight1 + subSubweight2;
                                                subSubweight1 /= subSubWeightSum;
                                                subSubweight2 /= subSubWeightSum;
                                                var weightsArray = new Float64Array([subSubweight1, subSubweight2]);
                                                var oneCompDist = null;
                                                try {
                                                    var twoCompDist = new org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution(weightsArray, meansArray, covarianceArray, dist.getBandwidthMatrix());
                                                    var subWeight1 = subSubComponents[0].getGlobalWeight() * subComponent.getGlobalWeight();
                                                    var subWeight2 = subSubComponents[1].getGlobalWeight() * subComponent.getGlobalWeight();
                                                    if (mergeId == 0) {
                                                        subWeight1 += weights[point];
                                                    }
                                                    else {
                                                        subWeight2 += weights[point];
                                                    }
                                                    var subWeightSum = subWeight1 + subWeight2;
                                                    subWeight1 /= subWeightSum;
                                                    subWeight2 /= subWeightSum;
                                                    org.kevoree.modeling.util.maths.gmm.MomentMatcher.matchMoments2Comp(twoCompDist);
                                                    oneCompDist = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                                    oneCompDist.setComponent(twoCompDist);
                                                    subSubComponents[mergeId] = oneCompDist;
                                                    subSubComponents[0].setGlobalWeight(subWeight1);
                                                    subSubComponents[1].setGlobalWeight(subWeight2);
                                                    org.kevoree.modeling.util.maths.gmm.MomentMatcher.matchMoments2Comp(subComponent);
                                                    subComponent.setGlobalWeight(globalWeight);
                                                    dist.mEMCount++;
                                                }
                                                catch ($ex$) {
                                                    if ($ex$ instanceof java.lang.Exception) {
                                                        var e = $ex$;
                                                        e.printStackTrace();
                                                    }
                                                    else {
                                                        throw $ex$;
                                                    }
                                                }
                                                dist.removeSubDistributions(point);
                                                count++;
                                                pointMerged = true;
                                            }
                                        }
                                    }
                                }
                                return (count == updatePoints.length);
                            };
                            Compressor.compress = function (dist, newComponents) {
                                if (dist.getSubMeans().length <= dist.getNoOfCompsThreshold()) {
                                    return;
                                }
                                var successfulEMUpdate = org.kevoree.modeling.util.maths.gmm.Compressor.emUpdate(dist, newComponents);
                                if (successfulEMUpdate) {
                                    return;
                                }
                                var projectionData = null;
                                try {
                                    projectionData = org.kevoree.modeling.util.maths.gmm.projection.Projector.projectSampleDistToSubspace(dist);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                        System.out.println("projection failed. Aborted Compression");
                                        return;
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                                org.kevoree.modeling.util.maths.gmm.Compressor.revitalizeComponents(dist);
                                var noOfCompsBeforeCompression = dist.getSubMeans().length;
                                var inputModelCopy = new org.kevoree.modeling.util.maths.gmm.SampleModel();
                                inputModelCopy.setSampleModel(dist);
                                var compressionError = Compressor.MAX;
                                if (inputModelCopy.getSubDistributions().length > 1) {
                                    compressionError = org.kevoree.modeling.util.maths.gmm.Compressor.mergeTwoClosestComps(inputModelCopy);
                                }
                                while (compressionError < dist.mCompressionThreshold) {
                                    dist.overWirite(inputModelCopy);
                                    if (inputModelCopy.getSubDistributions().length > 1) {
                                        compressionError = org.kevoree.modeling.util.maths.gmm.Compressor.mergeTwoClosestComps(inputModelCopy);
                                    }
                                    else {
                                        compressionError = Compressor.MAX;
                                    }
                                }
                                org.kevoree.modeling.util.maths.gmm.projection.Projector.projectSampleDistToOriginalSpace(dist, projectionData);
                                var noOfCompsAfterCompression = dist.getSubMeans().length;
                                org.kevoree.modeling.util.maths.gmm.Compressor.setNoOfComponentsThreshold(dist, noOfCompsBeforeCompression, noOfCompsAfterCompression);
                            };
                            Compressor.revitalizeComponents = function (dist) {
                                for (var i = 0; i < dist.getSubDistributions().length; i++) {
                                    if (dist.getSubDistributions()[i] instanceof org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution) {
                                        var subDist = dist.getSubDistributions()[i];
                                        var tmpWeight = subDist.getGlobalWeight();
                                        org.kevoree.modeling.util.maths.gmm.MomentMatcher.matchMoments2Comp(subDist);
                                        var oneCompDist = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                        oneCompDist.setComponent(subDist);
                                        var compressionError = org.kevoree.modeling.util.maths.gmm.Hellinger.calculateUnscentedHellingerDistance(oneCompDist, subDist);
                                        subDist.setGlobalWeight(tmpWeight);
                                        if (compressionError >= dist.mCompressionThreshold) {
                                            var subComp1 = subDist.getSubComponents()[0];
                                            var subComp2 = subDist.getSubComponents()[1];
                                            var splitDist1 = null;
                                            var splitDist2 = null;
                                            if (subComp1.getGlobalCovariance().elementSum() > Compressor.CONST_SMALL_TOLERANCE) {
                                                splitDist1 = subComp1.split(tmpWeight);
                                            }
                                            else {
                                                subComp1.scaleGlobalWeight(tmpWeight);
                                                splitDist1 = subComp1;
                                            }
                                            if (subComp2.getGlobalCovariance().elementSum() > Compressor.CONST_SMALL_TOLERANCE) {
                                                splitDist2 = subComp2.split(tmpWeight);
                                            }
                                            else {
                                                subComp2.scaleGlobalWeight(tmpWeight);
                                                splitDist2 = subComp2;
                                            }
                                            dist.getSubDistributions()[i] = splitDist1;
                                            dist.addToSubDistribution(splitDist2);
                                        }
                                    }
                                }
                            };
                            Compressor.mergeTwoClosestComps = function (dist) {
                                var compressionError = 0;
                                var twoCompDist = null;
                                var means = dist.getSubMeans();
                                var covs = dist.getSubCovariances();
                                var weights = dist.getSubWeights();
                                var distance = -1;
                                var indexComp1 = 0;
                                var indexComp2 = 0;
                                for (var i = 0; i < means.length; i++) {
                                    var mean1 = means[i];
                                    for (var j = (i + 1); j < means.length; j++) {
                                        var mean2 = means[j];
                                        var tmpDistance = org.kevoree.modeling.util.maths.gmm.Compressor.euclidianDistance(mean1, mean2);
                                        if ((distance == -1) || (tmpDistance < distance)) {
                                            distance = tmpDistance;
                                            indexComp1 = i;
                                            indexComp2 = j;
                                        }
                                        if (distance == 0) {
                                            break;
                                        }
                                    }
                                    if (distance == 0) {
                                        break;
                                    }
                                }
                                var meansArray = [means[indexComp1], means[indexComp2]];
                                var covarianceArray = [covs[indexComp1], covs[indexComp2]];
                                var weightsArray = new Float64Array([weights[indexComp1], weights[indexComp2]]);
                                try {
                                    twoCompDist = new org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution(weightsArray, meansArray, covarianceArray, dist.getBandwidthMatrix());
                                    org.kevoree.modeling.util.maths.gmm.MomentMatcher.matchMoments2Comp(twoCompDist);
                                    var oneCompDist = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                    oneCompDist.setComponent(twoCompDist);
                                    compressionError = org.kevoree.modeling.util.maths.gmm.Hellinger.calculateUnscentedHellingerDistance(oneCompDist, twoCompDist);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                        e.printStackTrace();
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                                var subWeights = twoCompDist.getSubWeights();
                                var newWeight1 = subWeights[0] / (subWeights[0] + subWeights[1]);
                                var newWeight2 = subWeights[1] / (subWeights[0] + subWeights[1]);
                                twoCompDist.getSubComponents()[0].setGlobalWeight(newWeight1);
                                twoCompDist.getSubComponents()[1].setGlobalWeight(newWeight2);
                                dist.getSubDistributions()[indexComp2] = twoCompDist;
                                dist.removeSubDistributions(indexComp1);
                                return compressionError;
                            };
                            Compressor.euclidianDistance = function (columnVector1, columnVector2) {
                                var distance = 0;
                                var distVector = columnVector2.minus(columnVector1);
                                distance = Math.sqrt(org.kevoree.modeling.util.maths.matrix.CommonOps.elemPow(distVector, 2).elementSum());
                                return distance;
                            };
                            Compressor.CONST_SMALL_TOLERANCE = 1E-10;
                            Compressor.MAX = 1.7976931348623157E308;
                            Compressor.MIN_EM_DISTANCE = 2.34;
                            Compressor.INC_TH_SCALE = 1.5;
                            Compressor.DEC_TH_SCALE = 0.6;
                            Compressor.CHECK_IF_DEC_SCALE = 0.5;
                            return Compressor;
                        })();
                        gmm.Compressor = Compressor;
                        var ConditionalDistribution = (function () {
                            function ConditionalDistribution(conditionalMeans, conditionalCovs, conditionalWeights) {
                                this.conditionalMeans = conditionalMeans;
                                this.conditionalCovs = conditionalCovs;
                                this.conditionalWeights = conditionalWeights;
                            }
                            return ConditionalDistribution;
                        })();
                        gmm.ConditionalDistribution = ConditionalDistribution;
                        var Hellinger = (function () {
                            function Hellinger() {
                            }
                            Hellinger.calculateUnscentedHellingerDistance = function (dist1, dist2) {
                                var dist0 = org.kevoree.modeling.util.maths.gmm.Hellinger.mergeSampleDists(dist1, dist2, Hellinger.HALF, Hellinger.HALF);
                                var sigmaPoints = org.kevoree.modeling.util.maths.gmm.Hellinger.getAllSigmaPoints(dist0, 3);
                                var points = new Array();
                                var weights = new Float64Array(sigmaPoints.size());
                                for (var i = 0; i < sigmaPoints.size(); i++) {
                                    points[i] = sigmaPoints.get(i).getmPointVecor();
                                    weights[i] = sigmaPoints.get(i).getmWeight();
                                }
                                var dist1Ev = dist1.evaluate(points);
                                var dist2Ev = dist2.evaluate(points);
                                dist1Ev = org.kevoree.modeling.util.maths.matrix.CommonOps.setNegativeValuesToZero(dist1Ev);
                                dist2Ev = org.kevoree.modeling.util.maths.matrix.CommonOps.setNegativeValuesToZero(dist2Ev);
                                var dist0Ev = dist0.evaluate(points);
                                dist0Ev = org.kevoree.modeling.util.maths.matrix.CommonOps.setNegativeValuesToZero(dist0Ev);
                                var mat0 = org.kevoree.modeling.util.maths.matrix.CommonOps.doubleListToMatrix(dist0Ev);
                                var mat1 = org.kevoree.modeling.util.maths.matrix.CommonOps.doubleListToMatrix(dist1Ev);
                                var mat2 = org.kevoree.modeling.util.maths.matrix.CommonOps.doubleListToMatrix(dist2Ev);
                                var weightsMatrix = org.kevoree.modeling.util.maths.matrix.CommonOps.doubleListToMatrix(weights);
                                var g = org.kevoree.modeling.util.maths.matrix.CommonOps.elemPow((org.kevoree.modeling.util.maths.matrix.CommonOps.elemSqrt(mat1).minus(org.kevoree.modeling.util.maths.matrix.CommonOps.elemSqrt(mat2))), 2);
                                var tmp = weightsMatrix.elementMult(g);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementDiv(tmp.getMatrix(), mat0.getMatrix(), tmp.getMatrix());
                                var val = tmp.elementSum();
                                var H = Math.sqrt(Math.abs(val / 2));
                                return H;
                            };
                            Hellinger.mergeSampleDists = function (dist1, dist2, w1, w2) {
                                var means = new Array();
                                means[0] = dist1.getGlobalMean();
                                for (var i = 1; i < dist2.getSubMeans().length + 1; i++) {
                                    means[i] = dist2.getSubMeans()[i - 1];
                                }
                                var covs = new Array();
                                covs[0] = dist1.getGlobalCovariance();
                                for (var i = 1; i < dist2.getSubCovariances().length + 1; i++) {
                                    covs[i] = dist2.getSubCovariances()[i - 1];
                                }
                                var weights = new Float64Array(3);
                                weights[0] = w1;
                                for (var i = 1; i < dist2.getSubWeights().length + 1; i++) {
                                    weights[i] = dist2.getSubWeights()[i - 1] * w2;
                                }
                                var dist = null;
                                dist = new org.kevoree.modeling.util.maths.gmm.ThreeComponentDistribution(weights, means, covs, dist1.getBandwidthMatrix());
                                return dist;
                            };
                            Hellinger.getAllSigmaPoints = function (distribution, max) {
                                var sigmaPoints = new java.util.ArrayList();
                                var noOfComponents = distribution.getSubMeans().length;
                                var dim = distribution.getSubMeans()[0].numRows();
                                var k = max - dim;
                                var noOfSigmaPoints;
                                if (k != 0) {
                                    noOfSigmaPoints = 2 * dim + 1;
                                }
                                else {
                                    noOfSigmaPoints = 2 * dim;
                                }
                                var weights = new java.util.ArrayList();
                                for (var i = 0; i < (2 * dim); i++) {
                                    weights.add(1 / (2 * (dim + k)));
                                }
                                if (k != 0) {
                                    weights.add(k / (dim + k));
                                }
                                var sum = 0;
                                for (var j = 0; j < weights.size(); j++) {
                                    sum += weights.get(j);
                                }
                                if ((sum - 1) > Hellinger.MIN_TOL) {
                                    throw new java.lang.Exception("Weights in the unscented transform should sum to one!");
                                }
                                for (var i = 0; i < noOfComponents; i++) {
                                    var x = org.kevoree.modeling.util.maths.gmm.Hellinger.getSigmaPoints(distribution.getSubMeans()[i], distribution.getSubCovariances()[i], noOfSigmaPoints, k);
                                    var count = 0;
                                    var componentWeight = distribution.getSubWeights()[i];
                                    for (var d = 0; d < x.size(); d++) {
                                        var m = x.get(d);
                                        sigmaPoints.add(new org.kevoree.modeling.util.maths.gmm.SigmaPoint(m, weights.get(count) * componentWeight, weights.get(count)));
                                        count++;
                                    }
                                }
                                return sigmaPoints;
                            };
                            Hellinger.getSigmaPoints = function (mean, cov, no, k) {
                                var resultVectors = new java.util.ArrayList();
                                var n = cov.numRows();
                                var svd = cov.svd(true);
                                var U = svd.getU();
                                var S = svd.getW();
                                S = U.mult(org.kevoree.modeling.util.maths.matrix.CommonOps.elemSqrt(S)).scale(Math.sqrt(n + k));
                                for (var i = 0; i < S.numCols(); i++) {
                                    var columnVector = S.extractVector(false, i);
                                    var negColumnVector = S.extractVector(false, i).scale(-1);
                                    resultVectors.add(columnVector.plus(mean));
                                    resultVectors.add(negColumnVector.plus(mean));
                                }
                                if (k != 0) {
                                    resultVectors.add(mean);
                                }
                                return resultVectors;
                            };
                            Hellinger.MIN_TOL = 1e-5;
                            Hellinger.HALF = 0.5;
                            return Hellinger;
                        })();
                        gmm.Hellinger = Hellinger;
                        var MomentMatcher = (function () {
                            function MomentMatcher() {
                            }
                            MomentMatcher.matchMoments = function (distribution) {
                                var smCovariances = distribution.getSubCovariances();
                                var smMeans = distribution.getSubMeans();
                                var smWeights = distribution.getSubWeights();
                                if (smWeights.length == 0) {
                                    return;
                                }
                                if (smWeights.length == 1) {
                                    var newMean = smMeans[0];
                                    var newCovariance = null;
                                    if (smCovariances.length > 0) {
                                        newCovariance = smCovariances[0];
                                    }
                                    distribution.setGlobalCovariance(newCovariance);
                                    distribution.setGlobalMean(newMean);
                                    distribution.setGlobalWeight(smWeights[0]);
                                    return;
                                }
                                var newWeight = 0;
                                for (var i = 0; i < smWeights.length; i++) {
                                    newWeight += smWeights[i];
                                }
                                var newMean = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(smMeans[0].numRows(), smMeans[0].numCols());
                                for (var i = 0; i < smMeans.length; i++) {
                                    newMean = newMean.plus((smMeans[i].scale(smWeights[i])));
                                }
                                newMean = newMean.scale(1 / newWeight);
                                var newCovariance = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(smCovariances[0].numRows(), smCovariances[0].numCols());
                                for (var i = 0; i < smCovariances.length; i++) {
                                    var dyadSmMean = smMeans[i].mult(smMeans[i].transpose());
                                    var S = smCovariances[i].plus(dyadSmMean);
                                    newCovariance = newCovariance.plus(S.scale(smWeights[i]));
                                }
                                newCovariance = newCovariance.scale(1 / newWeight);
                                var dyadNewMean = newMean.mult(newMean.transpose());
                                newCovariance = newCovariance.minus(dyadNewMean);
                                distribution.setGlobalCovariance(newCovariance);
                                distribution.setGlobalMean(newMean);
                                distribution.setGlobalWeight(newWeight);
                            };
                            MomentMatcher.matchMoments2Comp = function (distribution) {
                                var smCovariances = distribution.getSubCovariances();
                                var smMeans = distribution.getSubMeans();
                                var smWeights = distribution.getSubWeights();
                                if (smWeights.length == 0) {
                                    return;
                                }
                                if (smWeights.length == 1) {
                                    var newMean = smMeans[0];
                                    var newCovariance = null;
                                    if (smCovariances.length > 0) {
                                        newCovariance = smCovariances[0];
                                    }
                                    distribution.setGlobalCovariance(newCovariance);
                                    distribution.setGlobalMean(newMean);
                                    distribution.setGlobalWeight(smWeights[0]);
                                    return;
                                }
                                var newWeight = 0;
                                for (var i = 0; i < smWeights.length; i++) {
                                    newWeight += smWeights[i];
                                }
                                var newMean = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(smMeans[0].numRows(), smMeans[0].numCols());
                                for (var i = 0; i < smMeans.length; i++) {
                                    newMean = newMean.plus((smMeans[i].scale(smWeights[i])));
                                }
                                newMean = newMean.scale(1 / newWeight);
                                var newCovariance = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(smCovariances[0].numRows(), smCovariances[0].numCols());
                                for (var i = 0; i < smCovariances.length; i++) {
                                    var dyadSmMean = smMeans[i].mult(smMeans[i].transpose());
                                    var S = smCovariances[i].plus(dyadSmMean);
                                    newCovariance = newCovariance.plus(S.scale(smWeights[i]));
                                }
                                newCovariance = newCovariance.scale(1 / newWeight);
                                var dyadNewMean = newMean.mult(newMean.transpose());
                                newCovariance = newCovariance.minus(dyadNewMean);
                                distribution.setGlobalCovariance(newCovariance);
                                distribution.setGlobalMean(newMean);
                                distribution.setGlobalWeight(newWeight);
                            };
                            return MomentMatcher;
                        })();
                        gmm.MomentMatcher = MomentMatcher;
                        var MultipleComponentDistribution = (function (_super) {
                            __extends(MultipleComponentDistribution, _super);
                            function MultipleComponentDistribution() {
                                _super.call(this);
                            }
                            MultipleComponentDistribution.prototype.setValues = function (weights, means, covariances, bandwidth) {
                                this.mGlobalWeight = 0;
                                this.mForgettingFactor = 0;
                                if (bandwidth == null) {
                                    bandwidth = covariances[0].scale(0);
                                }
                                this.mBandwidthMatrix = bandwidth;
                                this.mSubDistributions = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var res = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                    res.setValues(weights[i], means[i], covariances[i], bandwidth);
                                    this.mSubDistributions[i] = res;
                                }
                                this.mGlobalWeight = 0;
                                for (var j = 0; j < weights.length; j++) {
                                    this.mGlobalWeight += weights[j];
                                }
                                this.mForgettingFactor = 1;
                            };
                            MultipleComponentDistribution.prototype.setComponent = function (dist) {
                                var subDists = dist.getSubComponents();
                                var copy = new Array();
                                for (var i = 0; i < subDists.length; i++) {
                                    copy[i] = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                    copy[i].setComponent(subDists[i]);
                                }
                                this.mSubDistributions = copy;
                                this.mBandwidthMatrix = dist.getBandwidthMatrix();
                                this.mGlobalCovariance = dist.getGlobalCovariance();
                                this.mGlobalMean = dist.getGlobalMean();
                                this.mSubspaceGlobalCovariance = dist.getSubspaceGlobalCovariance();
                                this.mSubspaceInverseCovariance = dist.getSubspaceInverseCovariance();
                                this.mGlobalWeight = dist.getGlobalWeight();
                            };
                            MultipleComponentDistribution.prototype.evaluateMatrix = function (pointVector) {
                                var means = this.getSubMeans();
                                var covs = this.getSubCovariances();
                                var weights = this.getSubWeights();
                                var d = 0;
                                var n = means[0].numRows();
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                for (var i = 0; i < means.length; i++) {
                                    var m = means[i];
                                    var c = covs[i].plus(this.mBandwidthMatrix);
                                    var w = weights[i];
                                    var tmp = (-0.5) * pointVector.minus(m).transpose().mult(c.invert()).mult(pointVector.minus(m)).trace();
                                    d += ((1 / (a * Math.sqrt(c.determinant()))) * Math.exp(tmp)) * w;
                                }
                                return d;
                            };
                            MultipleComponentDistribution.prototype.setSubComponents = function (subComponents) {
                                this.mSubDistributions = subComponents;
                            };
                            MultipleComponentDistribution.prototype.getSubComponents = function () {
                                return this.mSubDistributions;
                            };
                            MultipleComponentDistribution.prototype.getSubMeans = function () {
                                var means = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    means[i] = this.mSubDistributions[i].getGlobalMean();
                                }
                                return means;
                            };
                            MultipleComponentDistribution.prototype.getSubCovariances = function () {
                                var covs = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    covs[i] = this.mSubDistributions[i].getGlobalCovariance();
                                }
                                return covs;
                            };
                            MultipleComponentDistribution.prototype.getSubWeights = function () {
                                var weights = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    weights[i] = this.mSubDistributions[i].getGlobalWeight();
                                }
                                return weights;
                            };
                            MultipleComponentDistribution.prototype.setSubMeans = function (means) {
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    this.mSubDistributions[i].setGlobalMean(means[i]);
                                }
                            };
                            MultipleComponentDistribution.prototype.setSubCovariances = function (covariances) {
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    this.mSubDistributions[i].setGlobalCovariance(covariances[i]);
                                }
                            };
                            MultipleComponentDistribution.prototype.setBandwidthMatrix = function (mBandwidthMatrix) {
                                this.mBandwidthMatrix = mBandwidthMatrix;
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var d = this.mSubDistributions[i];
                                    d.setBandwidthMatrix(mBandwidthMatrix);
                                }
                            };
                            return MultipleComponentDistribution;
                        })(org.kevoree.modeling.util.maths.gmm.BaseSampleDistribution);
                        gmm.MultipleComponentDistribution = MultipleComponentDistribution;
                        var OneComponentDistribution = (function (_super) {
                            __extends(OneComponentDistribution, _super);
                            function OneComponentDistribution() {
                                _super.call(this);
                            }
                            OneComponentDistribution.prototype.setValues = function (w, mean, covariance, bandwidth) {
                                this.mGlobalWeight = 0;
                                this.mForgettingFactor = 0;
                                this.mGlobalWeight = w;
                                this.mGlobalMean = mean;
                                this.mGlobalCovariance = covariance;
                                this.mBandwidthMatrix = bandwidth;
                                this.mForgettingFactor = 1;
                            };
                            OneComponentDistribution.prototype.setComponent = function (oneComponentDistribution) {
                                this.mBandwidthMatrix = oneComponentDistribution.getBandwidthMatrix();
                                this.mGlobalCovariance = oneComponentDistribution.getGlobalCovariance();
                                this.mGlobalMean = oneComponentDistribution.getGlobalMean();
                                this.mSubspaceGlobalCovariance = oneComponentDistribution.getSubspaceGlobalCovariance();
                                this.mSubspaceInverseCovariance = oneComponentDistribution.getSubspaceInverseCovariance();
                                this.mGlobalWeight = oneComponentDistribution.getGlobalWeight();
                            };
                            OneComponentDistribution.prototype.split = function (parentWeight) {
                                var svd = this.mGlobalCovariance.svd(true);
                                var S = svd.getW();
                                var V = svd.getV();
                                var d = S.extractDiag();
                                var max = org.kevoree.modeling.util.maths.matrix.CommonOps.maxVectorElement(d);
                                var maxIndex = org.kevoree.modeling.util.maths.matrix.CommonOps.maxVectorElementIndex(d);
                                var len = this.mGlobalCovariance.numRows();
                                var M = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(len, 1);
                                M.setValue2D(maxIndex, 0, 1.0);
                                var dMean = V.mult(M).scale(0.5 * Math.sqrt(max));
                                var meanSplit1 = this.mGlobalMean.plus(dMean);
                                var meanSplit2 = this.mGlobalMean.minus(dMean);
                                var dyadMean = this.mGlobalMean.mult(this.mGlobalMean.transpose());
                                var dyadMeanSplit1 = meanSplit1.mult(meanSplit1.transpose());
                                var dyadMeanSplit2 = meanSplit2.mult(meanSplit2.transpose());
                                var covSplit = this.mGlobalCovariance.plus(dyadMean).minus(dyadMeanSplit1.plus(dyadMeanSplit2).scale(0.5));
                                var means = [meanSplit1, meanSplit2];
                                var covariances = [covSplit, covSplit];
                                var weights = new Float64Array([0.5, 0.5]);
                                var splitDist = null;
                                try {
                                    splitDist = new org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution(weights, means, covariances, this.mBandwidthMatrix);
                                    splitDist.setGlobalWeight(parentWeight * this.mGlobalWeight);
                                    splitDist.setGlobalCovariance(this.mGlobalCovariance);
                                    splitDist.setGlobalMean(this.mGlobalMean);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                                return splitDist;
                            };
                            OneComponentDistribution.prototype.evaluateMatrix = function (pointVector) {
                                var smoothedCov = this.mGlobalCovariance.plus(this.mBandwidthMatrix);
                                var d = 0;
                                var n = this.mGlobalMean.numRows();
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                var tmp = (-0.5) * pointVector.minus(this.mGlobalMean).transpose().mult(smoothedCov.invert()).mult(pointVector.minus(this.mGlobalMean)).trace();
                                d += ((1 / (a * Math.sqrt(smoothedCov.determinant()))) * Math.exp(tmp)) * this.mGlobalWeight;
                                return d;
                            };
                            OneComponentDistribution.prototype.setBandwidthMatrix = function (mBandwidthMatrix) {
                                this.mBandwidthMatrix = mBandwidthMatrix;
                            };
                            return OneComponentDistribution;
                        })(org.kevoree.modeling.util.maths.gmm.BaseSampleDistribution);
                        gmm.OneComponentDistribution = OneComponentDistribution;
                        var SampleModel = (function () {
                            function SampleModel() {
                                this.mProbabilityCache = new java.util.HashMap();
                                this.mEMError = 0;
                                this.mEMCount = 0;
                            }
                            SampleModel.prototype.getForgettingFactor = function () {
                                return this.mForgettingFactor;
                            };
                            SampleModel.prototype.setForgettingFactor = function (forgettingFactor) {
                                this.mForgettingFactor = forgettingFactor;
                            };
                            SampleModel.prototype.getGlobalWeight = function () {
                                return this.mGlobalWeight;
                            };
                            SampleModel.prototype.getBandwidthMatrix = function () {
                                return this.mBandwidthMatrix;
                            };
                            SampleModel.prototype.getGlobalCovariance = function () {
                                return this.mGlobalCovariance;
                            };
                            SampleModel.prototype.setGlobalCovariance = function (globalCovariance) {
                                this.mGlobalCovariance = globalCovariance;
                            };
                            SampleModel.prototype.getSubspaceGlobalCovariance = function () {
                                return this.mSubspaceGlobalCovariance;
                            };
                            SampleModel.prototype.setGlobalWeight = function (weight) {
                                this.mGlobalWeight = weight;
                            };
                            SampleModel.prototype.scaleGlobalWeight = function (scaleFactor) {
                                this.mGlobalWeight = this.mGlobalWeight * scaleFactor;
                            };
                            SampleModel.prototype.setSubspaceGlobalCovariance = function (subspaceCovariance) {
                                this.mSubspaceGlobalCovariance = subspaceCovariance;
                            };
                            SampleModel.prototype.getSubspaceInverseCovariance = function () {
                                return this.mSubspaceInverseCovariance;
                            };
                            SampleModel.prototype.setSubspaceInverseCovariance = function (subspaceInverseCovariance) {
                                this.mSubspaceInverseCovariance = subspaceInverseCovariance;
                            };
                            SampleModel.prototype.evaluateArray = function (points) {
                                var resultPoints = new Float64Array(points.length);
                                for (var i = 0; i < points.length; i++) {
                                    resultPoints[i] = this.evaluateMatrix(points[i]);
                                }
                                return resultPoints;
                            };
                            SampleModel.prototype.getGlobalMean = function () {
                                return this.mGlobalMean;
                            };
                            SampleModel.prototype.setGlobalMean = function (globalMean) {
                                this.mGlobalMean = globalMean;
                            };
                            SampleModel.prototype.getmGlobalCovarianceSmoothed = function () {
                                if (this.mBandwidthMatrix == null) {
                                    this.mBandwidthMatrix = this.mGlobalCovariance.scale(0);
                                }
                                return (this.mGlobalCovariance.plus(this.mBandwidthMatrix));
                            };
                            SampleModel.prototype.setSampleModelForget = function (forgettingFactor, compressionThreshold) {
                                this.mGlobalWeight = 0;
                                this.mForgettingFactor = 0;
                                this.mSubDistributions = new Array();
                                this.mBandwidthMatrix = null;
                                this.mGlobalCovariance = null;
                                this.mGlobalMean = null;
                                this.mSubspace = null;
                                this.mSubspaceGlobalCovariance = null;
                                this.mSubspaceInverseCovariance = null;
                                this.mGlobalWeight = 0;
                                this.mEffectiveNoOfSamples = 0;
                                this.mForgettingFactor = forgettingFactor;
                                this.mCompressionThreshold = compressionThreshold;
                                this.mNoOfCompsThreshold = SampleModel.DEFAULT_NO_OF_COMPS_THRES;
                            };
                            SampleModel.prototype.setSampleModel = function (dist) {
                                var subDists = dist.getSubDistributions();
                                var copy = new Array();
                                for (var i = 0; i < subDists.length; i++) {
                                    copy[i] = subDists[i];
                                }
                                this.mSubDistributions = copy;
                                this.mBandwidthMatrix = dist.getBandwidthMatrix();
                                this.mGlobalCovariance = dist.getGlobalCovariance();
                                this.mGlobalMean = dist.getGlobalMean();
                                this.mSubspace = dist.getmSubspace();
                                this.mSubspaceGlobalCovariance = dist.getSubspaceGlobalCovariance();
                                this.mSubspaceInverseCovariance = dist.getSubspaceInverseCovariance();
                                this.mGlobalWeight = dist.getGlobalWeight();
                                this.mEffectiveNoOfSamples = dist.mEffectiveNoOfSamples;
                            };
                            SampleModel.prototype.overWirite = function (dist) {
                                var subDists = dist.getSubDistributions();
                                var copy = new Array();
                                this.mSubDistributions = copy;
                                this.mBandwidthMatrix = dist.getBandwidthMatrix();
                                this.mGlobalCovariance = dist.getGlobalCovariance();
                                this.mGlobalMean = dist.getGlobalMean();
                                this.mSubspace = dist.getmSubspace();
                                this.mSubspaceGlobalCovariance = dist.getSubspaceGlobalCovariance();
                                this.mSubspaceInverseCovariance = dist.getSubspaceInverseCovariance();
                                this.mGlobalWeight = dist.getGlobalWeight();
                                this.mEffectiveNoOfSamples = dist.mEffectiveNoOfSamples;
                            };
                            SampleModel.prototype.getmSubspace = function () {
                                return this.mSubspace;
                            };
                            SampleModel.prototype.setmSubspace = function (mSubspace) {
                                this.mSubspace = mSubspace;
                            };
                            SampleModel.prototype.updateDistributionArrayMatrix = function (means, covariances, weights) {
                                this.checkInputParams(means, covariances, weights);
                                this.addDistributions(weights, means, covariances);
                                var newPoints = new Int32Array(this.mSubDistributions.length - (this.mSubDistributions.length - means.length));
                                var j = 0;
                                for (var i = (this.mSubDistributions.length - means.length); i < this.mSubDistributions.length; i++) {
                                    newPoints[j] = i;
                                }
                                this.updateDistributionArray(newPoints);
                            };
                            SampleModel.prototype.updateDistributionValues = function (mean, covariance, weight) {
                                this.addDistribution(weight, mean, covariance);
                                var newPoints = new Int32Array(1);
                                newPoints[0] = (this.mSubDistributions.length - 1);
                                this.updateDistributionArray(newPoints);
                            };
                            SampleModel.prototype.updateDistributionArray = function (newPoints) {
                                var subDists = this.getSubDistributions();
                                var weights = new Float64Array(subDists.length);
                                for (var i = 0; i < subDists.length; i++) {
                                    weights[i] = subDists[i].getGlobalWeight();
                                }
                                var subSpaceDist = null;
                                try {
                                    subSpaceDist = org.kevoree.modeling.util.maths.gmm.SampleModel.projectToSubspace(this);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var ex = $ex$;
                                        ex.printStackTrace();
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                                var bandwidthFactor = this.reestimateBandwidth(subSpaceDist.getSubMeans(), subSpaceDist.getSubCovariances(), weights, subSpaceDist.getSubspaceGlobalCovariance(), this.mEffectiveNoOfSamples);
                                var bandwidthMatrix = org.kevoree.modeling.util.maths.gmm.SampleModel.projectBandwidthToOriginalSpace(subSpaceDist, bandwidthFactor);
                                this.mBandwidthMatrix = bandwidthMatrix;
                                for (var i = 0; i < this.getSubDistributions().length; i++) {
                                    this.getSubDistributions()[i].setBandwidthMatrix(bandwidthMatrix);
                                }
                                if (this.mGlobalCovariance == null) {
                                    this.mGlobalCovariance = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(2, 2);
                                }
                                try {
                                    org.kevoree.modeling.util.maths.gmm.Compressor.compress(this, newPoints);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof java.lang.Exception) {
                                        var e = $ex$;
                                        e.printStackTrace();
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            };
                            SampleModel.prototype.checkInputParams = function (means, covariances, weights) {
                                if (weights == null || weights.length == 0 || means == null || means.length == 0 || covariances == null || covariances.length == 0) {
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            };
                            SampleModel.prototype.addDistributions = function (weights, means, covariances) {
                                var sumOfNewWeights = 0;
                                var len = this.mSubDistributions.length;
                                var array2 = new Array();
                                System.arraycopy(this.mSubDistributions, 0, array2, 0, this.mSubDistributions.length);
                                this.mSubDistributions = array2;
                                for (var i = 0; i < weights.length; i++) {
                                    sumOfNewWeights += weights[i];
                                    var res = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                    res.setValues(weights[i], means[i], covariances[i], this.mBandwidthMatrix);
                                    this.mSubDistributions[i + len] = (res);
                                }
                                var mixWeightOld = (this.mEffectiveNoOfSamples * this.mForgettingFactor) / (this.mEffectiveNoOfSamples * this.mForgettingFactor + sumOfNewWeights);
                                var mixWeightNew = sumOfNewWeights / (this.mEffectiveNoOfSamples * this.mForgettingFactor + sumOfNewWeights);
                                this.mEffectiveNoOfSamples = this.mEffectiveNoOfSamples * this.mForgettingFactor + weights.length;
                                this.mGlobalWeight = mixWeightOld + mixWeightNew;
                                for (var i = 0; i < this.mSubDistributions.length - weights.length; i++) {
                                    var tmpWeight = this.mSubDistributions[i].getGlobalWeight();
                                    this.mSubDistributions[i].setGlobalWeight(tmpWeight * mixWeightOld);
                                }
                                for (var i = this.mSubDistributions.length - weights.length; i < this.mSubDistributions.length; i++) {
                                    var tmpWeight = this.mSubDistributions[i].getGlobalWeight();
                                    this.mSubDistributions[i].setGlobalWeight(tmpWeight * mixWeightNew * (1 / weights.length));
                                }
                            };
                            SampleModel.prototype.addDistribution = function (weight, mean, covariance) {
                                var sumOfNewWeights = 0;
                                sumOfNewWeights += weight;
                                var res = new org.kevoree.modeling.util.maths.gmm.OneComponentDistribution();
                                res.setValues(weight, mean, covariance, this.mBandwidthMatrix);
                                var array2 = new Array();
                                System.arraycopy(this.mSubDistributions, 0, array2, 0, this.mSubDistributions.length);
                                array2[this.mSubDistributions.length] = res;
                                this.mSubDistributions = array2;
                                var mixWeightOld = (this.mEffectiveNoOfSamples * this.mForgettingFactor) / (this.mEffectiveNoOfSamples * this.mForgettingFactor + sumOfNewWeights);
                                var mixWeightNew = sumOfNewWeights / (this.mEffectiveNoOfSamples * this.mForgettingFactor + sumOfNewWeights);
                                this.mEffectiveNoOfSamples = this.mEffectiveNoOfSamples * this.mForgettingFactor + 1;
                                this.mGlobalWeight = mixWeightOld + mixWeightNew;
                                for (var i = 0; i < this.mSubDistributions.length - 1; i++) {
                                    var tmpWeight = this.mSubDistributions[i].getGlobalWeight();
                                    this.mSubDistributions[i].setGlobalWeight(tmpWeight * mixWeightOld);
                                }
                                for (var i = this.mSubDistributions.length - 1; i < this.mSubDistributions.length; i++) {
                                    var tmpWeight = this.mSubDistributions[i].getGlobalWeight();
                                    this.mSubDistributions[i].setGlobalWeight(tmpWeight * mixWeightNew * (1 / 1));
                                }
                            };
                            SampleModel.projectToSubspace = function (dist) {
                                var minBW = 1e-7;
                                var distribution = new org.kevoree.modeling.util.maths.gmm.SampleModel();
                                distribution.setSampleModel(dist);
                                var subSpace = new Int32Array(1);
                                org.kevoree.modeling.util.maths.gmm.MomentMatcher.matchMoments(distribution);
                                var overallCovariance = distribution.getGlobalCovariance();
                                var svd = overallCovariance.svd(true);
                                var U = svd.getU();
                                var S = svd.getW();
                                S = S.extractDiag();
                                var F = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(0, 0);
                                var count = 0;
                                var mean = 0;
                                for (var i = 0; i < U.numRows(); i++) {
                                    if (S.getValue2D(i, 0) > minBW) {
                                        var array2 = new Int32Array(subSpace.length + 1);
                                        System.arraycopy(subSpace, 0, array2, 0, subSpace.length);
                                        array2[subSpace.length] = i;
                                        subSpace = array2;
                                        var colU = U.extractVector(false, i);
                                        var rowW = Math.pow(S.getValue2D(i, 0), -0.5);
                                        colU = colU.scale(rowW);
                                        F = F.combine(0, F.numCols(), colU);
                                        mean += S.getValue2D(i, 0);
                                        count++;
                                    }
                                }
                                mean = (mean / count) * 1e-2;
                                for (var i = 0; i < S.numRows(); i++) {
                                    if (S.getValue2D(i, 0) < minBW) {
                                        S.setValue2D(i, 0, mean);
                                    }
                                }
                                var iF = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(0, 0);
                                for (var i = 0; i < U.numCols(); i++) {
                                    var coliF = U.extractVector(false, i);
                                    var rowW = Math.pow(S.getValue2D(i, 0), 0.5);
                                    coliF = coliF.scale(rowW).transpose();
                                    iF = iF.combine(iF.numRows(), 0, coliF);
                                }
                                var subspaceCov = F.transpose().mult(overallCovariance).mult(F);
                                distribution.setSubspaceGlobalCovariance(subspaceCov);
                                var originalMeans = distribution.getSubMeans();
                                var subspaceMean = distribution.getGlobalMean();
                                for (var i = 0; i < originalMeans.length; i++) {
                                    originalMeans[i] = originalMeans[i].minus(subspaceMean);
                                }
                                var covariances = distribution.getSubCovariances();
                                for (var i = 0; i < originalMeans.length; i++) {
                                    originalMeans[i] = F.transpose().mult(originalMeans[i]);
                                    covariances[i] = F.transpose().mult(covariances[i]).mult(F);
                                }
                                distribution.setSubCovariances(covariances);
                                distribution.setSubMeans(originalMeans);
                                distribution.setSubspaceInverseCovariance(iF);
                                distribution.setmSubspace(subSpace);
                                return distribution;
                            };
                            SampleModel.containsVal = function (i, j, subspace) {
                                var conti = false;
                                var contj = false;
                                for (var k = 0; k < subspace.length; k++) {
                                    conti = conti || (subspace[k] == i);
                                    contj = contj || (subspace[k] == j);
                                }
                                return conti && contj;
                            };
                            SampleModel.projectBandwidthToOriginalSpace = function (distribution, bandwidthFactor) {
                                var bandwidth = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.identity(distribution.getGlobalCovariance().numCols());
                                var subSpaceBandwidth = distribution.getSubspaceGlobalCovariance().scale(Math.pow(bandwidthFactor, 2));
                                var subspace = distribution.getmSubspace();
                                for (var i = 0; i < subSpaceBandwidth.numRows(); i++) {
                                    for (var j = 0; j < subSpaceBandwidth.numCols(); j++) {
                                        if (org.kevoree.modeling.util.maths.gmm.SampleModel.containsVal(i, j, subspace)) {
                                            bandwidth.setValue2D(i, j, subSpaceBandwidth.getValue2D(i, j));
                                        }
                                    }
                                }
                                var invSubspaceCov = distribution.getSubspaceInverseCovariance();
                                bandwidth = invSubspaceCov.transpose().mult(bandwidth).mult(invSubspaceCov);
                                return bandwidth;
                            };
                            SampleModel.prototype.reestimateBandwidth = function (means, covariance, weights, Cov_smp, N_eff) {
                                var d = means[0].numRows();
                                var G = Cov_smp.scale(Math.pow((2 / (d + 2)), (2 / (d + 4))) * 4 * Math.pow(N_eff, -2 / (4 + d)));
                                var alphaScale = 1;
                                var F = Cov_smp.scale(alphaScale);
                                var Rf2 = this.getIntSquaredHessian(means, weights, covariance, F, G);
                                var hAmise = Math.pow((Math.pow(N_eff, (-1)) * Math.pow(F.determinant(), (-1 / 2)) / (Math.pow(Math.sqrt(4 * Math.PI), d) * Rf2 * d)), (1 / (d + 4)));
                                return hAmise;
                            };
                            SampleModel.prototype.getIntSquaredHessian = function (means, weights, covariance, F, g) {
                                var d = means[0].numRows();
                                var N = means.length;
                                var constNorm = Math.pow((1 / (2 * Math.PI)), (d / 2));
                                var Id = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.identity(F.numCols());
                                var deltaF = F.minus(Id).elementSum();
                                var w1;
                                var w2;
                                var m;
                                var I = 0;
                                var eta;
                                var f_t;
                                var c;
                                var s1;
                                var s2;
                                var mu1;
                                var mu2;
                                var dm;
                                var ds;
                                var B;
                                var b;
                                var C;
                                for (var i1 = 0; i1 < N; i1++) {
                                    s1 = covariance[i1].plus(g);
                                    mu1 = means[i1];
                                    w1 = weights[i1];
                                    for (var i2 = i1; i2 < N; i2++) {
                                        s2 = covariance[i2];
                                        mu2 = means[i2];
                                        w2 = weights[i2];
                                        var A = s1.plus(s2).invert();
                                        dm = mu1.minus(mu2);
                                        if (deltaF > 1e-3) {
                                            ds = dm.transpose().mult(A);
                                            b = ds.transpose().mult(ds);
                                            B = A.minus(b.scale(2));
                                            C = A.minus(b);
                                            f_t = constNorm * Math.sqrt(A.determinant()) * Math.exp(-0.5 * ds.mult(dm).trace());
                                            c = 2 * F.mult(A).mult(F).mult(B).trace() + Math.pow(F.mult(C).trace(), 2);
                                        }
                                        else {
                                            m = dm.transpose().mult(A).mult(dm).getValue1D(0);
                                            f_t = constNorm * Math.sqrt(A.determinant()) * Math.exp(-0.5 * m);
                                            var A_sqr = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows(), A.numCols());
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.elementMult(A.getMatrix(), A.transpose().getMatrix(), A_sqr);
                                            var sum = org.kevoree.modeling.util.maths.matrix.CommonOps.elementSum(A_sqr);
                                            c = 2 * sum * (1 - 2 * m) + Math.pow((1 - m), 2) * Math.pow(A.trace(), 2);
                                        }
                                        if (i1 == i2) {
                                            eta = 1;
                                        }
                                        else {
                                            eta = 2;
                                        }
                                        I = I + f_t * c * w2 * w1 * eta;
                                    }
                                }
                                return I;
                            };
                            SampleModel.prototype.setSubDistributions = function (subDistributions) {
                                this.mSubDistributions = subDistributions;
                            };
                            SampleModel.prototype.getSubDistributions = function () {
                                return this.mSubDistributions;
                            };
                            SampleModel.prototype.addToSubDistribution = function (dist) {
                                var array2 = new Array();
                                System.arraycopy(this.mSubDistributions, 0, array2, 0, this.mSubDistributions.length);
                                array2[array2.length - 1] = dist;
                                this.mSubDistributions = array2;
                            };
                            SampleModel.prototype.setSubMeans = function (means) {
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    this.mSubDistributions[i].setGlobalMean(means[i]);
                                }
                            };
                            SampleModel.prototype.setSubCovariances = function (covariances) {
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    this.mSubDistributions[i].setGlobalCovariance(covariances[i]);
                                }
                            };
                            SampleModel.prototype.getSubSmoothedCovariances = function () {
                                var covs = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var d = this.mSubDistributions[i];
                                    covs[i] = (d.getmGlobalCovarianceSmoothed());
                                }
                                return covs;
                            };
                            SampleModel.prototype.getSubMeans = function () {
                                var means = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var d = this.mSubDistributions[i];
                                    try {
                                        means[i] = (d.getGlobalMean());
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof java.lang.Exception) {
                                            var ex = $ex$;
                                            var x = 9;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                                return means;
                            };
                            SampleModel.prototype.getSubCovariances = function () {
                                var covs = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var d = this.mSubDistributions[i];
                                    covs[i] = (d.getGlobalCovariance());
                                }
                                return covs;
                            };
                            SampleModel.prototype.getSubWeights = function () {
                                var weights = new Float64Array(this.mSubDistributions.length);
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var d = this.mSubDistributions[i];
                                    weights[i] = (d.getGlobalWeight());
                                }
                                return weights;
                            };
                            SampleModel.prototype.setSubWeights = function (weights) {
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    this.mSubDistributions[i].setGlobalWeight(weights[i]);
                                }
                            };
                            SampleModel.prototype.getMarginalDistribution = function (n) {
                                var means = this.getSubMeans();
                                var marginalMeans = new Array();
                                var covs = this.getSubSmoothedCovariances();
                                var marginalCovs = new Array();
                                var weights = this.getSubWeights();
                                var result = null;
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                for (var i = 0; i < means.length; i++) {
                                    var c = covs[i];
                                    var m = means[i];
                                    var m1 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(n, 1);
                                    var newC1 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(n, n);
                                    for (var j = 0; j < n; j++) {
                                        for (var k = 0; k < n; k++) {
                                            newC1.setValue2D(j, k, c.getValue2D(j, k));
                                        }
                                    }
                                    for (var j = 0; j < n; j++) {
                                        m1.setValue2D(j, 0, m.getValue2D(j, 0));
                                    }
                                    marginalMeans[i] = (m1);
                                    marginalCovs[i] = (newC1);
                                }
                                result = new org.kevoree.modeling.util.maths.gmm.ConditionalDistribution(marginalMeans, marginalCovs, weights);
                                return result;
                            };
                            SampleModel.prototype.getConditionalDistribution = function (condition) {
                                var lenCond = condition.numRows();
                                var means = this.getSubMeans();
                                var conditionalMeans = new Array();
                                var covs = this.getSubSmoothedCovariances();
                                var conditionalCovs = new Array();
                                var weights = this.getSubWeights();
                                var conditionalWeights = new Float64Array(means.length);
                                var result = null;
                                var n = condition.numRows();
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                for (var i = 0; i < means.length; i++) {
                                    var c = covs[i];
                                    var invC = c.invert();
                                    var m = means[i];
                                    var lenM1 = m.numRows() - lenCond;
                                    var m1 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(lenM1, 1);
                                    var m2 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(lenCond, 1);
                                    var newC1 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(lenM1, lenM1);
                                    for (var j = 0; j < lenM1; j++) {
                                        for (var k = 0; k < lenM1; k++) {
                                            newC1.setValue2D(j, k, invC.getValue2D(j + lenCond, k + lenCond));
                                        }
                                    }
                                    var newC2 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(lenM1, lenCond);
                                    for (var j = 0; j < lenM1; j++) {
                                        for (var k = 0; k < lenCond; k++) {
                                            newC2.setValue2D(j, k, invC.getValue2D(j + lenCond, k));
                                        }
                                    }
                                    for (var j = 0; j < lenCond; j++) {
                                        m2.setValue2D(j, 0, m.getValue2D(j, 0));
                                    }
                                    for (var j = 0; j < lenM1; j++) {
                                        m1.setValue2D(j, 0, m.getValue2D(j + lenCond, 0));
                                    }
                                    var invNewC1 = newC1.invert();
                                    var condMean = m1.minus(invNewC1.mult(newC2).mult(condition.minus(m2)));
                                    var condCovariance = invNewC1;
                                    conditionalMeans[i] = (condMean);
                                    conditionalCovs[i] = (condCovariance);
                                    var newC22 = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(lenCond, lenCond);
                                    for (var j = 0; j < lenCond; j++) {
                                        for (var k = 0; k < lenCond; k++) {
                                            newC22.setValue2D(j, k, c.getValue2D(j, k));
                                        }
                                    }
                                    var mahalanobisDistance = condition.minus(m2).transpose().mult(newC22.invert()).mult(condition.minus(m2)).trace();
                                    var newWeight = ((1 / (a * Math.sqrt(newC22.determinant()))) * Math.exp((-0.5) * mahalanobisDistance)) * weights[i];
                                    conditionalWeights[i] = (newWeight);
                                }
                                var weightSum = 0;
                                for (var i = 0; i < conditionalWeights.length; i++) {
                                    weightSum += conditionalWeights[i];
                                }
                                for (var i = 0; i < conditionalWeights.length; i++) {
                                    var weight = conditionalWeights[i];
                                    weight = weight / weightSum;
                                    conditionalWeights[i] = weight;
                                }
                                result = new org.kevoree.modeling.util.maths.gmm.ConditionalDistribution(conditionalMeans, conditionalCovs, conditionalWeights);
                                return result;
                            };
                            SampleModel.prototype.gradQuadrSearch = function (start) {
                                var condVector = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(4, 1);
                                for (var i = 0; i < condVector.numRows(); i++) {
                                    condVector.setValue2D(i, 0, start.getValue2D(i, 0));
                                }
                                var conditionalDist = this.getConditionalDistribution(condVector);
                                var means = conditionalDist.conditionalMeans;
                                var covs = conditionalDist.conditionalCovs;
                                var weights = conditionalDist.conditionalWeights;
                                var gradient = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(2, 1);
                                var hessian = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(2, 2);
                                var n = means[0].numRows();
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                var x = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(2, 1);
                                x.setValue2D(0, 0, start.getValue2D(start.numRows() - 2, 0));
                                x.setValue2D(1, 0, start.getValue2D(start.numRows() - 1, 0));
                                var mahalanobisDistances;
                                var step = 1;
                                var probability = 0;
                                var gradStep = null;
                                do {
                                    mahalanobisDistances = this.mahalanobis(x, means, covs);
                                    var prob = 0;
                                    for (var i = 0; i < means.length; i++) {
                                        if (mahalanobisDistances[i] < SampleModel.MAX_MAHALANOBIS_DIST) {
                                            var m = means[i];
                                            var dm = m.minus(x);
                                            var c = covs[i];
                                            var invC = c.invert();
                                            var w = weights[i];
                                            var p = ((1 / (a * Math.sqrt(c.determinant()))) * Math.exp((-0.5) * mahalanobisDistances[i])) * w;
                                            prob += p;
                                            gradient = gradient.plus(invC.mult(dm).scale(p));
                                            hessian = hessian.plus(invC.mult(dm.mult(dm.transpose()).minus(c)).mult(invC).scale(p));
                                        }
                                    }
                                    var xOld = x.copy();
                                    var hessianEVD = hessian.eig();
                                    var maxEVIndex = hessianEVD.getIndexMax();
                                    if (hessianEVD.getEigenvalue(maxEVIndex).getReal() < 0) {
                                        gradStep = hessian.invert().mult(gradient);
                                        x = xOld.minus(gradStep);
                                    }
                                    var prob1 = this.evaluate(x, means, covs, weights);
                                    if (prob1 <= prob || hessianEVD.getEigenvalue(maxEVIndex).getReal() >= 0) {
                                        gradStep = gradient.scale(step);
                                        x = xOld.plus(gradStep);
                                        while (this.evaluate(x, means, covs, weights) < prob) {
                                            step = step / 2;
                                            gradStep = gradient.scale(step);
                                            x = xOld.plus(gradStep);
                                        }
                                    }
                                    probability = this.evaluate(x, means, covs, weights);
                                } while (gradStep.elementMaxAbs() > 1E-10);
                                return new org.kevoree.modeling.util.maths.gmm.SearchResult(x, probability);
                            };
                            SampleModel.prototype.evaluateMatrix = function (pointVector) {
                                var means = this.getSubMeans();
                                var covs = this.getSubSmoothedCovariances();
                                var weights = this.getSubWeights();
                                var d = 0;
                                var n = means[0].numRows();
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                var mahalanobisDistances = this.mahalanobis(pointVector, means, covs);
                                for (var i = 0; i < means.length; i++) {
                                    if (mahalanobisDistances[i] < SampleModel.MAX_MAHALANOBIS_DIST) {
                                        var m = means[i];
                                        var c = covs[i];
                                        var w = weights[i];
                                        d += ((1 / (a * Math.sqrt(c.determinant()))) * Math.exp((-0.5) * mahalanobisDistances[i])) * w;
                                    }
                                }
                                return d;
                            };
                            SampleModel.prototype.evaluate = function (pointVector, means, covs, weights) {
                                var d = 0;
                                var n = means[0].numRows();
                                var a = Math.pow(Math.sqrt(2 * Math.PI), n);
                                var mahalanobisDistances = this.mahalanobis(pointVector, means, covs);
                                for (var i = 0; i < means.length; i++) {
                                    if (mahalanobisDistances[i] < SampleModel.MAX_MAHALANOBIS_DIST) {
                                        var m = means[i];
                                        var c = covs[i];
                                        var w = weights[i];
                                        d += ((1 / (a * Math.sqrt(c.determinant()))) * Math.exp((-0.5) * mahalanobisDistances[i])) * w;
                                    }
                                }
                                return d;
                            };
                            SampleModel.prototype.mahalanobis = function (x, means, covs) {
                                var mahalanobisDistances = new Float64Array(means.length);
                                for (var i = 0; i < means.length; i++) {
                                    var m = means[i];
                                    var c = covs[i];
                                    var distance = x.minus(m).transpose().mult(c.invert()).mult(x.minus(m)).trace();
                                    mahalanobisDistances[i] = (distance);
                                }
                                return mahalanobisDistances;
                            };
                            SampleModel.prototype.resetProbabilityCache = function () {
                                this.mProbabilityCache.clear();
                            };
                            SampleModel.prototype.setBandwidthMatrix = function (mBandwidthMatrix) {
                                this.mBandwidthMatrix = mBandwidthMatrix;
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    var d = this.mSubDistributions[i];
                                    d.setBandwidthMatrix(mBandwidthMatrix);
                                }
                            };
                            SampleModel.prototype.setNoOfCompsThreshold = function (threshold) {
                                this.mNoOfCompsThreshold = threshold;
                            };
                            SampleModel.prototype.getNoOfCompsThreshold = function () {
                                return this.mNoOfCompsThreshold;
                            };
                            SampleModel.prototype.removeSubDistributions = function (index) {
                                var array2 = new Array();
                                for (var i = 0; i < this.mSubDistributions.length; i++) {
                                    if (i < index) {
                                        array2[i] = this.mSubDistributions[i];
                                    }
                                    else {
                                        if (i > index) {
                                            array2[i] = this.mSubDistributions[i - 1];
                                        }
                                    }
                                }
                                this.mSubDistributions = array2;
                            };
                            SampleModel.DEFAULT_NO_OF_COMPS_THRES = 6;
                            SampleModel.MAX_MAHALANOBIS_DIST = 40;
                            return SampleModel;
                        })();
                        gmm.SampleModel = SampleModel;
                        var SearchResult = (function () {
                            function SearchResult(point, probability) {
                                this.point = point;
                                this.probability = probability;
                            }
                            return SearchResult;
                        })();
                        gmm.SearchResult = SearchResult;
                        var SigmaPoint = (function () {
                            function SigmaPoint(mPointVecor, weight, weightInComponent) {
                                this.mPointVecor = mPointVecor;
                                this.mWeight = weight;
                                this.mWeightInComponent = weightInComponent;
                            }
                            SigmaPoint.prototype.getmWeightInComponent = function () {
                                return this.mWeightInComponent;
                            };
                            SigmaPoint.prototype.setmWeightInComponent = function (mWeightInComponent) {
                                this.mWeightInComponent = mWeightInComponent;
                            };
                            SigmaPoint.prototype.getmPointVecor = function () {
                                return this.mPointVecor;
                            };
                            SigmaPoint.prototype.setmPointVecor = function (mPointVecor) {
                                this.mPointVecor = mPointVecor;
                            };
                            SigmaPoint.prototype.getmWeight = function () {
                                return this.mWeight;
                            };
                            SigmaPoint.prototype.setmWeight = function (mWeight) {
                                this.mWeight = mWeight;
                            };
                            return SigmaPoint;
                        })();
                        gmm.SigmaPoint = SigmaPoint;
                        var ThreeComponentDistribution = (function (_super) {
                            __extends(ThreeComponentDistribution, _super);
                            function ThreeComponentDistribution(weights, means, covariances, bandwidth) {
                                _super.call(this);
                                _super.prototype.setValues.call(this, weights, means, covariances, bandwidth);
                            }
                            ThreeComponentDistribution.NO_OF_COMPONENTS = 3;
                            return ThreeComponentDistribution;
                        })(org.kevoree.modeling.util.maths.gmm.MultipleComponentDistribution);
                        gmm.ThreeComponentDistribution = ThreeComponentDistribution;
                        var TwoComponentDistribution = (function (_super) {
                            __extends(TwoComponentDistribution, _super);
                            function TwoComponentDistribution(weights, means, covariances, bandwidth) {
                                _super.call(this);
                                _super.prototype.setValues.call(this, weights, means, covariances, bandwidth);
                            }
                            TwoComponentDistribution.NO_OF_COMPONENTS = 2;
                            return TwoComponentDistribution;
                        })(org.kevoree.modeling.util.maths.gmm.MultipleComponentDistribution);
                        gmm.TwoComponentDistribution = TwoComponentDistribution;
                        var projection;
                        (function (projection) {
                            var ProjectionData = (function () {
                                function ProjectionData() {
                                }
                                return ProjectionData;
                            })();
                            projection.ProjectionData = ProjectionData;
                            var Projector = (function () {
                                function Projector() {
                                }
                                Projector.projectSampleDistToSubspace = function (distribution) {
                                    var projectionData = new org.kevoree.modeling.util.maths.gmm.projection.ProjectionData();
                                    org.kevoree.modeling.util.maths.gmm.MomentMatcher.matchMoments(distribution);
                                    var globalSmoothedCov = distribution.getmGlobalCovarianceSmoothed();
                                    var globalMean = distribution.getGlobalMean();
                                    var globalCovSize = globalSmoothedCov.numRows();
                                    var identity = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.identity(globalCovSize);
                                    globalSmoothedCov = globalSmoothedCov.plus(identity.scale(Projector.CONST_SMALL_FACTOR));
                                    var d = globalSmoothedCov.numCols();
                                    projectionData.mSVD = globalSmoothedCov.svd(true);
                                    var svd = globalSmoothedCov.svd(true);
                                    var U = svd.getU();
                                    var S = svd.getW();
                                    var V = svd.getV();
                                    V = U;
                                    var s = S.extractDiag();
                                    s = s.scale(1 / S.elementMaxAbs());
                                    var validElements = new Float64Array(d);
                                    var countValidElements = 0;
                                    var invS = null;
                                    if (s.elementMaxAbs() < Projector.MIN_VALUE || java.lang.Double.isNaN(s.elementSum())) {
                                        S = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.identity(S.numCols()).transpose();
                                        invS = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.identity(d).scale(2 / Projector.MIN_VALUE);
                                        for (var i = 0; i < validElements.length; i++) {
                                            validElements[i] = 1;
                                        }
                                        countValidElements = validElements.length;
                                    }
                                    else {
                                        for (var i = 0; i < validElements.length; i++) {
                                            if (s.getValue2D(i, 0) > Projector.MIN_VALUE) {
                                                validElements[i] = 1;
                                                countValidElements++;
                                            }
                                            else {
                                                validElements[i] = s.getValue2D(i, 0);
                                            }
                                        }
                                        S = org.kevoree.modeling.util.maths.matrix.CommonOps.elemPow(S, -1);
                                        invS = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.identity(d).scale(0);
                                        for (var i = 0; i < validElements.length; i++) {
                                            if (validElements[i] == 1) {
                                                invS.setValue2D(i, i, S.getValue2D(i, i));
                                            }
                                            else {
                                                invS.setValue2D(i, i, 1 / validElements[i]);
                                            }
                                        }
                                    }
                                    var trnsF = org.kevoree.modeling.util.maths.matrix.CommonOps.elemSqrt(org.kevoree.modeling.util.maths.matrix.CommonOps.abs(invS)).mult(V.invert());
                                    var trnsBandwidthMatrix = org.kevoree.modeling.util.maths.gmm.projection.Projector.transformMatrix(trnsF, distribution.getBandwidthMatrix(), validElements, countValidElements);
                                    var subDistributions = distribution.getSubDistributions();
                                    for (var i = 0; i < subDistributions.length; i++) {
                                        var subSubMeans = new Array();
                                        var subSubCovs = new Array();
                                        if (subDistributions[i] instanceof org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution) {
                                            var subDist = subDistributions[i];
                                            subSubMeans = subDist.getSubMeans();
                                            subSubCovs = subDist.getSubCovariances();
                                        }
                                        if (subSubMeans.length > 1) {
                                            for (var j = 0; j < subSubMeans.length; j++) {
                                                subSubCovs[j] = org.kevoree.modeling.util.maths.gmm.projection.Projector.transformMatrix(trnsF, subSubCovs[j], validElements, countValidElements);
                                                var tmp = trnsF.mult(subSubMeans[j].minus(globalMean));
                                                tmp = org.kevoree.modeling.util.maths.matrix.CommonOps.deleteElementsFromVector(tmp, validElements, countValidElements);
                                                subSubMeans[j] = tmp;
                                            }
                                            try {
                                                subDistributions[i].setSubMeans(subSubMeans);
                                                subDistributions[i].setSubCovariances(subSubCovs);
                                            }
                                            catch ($ex$) {
                                                if ($ex$ instanceof java.lang.Exception) {
                                                    var e = $ex$;
                                                    e.printStackTrace();
                                                }
                                                else {
                                                    throw $ex$;
                                                }
                                            }
                                        }
                                        var subMean = subDistributions[i].getGlobalMean();
                                        var tmp = trnsF.mult(subMean.minus(globalMean));
                                        tmp = org.kevoree.modeling.util.maths.matrix.CommonOps.deleteElementsFromVector(tmp, validElements, countValidElements);
                                        subDistributions[i].setGlobalMean(tmp);
                                        var subCov = subDistributions[i].getGlobalCovariance();
                                        subCov = org.kevoree.modeling.util.maths.gmm.projection.Projector.transformMatrix(trnsF, subCov, validElements, countValidElements);
                                        subDistributions[i].setGlobalCovariance(subCov);
                                        subDistributions[i].setBandwidthMatrix(trnsBandwidthMatrix);
                                    }
                                    globalSmoothedCov = org.kevoree.modeling.util.maths.gmm.projection.Projector.transformMatrix(trnsF, globalSmoothedCov, validElements, countValidElements);
                                    distribution.setBandwidthMatrix(trnsBandwidthMatrix);
                                    projectionData.mCountValidElements = countValidElements;
                                    projectionData.mValidElements = validElements;
                                    projectionData.mGlobalMean = globalMean;
                                    return projectionData;
                                };
                                Projector.transformMatrix = function (trnsF, matrix, validElements, countValidElements) {
                                    var tmp = trnsF.mult(matrix).mult(trnsF.transpose());
                                    var trnsMatrix = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(countValidElements, countValidElements);
                                    var row = 0;
                                    var column = 0;
                                    for (var i = 0; i < validElements.length; i++) {
                                        for (var j = 0; j < validElements.length; j++) {
                                            if (validElements[i] == 1 && validElements[j] == 1) {
                                                trnsMatrix.setValue2D(row, column++, tmp.getValue2D(i, j));
                                            }
                                        }
                                        column = 0;
                                        row++;
                                    }
                                    return trnsMatrix;
                                };
                                Projector.backTransformMatrix = function (matrix, matrixToTransform, validElements) {
                                    var row = 0;
                                    var column = 0;
                                    for (var i = 0; i < validElements.length; i++) {
                                        for (var j = 0; j < validElements.length; j++) {
                                            if (validElements[i] == 1 && validElements[j] == 1) {
                                                matrix.setValue2D(i, j, matrixToTransform.getValue2D(row, column++));
                                            }
                                        }
                                        column = 0;
                                        row++;
                                    }
                                    return matrix;
                                };
                                Projector.projectSampleDistToOriginalSpace = function (distribution, projectionData) {
                                    var bandwidth = distribution.getBandwidthMatrix();
                                    var svd = projectionData.mSVD;
                                    var U = svd.getU();
                                    var S = svd.getW();
                                    var V = svd.getV();
                                    var globalMean = projectionData.mGlobalMean;
                                    var validElements = projectionData.mValidElements;
                                    var countValidElements = projectionData.mCountValidElements;
                                    var noOfNullDirs = S.numCols() - countValidElements;
                                    var trnsF = V.mult(org.kevoree.modeling.util.maths.matrix.CommonOps.elemSqrt(S));
                                    var protC = S.scale(0);
                                    protC = org.kevoree.modeling.util.maths.gmm.projection.Projector.backTransformMatrix(protC, bandwidth, validElements);
                                    bandwidth = trnsF.mult(protC).mult(trnsF.transpose());
                                    distribution.setBandwidthMatrix(bandwidth);
                                    var subDistributions = distribution.getSubDistributions();
                                    for (var i = 0; i < subDistributions.length; i++) {
                                        var subSubMeans = new Array();
                                        var subSubCovs = new Array();
                                        if (subDistributions[i] instanceof org.kevoree.modeling.util.maths.gmm.TwoComponentDistribution) {
                                            var subDist = subDistributions[i];
                                            subSubMeans = subDist.getSubMeans();
                                            subSubCovs = subDist.getSubCovariances();
                                        }
                                        if (subSubMeans.length > 1) {
                                            for (var j = 0; j < subSubMeans.length; j++) {
                                                var newMean = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(subSubMeans[j].numRows() + noOfNullDirs, 1);
                                                newMean = org.kevoree.modeling.util.maths.gmm.projection.Projector.setVectorElements(newMean, subSubMeans[j], validElements);
                                                var tmp = trnsF.mult(newMean).plus(globalMean);
                                                subSubMeans[j] = tmp;
                                                protC = protC.scale(0);
                                                subSubCovs[j] = org.kevoree.modeling.util.maths.gmm.projection.Projector.backTransformMatrix(protC, subSubCovs[j], validElements);
                                                subSubCovs[j] = trnsF.mult(subSubCovs[j]).mult(trnsF.transpose());
                                            }
                                            try {
                                                subDistributions[i].setSubMeans(subSubMeans);
                                                subDistributions[i].setSubCovariances(subSubCovs);
                                            }
                                            catch ($ex$) {
                                                if ($ex$ instanceof java.lang.Exception) {
                                                    var e = $ex$;
                                                    e.printStackTrace();
                                                }
                                                else {
                                                    throw $ex$;
                                                }
                                            }
                                        }
                                        var subMean = subDistributions[i].getGlobalMean();
                                        var newMean = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(subMean.numRows() + noOfNullDirs, 1);
                                        newMean = org.kevoree.modeling.util.maths.gmm.projection.Projector.setVectorElements(newMean, subMean, validElements);
                                        var tmp = trnsF.mult(newMean).plus(globalMean);
                                        subDistributions[i].setGlobalMean(tmp);
                                        var subCov = subDistributions[i].getGlobalCovariance();
                                        protC = protC.scale(0);
                                        subCov = org.kevoree.modeling.util.maths.gmm.projection.Projector.backTransformMatrix(protC, subCov, validElements);
                                        subCov = trnsF.mult(subCov).mult(trnsF.transpose());
                                        subDistributions[i].setGlobalCovariance(subCov);
                                        subDistributions[i].setBandwidthMatrix(bandwidth);
                                    }
                                };
                                Projector.setVectorElements = function (v1, v2, elementsInV1) {
                                    var j = 0;
                                    for (var i = 0; i < v1.numRows(); i++) {
                                        if (elementsInV1[i] == 1) {
                                            v1.setValue2D(i, 0, v2.getValue1D(j++));
                                        }
                                    }
                                    return v1;
                                };
                                Projector.MIN_VALUE = 1E-7;
                                Projector.CONST_SMALL_FACTOR = 1E-10;
                                return Projector;
                            })();
                            projection.Projector = Projector;
                        })(projection = gmm.projection || (gmm.projection = {}));
                    })(gmm = maths.gmm || (maths.gmm = {}));
                    var matrix;
                    (function (matrix_1) {
                        var CommonOps = (function () {
                            function CommonOps() {
                            }
                            CommonOps.mult = function (a, b, c) {
                                if (b.numCols == 1) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.mult(a, b, c);
                                }
                                else {
                                    if (b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.mult_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.mult_small(a, b, c);
                                    }
                                }
                            };
                            CommonOps.memset = function (data, val) {
                                for (var i = 0; i < data.length; i++) {
                                    data[i] = val;
                                }
                            };
                            CommonOps.multalpha = function (alpha, a, b, c) {
                                if (b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.mult_reorderalpha(alpha, a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.mult_smallalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.multTransA = function (a, b, c) {
                                if (b.numCols == 1) {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multTransA_small(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH || b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_small(a, b, c);
                                    }
                                }
                            };
                            CommonOps.multTransalphaA = function (alpha, a, b, c) {
                                if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH || b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorderalpha(alpha, a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_smallalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.multTransB = function (a, b, c) {
                                if (b.numRows == 1) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.mult(a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransB(a, b, c);
                                }
                            };
                            CommonOps.multTransalphaB = function (alpha, a, b, c) {
                                org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransBalpha(alpha, a, b, c);
                            };
                            CommonOps.multTransAB = function (a, b, c) {
                                if (b.numRows == 1) {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multTransA_small(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= CommonOps.MULT_TRANAB_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransAB_aux(a, b, c, null);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransAB(a, b, c);
                                    }
                                }
                            };
                            CommonOps.multTransalphaAB = function (alpha, a, b, c) {
                                if (a.numCols >= CommonOps.MULT_TRANAB_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransAB_auxalpha(alpha, a, b, c, null);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransABalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.dot = function (a, b) {
                                return org.kevoree.modeling.util.maths.matrix.VectorVectorMult.innerProd(a, b);
                            };
                            CommonOps.multInner = function (a, c) {
                                if (a.numCols >= CommonOps.MULT_INNER_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMultProduct.inner_small(a, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMultProduct.inner_reorder(a, c);
                                }
                            };
                            CommonOps.multOuter = function (a, c) {
                                org.kevoree.modeling.util.maths.matrix.MatrixMultProduct.outer(a, c);
                            };
                            CommonOps.multAdd = function (a, b, c) {
                                if (b.numCols == 1) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multAdd(a, b, c);
                                }
                                else {
                                    if (b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAdd_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAdd_small(a, b, c);
                                    }
                                }
                            };
                            CommonOps.multAddalpha = function (alpha, a, b, c) {
                                if (b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAdd_reorderalpha(alpha, a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAdd_smallalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.multAddTransA = function (a, b, c) {
                                if (b.numCols == 1) {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multAddTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multAddTransA_small(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH || b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransA_small(a, b, c);
                                    }
                                }
                            };
                            CommonOps.multAddTransAalpha = function (alpha, a, b, c) {
                                if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH || b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransA_reorderalpha(alpha, a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransA_smallalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.multAddTransB = function (a, b, c) {
                                org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransB(a, b, c);
                            };
                            CommonOps.multAddTransBalpha = function (alpha, a, b, c) {
                                org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransBalpha(alpha, a, b, c);
                            };
                            CommonOps.multAddTransAB = function (a, b, c) {
                                if (b.numRows == 1) {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multAddTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multAddTransA_small(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= CommonOps.MULT_TRANAB_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransAB_aux(a, b, c, null);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransAB(a, b, c);
                                    }
                                }
                            };
                            CommonOps.subvector = function (A, rowA, colA, length, row, offsetV, v) {
                                if (row) {
                                    for (var i = 0; i < length; i++) {
                                        v.setValueAtIndex(offsetV + i, A.get(rowA, colA + i));
                                    }
                                }
                                else {
                                    for (var i = 0; i < length; i++) {
                                        v.setValueAtIndex(offsetV + i, A.get(rowA + i, colA));
                                    }
                                }
                            };
                            CommonOps.abs = function (matrix) {
                                for (var i = 0; i < matrix.numRows(); i++) {
                                    for (var j = 0; j < matrix.numCols(); j++) {
                                        matrix.setValue2D(i, j, Math.abs(matrix.getValue2D(i, j)));
                                    }
                                }
                                return matrix;
                            };
                            CommonOps.elemSqrt = function (matrix) {
                                for (var i = 0; i < matrix.numRows(); i++) {
                                    for (var j = 0; j < matrix.numCols(); j++) {
                                        matrix.setValue2D(i, j, Math.sqrt(matrix.getValue2D(i, j)));
                                    }
                                }
                                return matrix;
                            };
                            CommonOps.elemPow = function (matrix, p) {
                                for (var i = 0; i < matrix.numRows(); i++) {
                                    for (var j = 0; j < matrix.numCols(); j++) {
                                        matrix.setValue2D(i, j, Math.pow(matrix.getValue2D(i, j), p));
                                    }
                                }
                                return matrix;
                            };
                            CommonOps.deleteElementsFromVector = function (vector, elements, vectorSize) {
                                var newVector = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(vectorSize, 1);
                                var j = 0;
                                for (var i = 0; i < vector.numRows(); i++) {
                                    if (elements[i] == 1) {
                                        newVector.setValue2D(j++, 0, vector.getValue1D(i));
                                    }
                                }
                                return newVector;
                            };
                            CommonOps.ones = function (rows, cols) {
                                var matrix = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(rows, cols);
                                for (var i = 0; i < rows; i++) {
                                    for (var j = 0; j < rows; j++) {
                                        matrix.setValue2D(i, j, 1);
                                    }
                                }
                                return matrix;
                            };
                            CommonOps.doubleListToMatrix = function (valueList) {
                                var m = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(1, valueList.length);
                                for (var i = 0; i < valueList.length; i++) {
                                    m.setValue2D(0, i, valueList[i]);
                                }
                                return m;
                            };
                            CommonOps.setNegativeValuesToZero = function (valueList) {
                                for (var i = 0; i < valueList.length; i++) {
                                    if (valueList[i] < 0) {
                                        valueList[i] = 0;
                                    }
                                }
                                return valueList;
                            };
                            CommonOps.maxVectorElement = function (matrix) {
                                var d = java.lang.Double.MIN_VALUE;
                                for (var i = 0; i < matrix.numRows(); i++) {
                                    if (matrix.getValue2D(i, 0) > d) {
                                        d = matrix.getValue2D(i, 0);
                                    }
                                }
                                return d;
                            };
                            CommonOps.maxVectorElementIndex = function (matrix) {
                                var d = java.lang.Double.MIN_VALUE;
                                var row = 0;
                                for (var i = 0; i < matrix.numRows(); i++) {
                                    if (matrix.getValue2D(i, 0) > d) {
                                        d = matrix.getValue2D(i, 0);
                                        row = i;
                                    }
                                }
                                return row;
                            };
                            CommonOps.multAddTransABalpha = function (alpha, a, b, c) {
                                if (a.numCols >= CommonOps.MULT_TRANAB_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransAB_auxalpha(alpha, a, b, c, null);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAddTransABalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.trace = function (a) {
                                var N = Math.min(a.numRows, a.numCols);
                                var sum = 0;
                                var index = 0;
                                for (var i = 0; i < N; i++) {
                                    sum += a.getValueAtIndex(index);
                                    index += 1 + a.numCols;
                                }
                                return sum;
                            };
                            CommonOps.transposeMatrix = function (A, A_tran) {
                                if (A_tran == null) {
                                    A_tran = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numCols, A.numRows);
                                }
                                else {
                                    if (A.numRows != A_tran.numCols || A.numCols != A_tran.numRows) {
                                        throw new java.lang.RuntimeException("Incompatible matrix dimensions");
                                    }
                                }
                                if (A.numRows > CommonOps.TRANSPOSE_SWITCH && A.numCols > CommonOps.TRANSPOSE_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.TransposeAlgs.block(A, A_tran, CommonOps.BLOCK_WIDTH);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.TransposeAlgs.standard(A, A_tran);
                                }
                                return A_tran;
                            };
                            CommonOps.transpose = function (mat) {
                                if (mat.numCols == mat.numRows) {
                                    org.kevoree.modeling.util.maths.matrix.TransposeAlgs.square(mat);
                                }
                                else {
                                    var b = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(mat.numCols, mat.numRows);
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(mat, b);
                                    mat.setMatrix(b);
                                }
                            };
                            CommonOps.det = function (mat) {
                                var numCol = mat.getNumCols();
                                var numRow = mat.getNumRows();
                                if (numCol != numRow) {
                                    throw new java.lang.RuntimeException("Must be a square matrix.");
                                }
                                else {
                                    if (numCol <= 1) {
                                        return mat.getValueAtIndex(0);
                                    }
                                    else {
                                        var alg = new org.kevoree.modeling.util.maths.matrix.solvers.LUDecompositionAlt_D64();
                                        if (!alg.decompose(mat)) {
                                            return 0.0;
                                        }
                                        return alg.computeDeterminant();
                                    }
                                }
                            };
                            CommonOps.invert = function (mat, result) {
                                var alg = new org.kevoree.modeling.util.maths.matrix.solvers.LUDecompositionAlt_D64();
                                var solver = new org.kevoree.modeling.util.maths.matrix.solvers.LinearSolverLu_D64(alg);
                                if (solver.modifiesA()) {
                                    mat = mat.copy();
                                }
                                if (!solver.setA(mat)) {
                                    return false;
                                }
                                solver.invert(result);
                                return true;
                            };
                            CommonOps.extractImpl = function (src, srcY0, srcX0, dst, dstY0, dstX0, numRows, numCols) {
                                for (var y = 0; y < numRows; y++) {
                                    var indexSrc = src.getIndex(y + srcY0, srcX0);
                                    var indexDst = dst.getIndex(y + dstY0, dstX0);
                                    System.arraycopy(src.data, indexSrc, dst.data, indexDst, numCols);
                                }
                            };
                            CommonOps.extractInsert = function (src, srcY0, srcY1, srcX0, srcX1, dst, dstY0, dstX0) {
                                var w = srcX1 - srcX0;
                                var h = srcY1 - srcY0;
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractImpl(src, srcY0, srcX0, dst, dstY0, dstX0, h, w);
                            };
                            CommonOps.insert = function (src, dest, destY0, destX0) {
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractInsert(src, 0, src.getNumRows(), 0, src.getNumCols(), dest, destY0, destX0);
                            };
                            CommonOps.extract4Int = function (src, srcY0, srcY1, srcX0, srcX1) {
                                if (srcY1 <= srcY0 || srcY0 < 0 || srcY1 > src.numRows) {
                                    throw new java.lang.RuntimeException("srcY1 <= srcY0 || srcY0 < 0 || srcY1 > src.getNumRows");
                                }
                                if (srcX1 <= srcX0 || srcX0 < 0 || srcX1 > src.numCols) {
                                    throw new java.lang.RuntimeException("srcX1 <= srcX0 || srcX0 < 0 || srcX1 > src.getNumCols");
                                }
                                var w = srcX1 - srcX0;
                                var h = srcY1 - srcY0;
                                var dst = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(h, w);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractImpl(src, srcY0, srcX0, dst, 0, 0, h, w);
                                return dst;
                            };
                            CommonOps.columnsToVector = function (A, v) {
                                var ret;
                                if (v == null || v.length < A.numCols) {
                                    ret = new Array();
                                }
                                else {
                                    ret = v;
                                }
                                for (var i = 0; i < ret.length; i++) {
                                    if (ret[i] == null) {
                                        ret[i] = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows, 1);
                                    }
                                    else {
                                        ret[i].reshapeBoolean(A.numRows, 1, false);
                                    }
                                    var u = ret[i];
                                    for (var j = 0; j < A.numRows; j++) {
                                        u.set(j, 0, A.get(j, i));
                                    }
                                }
                                return ret;
                            };
                            CommonOps.rowsToVector = function (A, v) {
                                var ret;
                                if (v == null || v.length < A.numRows) {
                                    ret = new Array();
                                }
                                else {
                                    ret = v;
                                }
                                for (var i = 0; i < ret.length; i++) {
                                    if (ret[i] == null) {
                                        ret[i] = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numCols, 1);
                                    }
                                    else {
                                        ret[i].reshapeBoolean(A.numCols, 1, false);
                                    }
                                    var u = ret[i];
                                    for (var j = 0; j < A.numCols; j++) {
                                        u.set(j, 0, A.get(i, j));
                                    }
                                }
                                return ret;
                            };
                            CommonOps.setIdentity = function (mat) {
                                var width = mat.numRows < mat.numCols ? mat.numRows : mat.numCols;
                                java.util.Arrays.fill(mat.data, 0, mat.getNumElements(), 0);
                                var index = 0;
                                for (var i = 0; i < width;) {
                                    mat.data[index] = 1;
                                }
                            };
                            CommonOps.identity1D = function (width) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(width, width);
                                for (var i = 0; i < width; i++) {
                                    ret.set(i, i, 1.0);
                                }
                                return ret;
                            };
                            CommonOps.identity = function (numRows, numCols) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                var small = numRows < numCols ? numRows : numCols;
                                for (var i = 0; i < small; i++) {
                                    ret.set(i, i, 1.0);
                                }
                                return ret;
                            };
                            CommonOps.diag = function (diagEl) {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.diagMatrix(null, diagEl.length, diagEl);
                            };
                            CommonOps.diagMatrix = function (ret, width, diagEl) {
                                if (ret == null) {
                                    ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(width, width);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(ret, 0);
                                }
                                for (var i = 0; i < width; i++) {
                                    ret.set(i, i, diagEl[i]);
                                }
                                return ret;
                            };
                            CommonOps.kron = function (A, B, C) {
                                var numColsC = A.numCols * B.numCols;
                                var numRowsC = A.numRows * B.numRows;
                                for (var i = 0; i < A.numRows; i++) {
                                    for (var j = 0; j < A.numCols; j++) {
                                        var a = A.get(i, j);
                                        for (var rowB = 0; rowB < B.numRows; rowB++) {
                                            for (var colB = 0; colB < B.numCols; colB++) {
                                                var val = a * B.get(rowB, colB);
                                                C.set(i * B.numRows + rowB, j * B.numCols + colB, val);
                                            }
                                        }
                                    }
                                }
                            };
                            CommonOps.extractDiag = function (src, dst) {
                                var N = Math.min(src.numRows, src.numCols);
                                if (!org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isVector(dst)) {
                                    throw new java.lang.RuntimeException("Expected a vector for dst.");
                                }
                                for (var i = 0; i < N; i++) {
                                    dst.setValueAtIndex(i, src.get(i, i));
                                }
                            };
                            CommonOps.extractRow = function (a, row, out) {
                                if (out == null) {
                                    out = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, a.numCols);
                                }
                                System.arraycopy(a.data, a.getIndex(row, 0), out.data, 0, a.numCols);
                                return out;
                            };
                            CommonOps.extractColumn = function (a, column, out) {
                                if (out == null) {
                                    out = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(a.numRows, 1);
                                }
                                var index = column;
                                for (var i = 0; i < a.numRows;) {
                                    out.data[i] = a.data[index];
                                }
                                return out;
                            };
                            CommonOps.elementMax = function (a) {
                                var size = a.getNumElements();
                                var max = a.getValueAtIndex(0);
                                for (var i = 1; i < size; i++) {
                                    var val = a.getValueAtIndex(i);
                                    if (val >= max) {
                                        max = val;
                                    }
                                }
                                return max;
                            };
                            CommonOps.elementMaxAbs = function (a) {
                                var size = a.getNumElements();
                                var max = 0;
                                for (var i = 0; i < size; i++) {
                                    var val = Math.abs(a.getValueAtIndex(i));
                                    if (val > max) {
                                        max = val;
                                    }
                                }
                                return max;
                            };
                            CommonOps.elementMin = function (a) {
                                var size = a.getNumElements();
                                var min = a.getValueAtIndex(0);
                                for (var i = 1; i < size; i++) {
                                    var val = a.getValueAtIndex(i);
                                    if (val < min) {
                                        min = val;
                                    }
                                }
                                return min;
                            };
                            CommonOps.elementMinAbs = function (a) {
                                var size = a.getNumElements();
                                var min = Math.abs(a.getValueAtIndex(0));
                                for (var i = 0; i < size; i++) {
                                    var val = Math.abs(a.getValueAtIndex(i));
                                    if (val < min) {
                                        min = val;
                                    }
                                }
                                return min;
                            };
                            CommonOps.elementMult2mat = function (a, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.times(i, b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.elementMult = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, a.getValueAtIndex(i) * b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.elementDiv2mat = function (a, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.div(i, b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.elementDiv = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, a.getValueAtIndex(i) / b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.elementSum = function (mat) {
                                var total = 0;
                                var size = mat.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    total += mat.getValueAtIndex(i);
                                }
                                return total;
                            };
                            CommonOps.elementSumAbs = function (mat) {
                                var total = 0;
                                var size = mat.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    total += Math.abs(mat.getValueAtIndex(i));
                                }
                                return total;
                            };
                            CommonOps.elementPower = function (A, B, C) {
                                var size = A.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    C.data[i] = Math.pow(A.data[i], B.data[i]);
                                }
                            };
                            CommonOps.elementPoweralpha = function (a, B, C) {
                                var size = B.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    C.data[i] = Math.pow(a, B.data[i]);
                                }
                            };
                            CommonOps.elementPowerMat = function (A, b, C) {
                                var size = A.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    C.data[i] = Math.pow(A.data[i], b);
                                }
                            };
                            CommonOps.elementLog = function (A, C) {
                                var size = A.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    C.data[i] = Math.log(A.data[i]);
                                }
                            };
                            CommonOps.elementExp = function (A, C) {
                                var size = A.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    C.data[i] = Math.exp(A.data[i]);
                                }
                            };
                            CommonOps.sumRows = function (input, output) {
                                if (output == null) {
                                    output = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(input.numRows, 1);
                                }
                                for (var row = 0; row < input.numRows; row++) {
                                    var total = 0;
                                    var end = (row + 1) * input.numCols;
                                    for (var index = row * input.numCols; index < end; index++) {
                                        total += input.data[index];
                                    }
                                    output.setValueAtIndex(row, total);
                                }
                                return output;
                            };
                            CommonOps.sumCols = function (input, output) {
                                if (output == null) {
                                    output = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, input.numCols);
                                }
                                for (var cols = 0; cols < input.numCols; cols++) {
                                    var total = 0;
                                    var index = cols;
                                    var end = index + input.numCols * input.numRows;
                                    for (; index < end; index += input.numCols) {
                                        total += input.data[index];
                                    }
                                    output.setValueAtIndex(cols, total);
                                }
                                return output;
                            };
                            CommonOps.addEquals = function (a, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.plus(i, b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.addEqualsbeta = function (a, beta, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.plus(i, beta * b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.add = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, a.getValueAtIndex(i) + b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.addbeta = function (a, beta, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, a.getValueAtIndex(i) + beta * b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.addalphabeta = function (alpha, a, beta, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, alpha * a.getValueAtIndex(i) + beta * b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.add3Mat = function (alpha, a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, alpha * a.getValueAtIndex(i) + b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.addval = function (a, val) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.plus(i, val);
                                }
                            };
                            CommonOps.addval2mat = function (a, val, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.data[i] = a.data[i] + val;
                                }
                            };
                            CommonOps.subtract = function (a, val, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.data[i] = a.data[i] - val;
                                }
                            };
                            CommonOps.subtract1 = function (val, a, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.data[i] = val - a.data[i];
                                }
                            };
                            CommonOps.subtractEquals = function (a, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.data[i] -= b.data[i];
                                }
                            };
                            CommonOps.subtract3mat = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.data[i] = a.data[i] - b.data[i];
                                }
                            };
                            CommonOps.scale = function (alpha, a) {
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    a.data[i] *= alpha;
                                }
                            };
                            CommonOps.scalemat = function (alpha, a, b) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    throw new java.lang.RuntimeException("Matrices must have the same shape");
                                }
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    b.data[i] = a.data[i] * alpha;
                                }
                            };
                            CommonOps.divide0 = function (alpha, a) {
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    a.data[i] = alpha / a.data[i];
                                }
                            };
                            CommonOps.divide = function (a, alpha) {
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    a.data[i] /= alpha;
                                }
                            };
                            CommonOps.divide2 = function (alpha, a, b) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    throw new java.lang.RuntimeException("Matrices must have the same shape");
                                }
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    b.data[i] = alpha / a.data[i];
                                }
                            };
                            CommonOps.divide3 = function (a, alpha, b) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    throw new java.lang.RuntimeException("Matrices must have the same shape");
                                }
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    b.data[i] = a.data[i] / alpha;
                                }
                            };
                            CommonOps.changeSign = function (a) {
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    a.data[i] = -a.data[i];
                                }
                            };
                            CommonOps.changeSign2mat = function (input, output) {
                                if (input.numRows != output.numRows || input.numCols != output.numCols) {
                                    throw new java.lang.RuntimeException("Matrices must have the same shape");
                                }
                                var size = input.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    output.data[i] = -input.data[i];
                                }
                            };
                            CommonOps.fill = function (a, value) {
                                java.util.Arrays.fill(a.data, 0, a.getNumElements(), value);
                            };
                            CommonOps.normalizeF = function (A) {
                                var val = org.kevoree.modeling.util.maths.matrix.CommonOps.normF(A);
                                if (val == 0) {
                                    return;
                                }
                                var size = A.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    A.div(i, val);
                                }
                            };
                            CommonOps.normF = function (a) {
                                var total = 0;
                                var scale = org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(a);
                                if (scale == 0.0) {
                                    return 0.0;
                                }
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    var val = a.getValueAtIndex(i) / scale;
                                    total += val * val;
                                }
                                return scale * Math.sqrt(total);
                            };
                            CommonOps.extract6M = function (src, srcY0, srcY1, srcX0, srcX1, dst, dstY0, dstX0) {
                                var w = srcX1 - srcX0;
                                var h = srcY1 - srcY0;
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractImpl(src, srcY0, srcX0, dst, dstY0, dstX0, h, w);
                            };
                            CommonOps.BLOCK_WIDTH = 60;
                            CommonOps.TRANSPOSE_SWITCH = 375;
                            CommonOps.MULT_COLUMN_SWITCH = 15;
                            CommonOps.MULT_TRANAB_COLUMN_SWITCH = 40;
                            CommonOps.MULT_INNER_SWITCH = 100;
                            CommonOps.EPS = Math.pow(2, -52);
                            CommonOps.TOL32 = 1e-4;
                            CommonOps.TOL64 = 1e-8;
                            CommonOps.CMULT_COLUMN_SWITCH = 7;
                            CommonOps.SWITCH_BLOCK64_CHOLESKY = 1000;
                            CommonOps.SWITCH_BLOCK64_QR = 1500;
                            CommonOps.BLOCK_WIDTH_CHOL = 20;
                            CommonOps.BLOCK_SIZE = CommonOps.BLOCK_WIDTH * CommonOps.BLOCK_WIDTH;
                            return CommonOps;
                        })();
                        matrix_1.CommonOps = CommonOps;
                        var Complex64F = (function () {
                            function Complex64F() {
                            }
                            Complex64F.prototype.getReal = function () {
                                return this.real;
                            };
                            Complex64F.prototype.getMagnitude = function () {
                                return Math.sqrt(this.real * this.real + this.imaginary * this.imaginary);
                            };
                            Complex64F.prototype.getMagnitude2 = function () {
                                return this.real * this.real + this.imaginary * this.imaginary;
                            };
                            Complex64F.prototype.setReal = function (real) {
                                this.real = real;
                            };
                            Complex64F.prototype.getImaginary = function () {
                                return this.imaginary;
                            };
                            Complex64F.prototype.setImaginary = function (imaginary) {
                                this.imaginary = imaginary;
                            };
                            Complex64F.prototype.setValues = function (real, imaginary) {
                                this.real = real;
                                this.imaginary = imaginary;
                            };
                            Complex64F.prototype.setComplex = function (a) {
                                this.real = a.real;
                                this.imaginary = a.imaginary;
                            };
                            Complex64F.prototype.isReal = function () {
                                return this.imaginary == 0.0;
                            };
                            Complex64F.prototype.toString = function () {
                                if (this.imaginary == 0) {
                                    return "" + this.real;
                                }
                                else {
                                    return this.real + " " + this.imaginary + "i";
                                }
                            };
                            Complex64F.prototype.plus = function (a) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                org.kevoree.modeling.util.maths.matrix.ComplexMath64F.plus(this, a, ret);
                                return ret;
                            };
                            Complex64F.prototype.minus = function (a) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                org.kevoree.modeling.util.maths.matrix.ComplexMath64F.minus(this, a, ret);
                                return ret;
                            };
                            Complex64F.prototype.times = function (a) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                org.kevoree.modeling.util.maths.matrix.ComplexMath64F.multiply(this, a, ret);
                                return ret;
                            };
                            Complex64F.prototype.divide = function (a) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                org.kevoree.modeling.util.maths.matrix.ComplexMath64F.divide(this, a, ret);
                                return ret;
                            };
                            return Complex64F;
                        })();
                        matrix_1.Complex64F = Complex64F;
                        var ComplexMath64F = (function () {
                            function ComplexMath64F() {
                            }
                            ComplexMath64F.conj = function (input, conj) {
                                conj.real = input.real;
                                conj.imaginary = -input.imaginary;
                            };
                            ComplexMath64F.plus = function (a, b, result) {
                                result.real = a.real + b.real;
                                result.imaginary = a.imaginary + b.imaginary;
                            };
                            ComplexMath64F.minus = function (a, b, result) {
                                result.real = a.real - b.real;
                                result.imaginary = a.imaginary - b.imaginary;
                            };
                            ComplexMath64F.multiply = function (a, b, result) {
                                result.real = a.real * b.real - a.imaginary * b.imaginary;
                                result.imaginary = a.real * b.imaginary + a.imaginary * b.real;
                            };
                            ComplexMath64F.divide = function (a, b, result) {
                                var norm = b.getMagnitude2();
                                result.real = (a.real * b.real + a.imaginary * b.imaginary) / norm;
                                result.imaginary = (a.imaginary * b.real - a.real * b.imaginary) / norm;
                            };
                            ComplexMath64F.root = function (a, N, k, result) {
                                var r = a.getMagnitude();
                                var theta = Math.atan2(a.imaginary, a.real);
                                r = Math.pow(r, 1.0 / N);
                                theta = (theta + 2.0 * k * Math.PI) / N;
                                result.real = r * Math.cos(theta);
                                result.imaginary = r * Math.sin(theta);
                            };
                            ComplexMath64F.sqrt = function (input, root) {
                                var r = input.getMagnitude();
                                var a = input.real;
                                root.real = Math.sqrt((r + a) / 2.0);
                                root.imaginary = Math.sqrt((r - a) / 2.0);
                                if (input.imaginary < 0) {
                                    root.imaginary = -root.imaginary;
                                }
                            };
                            return ComplexMath64F;
                        })();
                        matrix_1.ComplexMath64F = ComplexMath64F;
                        var DenseMatrix64F = (function () {
                            function DenseMatrix64F(numRows, numCols) {
                                this.data = new Float64Array(numRows * numCols);
                                this.numRows = numRows;
                                this.numCols = numCols;
                            }
                            DenseMatrix64F.prototype.constructorDenseMatrix = function (orig) {
                                var result = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(orig.numRows, orig.numCols);
                                System.arraycopy(orig.data, 0, result.data, 0, orig.getNumElements());
                                return result;
                            };
                            DenseMatrix64F.setIdentity = function (mat) {
                                var width = mat.numRows < mat.numCols ? mat.numRows : mat.numCols;
                                java.util.Arrays.fill(mat.data, 0, mat.getNumElements(), 0);
                                var index = 0;
                                for (var i = 0; i < width; i++) {
                                    mat.data[index] = 1;
                                    index += mat.numCols + 1;
                                }
                            };
                            DenseMatrix64F.widentity = function (width) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(width, width);
                                for (var i = 0; i < width; i++) {
                                    ret.cset(i, i, 1.0);
                                }
                                return ret;
                            };
                            DenseMatrix64F.identity = function (numRows, numCols) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                var small = numRows < numCols ? numRows : numCols;
                                for (var i = 0; i < small; i++) {
                                    ret.cset(i, i, 1.0);
                                }
                                return ret;
                            };
                            DenseMatrix64F.prototype.constructor1dArray = function (length) {
                                this.data = new Float64Array(length);
                            };
                            DenseMatrix64F.prototype.isInBounds = function (row, col) {
                                return (col >= 0 && col < this.numCols && row >= 0 && row < this.numRows);
                            };
                            DenseMatrix64F.prototype.zero = function () {
                                java.util.Arrays.fill(this.data, 0, this.getNumElements(), 0.0);
                            };
                            DenseMatrix64F.prototype.copy = function () {
                                return this.constructorDenseMatrix(this);
                            };
                            DenseMatrix64F.fill = function (a, value) {
                                java.util.Arrays.fill(a.data, 0, a.getNumElements(), value);
                            };
                            DenseMatrix64F.prototype.reshapeBoolean = function (numRows, numCols, saveValues) {
                                if (this.data.length < numRows * numCols) {
                                    var d = new Float64Array(numRows * numCols);
                                    if (saveValues) {
                                        System.arraycopy(this.data, 0, d, 0, this.getNumElements());
                                    }
                                    this.data = d;
                                }
                                this.numRows = numRows;
                                this.numCols = numCols;
                            };
                            DenseMatrix64F.prototype.cset = function (row, col, value) {
                                this.data[row * this.numCols + col] = value;
                            };
                            DenseMatrix64F.prototype.add = function (row, col, value) {
                                this.data[row * this.numCols + col] += value;
                            };
                            DenseMatrix64F.prototype.plus = function (index, val) {
                                return this.data[index] += val;
                            };
                            DenseMatrix64F.prototype.plusMatrix = function (matrix2) {
                                for (var i = 0; i < this.data.length; i++) {
                                    this.data[i] += matrix2.data[i];
                                }
                                return this;
                            };
                            DenseMatrix64F.prototype.scale = function (value) {
                                for (var i = 0; i < this.data.length; i++) {
                                    this.data[i] *= value;
                                }
                                return this;
                            };
                            DenseMatrix64F.prototype.minus = function (index, val) {
                                return this.data[index] -= val;
                            };
                            DenseMatrix64F.prototype.times = function (index, val) {
                                return this.data[index] *= val;
                            };
                            DenseMatrix64F.prototype.div = function (index, val) {
                                return this.data[index] /= val;
                            };
                            DenseMatrix64F.prototype.reshape = function (numRows, numCols) {
                                this.reshapeBoolean(numRows, numCols, false);
                            };
                            DenseMatrix64F.prototype.getNumRows = function () {
                                return this.numRows;
                            };
                            DenseMatrix64F.prototype.getNumCols = function () {
                                return this.numCols;
                            };
                            DenseMatrix64F.prototype.getData = function () {
                                return this.data;
                            };
                            DenseMatrix64F.prototype.get = function (row, col) {
                                return this.data[row * this.numCols + col];
                            };
                            DenseMatrix64F.prototype.getNumElements = function () {
                                return this.numRows * this.numCols;
                            };
                            DenseMatrix64F.prototype.getIndex = function (row, col) {
                                return row * this.numCols + col;
                            };
                            DenseMatrix64F.prototype.getValueAtIndex = function (index) {
                                return this.data[index];
                            };
                            DenseMatrix64F.prototype.setValueAtIndex = function (index, val) {
                                return this.data[index] = val;
                            };
                            DenseMatrix64F.prototype.setNumRows = function (numRows) {
                                this.numRows = numRows;
                            };
                            DenseMatrix64F.prototype.setNumCols = function (numCols) {
                                this.numCols = numCols;
                            };
                            DenseMatrix64F.prototype.setData = function (data) {
                                this.data = data;
                            };
                            DenseMatrix64F.prototype.setMatrix = function (b) {
                                this.reshape(b.numRows, b.numCols);
                                var dataLength = b.getNumElements();
                                System.arraycopy(b.data, 0, this.data, 0, dataLength);
                            };
                            DenseMatrix64F.prototype.set = function (row, col, value) {
                                this.data[row * this.numCols + col] = value;
                            };
                            DenseMatrix64F.prototype.setArray = function (numRows, numCols, rowMajor, data) {
                                this.reshapeBoolean(numRows, numCols, false);
                                var length = numRows * numCols;
                                if (rowMajor) {
                                    System.arraycopy(data, 0, this.data, 0, length);
                                }
                                else {
                                    var index = 0;
                                    for (var i = 0; i < numRows; i++) {
                                        for (var j = 0; j < numCols; j++) {
                                            this.data[index++] = data[j * numRows + i];
                                        }
                                    }
                                }
                            };
                            DenseMatrix64F.MULT_COLUMN_SWITCH = 15;
                            return DenseMatrix64F;
                        })();
                        matrix_1.DenseMatrix64F = DenseMatrix64F;
                        var MatrixFeatures = (function () {
                            function MatrixFeatures() {
                            }
                            MatrixFeatures.isZeros = function (m, tol) {
                                var length = m.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    if (Math.abs(m.getValueAtIndex(i)) > tol) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isVector = function (mat) {
                                return (mat.getNumCols() == 1 || mat.getNumRows() == 1);
                            };
                            MatrixFeatures.isSquare = function (mat) {
                                return mat.numCols == mat.numRows;
                            };
                            MatrixFeatures.isSymmetricDouble = function (m, tol) {
                                if (m.numCols != m.numRows) {
                                    return false;
                                }
                                var max = org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(m);
                                for (var i = 0; i < m.numRows; i++) {
                                    for (var j = 0; j < i; j++) {
                                        var a = m.get(i, j) / max;
                                        var b = m.get(j, i) / max;
                                        var diff = Math.abs(a - b);
                                        if (!(diff <= tol)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isSymmetric = function (m) {
                                return org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isSymmetricDouble(m, 0.0);
                            };
                            MatrixFeatures.isSkewSymmetric = function (A, tol) {
                                if (A.numCols != A.numRows) {
                                    return false;
                                }
                                for (var i = 0; i < A.numRows; i++) {
                                    for (var j = 0; j < i; j++) {
                                        var a = A.get(i, j);
                                        var b = A.get(j, i);
                                        var diff = Math.abs(a + b);
                                        if (!(diff <= tol)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isInverse = function (a, b, tol) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    return false;
                                }
                                var numRows = a.numRows;
                                var numCols = a.numCols;
                                for (var i = 0; i < numRows; i++) {
                                    for (var j = 0; j < numCols; j++) {
                                        var total = 0;
                                        for (var k = 0; k < numCols; k++) {
                                            total += a.get(i, k) * b.get(k, j);
                                        }
                                        if (i == j) {
                                            if (!(Math.abs(total - 1) <= tol)) {
                                                return false;
                                            }
                                        }
                                        else {
                                            if (!(Math.abs(total) <= tol)) {
                                                return false;
                                            }
                                        }
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isEqualsDouble = function (a, b, tol) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    return false;
                                }
                                if (tol == 0.0) {
                                    return org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isEquals(a, b);
                                }
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    if (!(tol >= Math.abs(a.getValueAtIndex(i) - b.getValueAtIndex(i)))) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isEquals = function (a, b) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    return false;
                                }
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    if (!(a.getValueAtIndex(i) == b.getValueAtIndex(i))) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isIdentical = function (a, b, tol) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    return false;
                                }
                                if (tol < 0) {
                                    throw new java.lang.RuntimeException("Tolerance must be greater than or equal to zero.");
                                }
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    var valA = a.getValueAtIndex(i);
                                    var valB = b.getValueAtIndex(i);
                                    var diff = Math.abs(valA - valB);
                                    if (tol >= diff) {
                                        continue;
                                    }
                                    return false;
                                }
                                return true;
                            };
                            MatrixFeatures.isIdentity = function (mat, tol) {
                                var index = 0;
                                for (var i = 0; i < mat.numRows; i++) {
                                    for (var j = 0; j < mat.numCols; j++) {
                                        if (i == j) {
                                            if (!(Math.abs(mat.getValueAtIndex(index++) - 1) <= tol)) {
                                                return false;
                                            }
                                        }
                                        else {
                                            if (!(Math.abs(mat.getValueAtIndex(index++)) <= tol)) {
                                                return false;
                                            }
                                        }
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isConstantVal = function (mat, val, tol) {
                                var index = 0;
                                for (var i = 0; i < mat.numRows; i++) {
                                    for (var j = 0; j < mat.numCols; j++) {
                                        if (!(Math.abs(mat.getValueAtIndex(index++) - val) <= tol)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isDiagonalPositive = function (a) {
                                for (var i = 0; i < a.numRows; i++) {
                                    if (!(a.get(i, i) >= 0)) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isFullRank = function (a) {
                                throw new java.lang.RuntimeException("Implement");
                            };
                            MatrixFeatures.isNegative = function (a, b, tol) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    throw new java.lang.RuntimeException("matrix dimensions must match");
                                }
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    if (!(Math.abs(a.getValueAtIndex(i) + b.getValueAtIndex(i)) <= tol)) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isUpperTriangle = function (A, hessenberg, tol) {
                                if (A.numRows != A.numCols) {
                                    return false;
                                }
                                for (var i = hessenberg + 1; i < A.numRows; i++) {
                                    for (var j = 0; j < i - hessenberg; j++) {
                                        if (!(Math.abs(A.get(i, j)) <= tol)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            };
                            return MatrixFeatures;
                        })();
                        matrix_1.MatrixFeatures = MatrixFeatures;
                        var MatrixMatrixMult = (function () {
                            function MatrixMatrixMult() {
                            }
                            MatrixMatrixMult.multTransA_smallMV = function (A, B, C) {
                                var cIndex = 0;
                                for (var i = 0; i < A.numCols; i++) {
                                    var total = 0.0;
                                    var indexA = i;
                                    for (var j = 0; j < A.numRows; j++) {
                                        total += A.getValueAtIndex(indexA) * B.getValueAtIndex(j);
                                        indexA += A.numCols;
                                    }
                                    C.setValueAtIndex(cIndex++, total);
                                }
                            };
                            MatrixMatrixMult.multTransA_reorderMV = function (A, B, C) {
                                if (A.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.fill(C, 0);
                                    return;
                                }
                                var B_val = B.getValueAtIndex(0);
                                for (var i = 0; i < A.numCols; i++) {
                                    C.setValueAtIndex(i, A.getValueAtIndex(i) * B_val);
                                }
                                var indexA = A.numCols;
                                for (var i = 1; i < A.numRows; i++) {
                                    B_val = B.getValueAtIndex(i);
                                    for (var j = 0; j < A.numCols; j++) {
                                        C.plus(j, A.getValueAtIndex(indexA++) * B_val);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_reorderMM = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.fill(c, 0);
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_smallMM = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA = function (a, b, c) {
                                if (b.numCols == 1) {
                                    if (a.numCols >= org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorderMV(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_smallMV(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.MULT_COLUMN_SWITCH || b.numCols >= org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorderMM(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_smallMM(a, b, c);
                                    }
                                }
                            };
                            MatrixMatrixMult.mult_reorder = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                var indexCbase = 0;
                                var endOfKLoop = b.numRows * b.numCols;
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexA = i * a.numCols;
                                    var indexB = 0;
                                    var indexC = indexCbase;
                                    var end = indexB + b.numCols;
                                    valA = a.getValueAtIndex(indexA++);
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    while (indexB != endOfKLoop) {
                                        indexC = indexCbase;
                                        end = indexB + b.numCols;
                                        valA = a.getValueAtIndex(indexA++);
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                    indexCbase += c.numCols;
                                }
                            };
                            MatrixMatrixMult.mult_small = function (a, b, c) {
                                var aIndexStart = 0;
                                var cIndex = 0;
                                for (var i = 0; i < a.numRows; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var total = 0;
                                        var indexA = aIndexStart;
                                        var indexB = j;
                                        var end = indexA + b.numRows;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB);
                                            indexB += b.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.mult_aux = function (a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(b.numRows);
                                }
                                for (var j = 0; j < b.numCols; j++) {
                                    for (var k = 0; k < b.numRows; k++) {
                                        aux[k] = b.get(k, j);
                                    }
                                    var indexA = 0;
                                    for (var i = 0; i < a.numRows; i++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numRows;) {
                                            total += a.getValueAtIndex(indexA++) * aux[k++];
                                        }
                                        c.setValueAtIndex(i * c.numCols + j, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_reorder = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_small = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0.0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransAB = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexB = 0;
                                    for (var j = 0; j < b.numRows; j++) {
                                        var indexA = i;
                                        var end = indexB + b.numCols;
                                        var total = 0.0;
                                        for (; indexB < end;) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB++);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransAB_aux = function (a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(a.numRows);
                                }
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var indexC = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var k = 0; k < b.numCols; k++) {
                                        aux[k] = a.get(k, i);
                                    }
                                    for (var j = 0; j < b.numRows; j++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numCols; k++) {
                                            total += aux[k] * b.get(j, k);
                                        }
                                        c.setValueAtIndex(indexC++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransB = function (a, b, c) {
                                var cIndex = 0;
                                var aIndexStart = 0;
                                for (var xA = 0; xA < a.numRows; xA++) {
                                    var end = aIndexStart + b.numCols;
                                    var indexB = 0;
                                    for (var xB = 0; xB < b.numRows; xB++) {
                                        var indexA = aIndexStart;
                                        var total = 0;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB++);
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_reorder = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var valA;
                                var indexCbase = 0;
                                var endOfKLoop = b.numRows * b.numCols;
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexA = i * a.numCols;
                                    var indexB = 0;
                                    var indexC = indexCbase;
                                    var end = indexB + b.numCols;
                                    valA = a.getValueAtIndex(indexA++);
                                    while (indexB < end) {
                                        c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    while (indexB != endOfKLoop) {
                                        indexC = indexCbase;
                                        end = indexB + b.numCols;
                                        valA = a.getValueAtIndex(indexA++);
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                    indexCbase += c.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_small = function (a, b, c) {
                                var aIndexStart = 0;
                                var cIndex = 0;
                                for (var i = 0; i < a.numRows; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var total = 0;
                                        var indexA = aIndexStart;
                                        var indexB = j;
                                        var end = indexA + b.numRows;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB);
                                            indexB += b.numCols;
                                        }
                                        c.plus(cIndex++, total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_aux = function (a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(b.numRows);
                                }
                                for (var j = 0; j < b.numCols; j++) {
                                    for (var k = 0; k < b.numRows; k++) {
                                        aux[k] = b.get(k, j);
                                    }
                                    var indexA = 0;
                                    for (var i = 0; i < a.numRows; i++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numRows;) {
                                            total += a.getValueAtIndex(indexA++) * aux[k++];
                                        }
                                        c.plus(i * c.numCols + j, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransA_reorder = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransA_small = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.plus(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransAB = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexB = 0;
                                    for (var j = 0; j < b.numRows; j++) {
                                        var indexA = i;
                                        var end = indexB + b.numCols;
                                        var total = 0;
                                        for (; indexB < end;) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB++);
                                            indexA += a.numCols;
                                        }
                                        c.plus(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransAB_aux = function (a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(a.numRows);
                                }
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var indexC = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var k = 0; k < b.numCols; k++) {
                                        aux[k] = a.get(k, i);
                                    }
                                    for (var j = 0; j < b.numRows; j++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numCols; k++) {
                                            total += aux[k] * b.get(j, k);
                                        }
                                        c.plus(indexC++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransB = function (a, b, c) {
                                var cIndex = 0;
                                var aIndexStart = 0;
                                for (var xA = 0; xA < a.numRows; xA++) {
                                    var end = aIndexStart + b.numCols;
                                    var indexB = 0;
                                    for (var xB = 0; xB < b.numRows; xB++) {
                                        var indexA = aIndexStart;
                                        var total = 0;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB++);
                                        }
                                        c.plus(cIndex++, total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.mult_reorderalpha = function (alpha, a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                var indexCbase = 0;
                                var endOfKLoop = b.numRows * b.numCols;
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexA = i * a.numCols;
                                    var indexB = 0;
                                    var indexC = indexCbase;
                                    var end = indexB + b.numCols;
                                    valA = alpha * a.getValueAtIndex(indexA++);
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    while (indexB != endOfKLoop) {
                                        indexC = indexCbase;
                                        end = indexB + b.numCols;
                                        valA = alpha * a.getValueAtIndex(indexA++);
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                    indexCbase += c.numCols;
                                }
                            };
                            MatrixMatrixMult.mult_smallalpha = function (alpha, a, b, c) {
                                var aIndexStart = 0;
                                var cIndex = 0;
                                for (var i = 0; i < a.numRows; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var total = 0;
                                        var indexA = aIndexStart;
                                        var indexB = j;
                                        var end = indexA + b.numRows;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB);
                                            indexB += b.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, alpha * total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.mult_auxalpha = function (alpha, a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(b.numRows);
                                }
                                for (var j = 0; j < b.numCols; j++) {
                                    for (var k = 0; k < b.numRows; k++) {
                                        aux[k] = b.get(k, j);
                                    }
                                    var indexA = 0;
                                    for (var i = 0; i < a.numRows; i++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numRows;) {
                                            total += a.getValueAtIndex(indexA++) * aux[k++];
                                        }
                                        c.setValueAtIndex(i * c.numCols + j, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_reorderalpha = function (alpha, a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = alpha * a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = alpha * a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_smallalpha = function (alpha, a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransABalpha = function (alpha, a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexB = 0;
                                    for (var j = 0; j < b.numRows; j++) {
                                        var indexA = i;
                                        var end = indexB + b.numCols;
                                        var total = 0;
                                        for (; indexB < end;) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB++);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransAB_auxalpha = function (alpha, a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(a.numRows);
                                }
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var indexC = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var k = 0; k < b.numCols; k++) {
                                        aux[k] = a.get(k, i);
                                    }
                                    for (var j = 0; j < b.numRows; j++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numCols; k++) {
                                            total += aux[k] * b.get(j, k);
                                        }
                                        c.setValueAtIndex(indexC++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransBalpha = function (alpha, a, b, c) {
                                var cIndex = 0;
                                var aIndexStart = 0;
                                for (var xA = 0; xA < a.numRows; xA++) {
                                    var end = aIndexStart + b.numCols;
                                    var indexB = 0;
                                    for (var xB = 0; xB < b.numRows; xB++) {
                                        var indexA = aIndexStart;
                                        var total = 0;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB++);
                                        }
                                        c.setValueAtIndex(cIndex++, alpha * total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_reorderalpha = function (alpha, a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var valA;
                                var indexCbase = 0;
                                var endOfKLoop = b.numRows * b.numCols;
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexA = i * a.numCols;
                                    var indexB = 0;
                                    var indexC = indexCbase;
                                    var end = indexB + b.numCols;
                                    valA = alpha * a.getValueAtIndex(indexA++);
                                    while (indexB < end) {
                                        c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    while (indexB != endOfKLoop) {
                                        indexC = indexCbase;
                                        end = indexB + b.numCols;
                                        valA = alpha * a.getValueAtIndex(indexA++);
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                    indexCbase += c.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_smallalpha = function (alpha, a, b, c) {
                                var aIndexStart = 0;
                                var cIndex = 0;
                                for (var i = 0; i < a.numRows; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var total = 0;
                                        var indexA = aIndexStart;
                                        var indexB = j;
                                        var end = indexA + b.numRows;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB);
                                            indexB += b.numCols;
                                        }
                                        c.plus(cIndex++, alpha * total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_auxalpha = function (alpha, a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(b.numRows);
                                }
                                for (var j = 0; j < b.numCols; j++) {
                                    for (var k = 0; k < b.numRows; k++) {
                                        aux[k] = b.get(k, j);
                                    }
                                    var indexA = 0;
                                    for (var i = 0; i < a.numRows; i++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numRows;) {
                                            total += a.getValueAtIndex(indexA++) * aux[k++];
                                        }
                                        c.plus(i * c.numCols + j, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransA_reorderalpha = function (alpha, a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = alpha * a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = alpha * a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransA_smallalpha = function (alpha, a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.plus(cIndex++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransABalpha = function (alpha, a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexB = 0;
                                    for (var j = 0; j < b.numRows; j++) {
                                        var indexA = i;
                                        var end = indexB + b.numCols;
                                        var total = 0;
                                        for (; indexB < end;) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB++);
                                            indexA += a.numCols;
                                        }
                                        c.plus(cIndex++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransAB_auxalpha = function (alpha, a, b, c, aux) {
                                if (aux == null) {
                                    aux = new Float64Array(a.numRows);
                                }
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var indexC = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var k = 0; k < b.numCols; k++) {
                                        aux[k] = a.get(k, i);
                                    }
                                    for (var j = 0; j < b.numRows; j++) {
                                        var total = 0;
                                        for (var k = 0; k < b.numCols; k++) {
                                            total += aux[k] * b.get(j, k);
                                        }
                                        c.plus(indexC++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAddTransBalpha = function (alpha, a, b, c) {
                                var cIndex = 0;
                                var aIndexStart = 0;
                                for (var xA = 0; xA < a.numRows; xA++) {
                                    var end = aIndexStart + b.numCols;
                                    var indexB = 0;
                                    for (var xB = 0; xB < b.numRows; xB++) {
                                        var indexA = aIndexStart;
                                        var total = 0;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB++);
                                        }
                                        c.plus(cIndex++, alpha * total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.MULT_COLUMN_SWITCH = 15;
                            return MatrixMatrixMult;
                        })();
                        matrix_1.MatrixMatrixMult = MatrixMatrixMult;
                        var MatrixMultProduct = (function () {
                            function MatrixMultProduct() {
                            }
                            MatrixMultProduct.outer = function (a, c) {
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexC1 = i * c.numCols + i;
                                    var indexC2 = indexC1;
                                    for (var j = i; j < a.numRows;) {
                                        var indexA = i * a.numCols;
                                        var indexB = j * a.numCols;
                                        var sum = 0;
                                        var end = indexA + a.numCols;
                                        for (; indexA < end;) {
                                            sum += a.data[indexA] * a.data[indexB];
                                        }
                                        c.data[indexC2] = c.data[indexC1++] = sum;
                                    }
                                }
                            };
                            MatrixMultProduct.inner_small = function (a, c) {
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = i; j < a.numCols; j++) {
                                        var indexC1 = i * c.numCols + j;
                                        var indexC2 = j * c.numCols + i;
                                        var indexA = i;
                                        var indexB = j;
                                        var sum = 0;
                                        var end = indexA + a.numRows * a.numCols;
                                        for (; indexA < end;) {
                                            sum += a.data[indexA] * a.data[indexB];
                                        }
                                        c.data[indexC1] = c.data[indexC2] = sum;
                                    }
                                }
                            };
                            MatrixMultProduct.inner_reorder = function (a, c) {
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC = i * c.numCols + i;
                                    var valAi = a.data[i];
                                    for (var j = i; j < a.numCols; j++) {
                                        c.data[indexC++] = valAi * a.data[j];
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        indexC = i * c.numCols + i;
                                        var indexB = k * a.numCols + i;
                                        valAi = a.data[indexB];
                                        for (var j = i; j < a.numCols; j++) {
                                            c.data[indexC++] += valAi * a.data[indexB++];
                                        }
                                    }
                                    indexC = i * c.numCols + i;
                                    var indexC2 = indexC;
                                    for (var j = i; j < a.numCols;) {
                                        c.data[indexC2] = c.data[indexC++];
                                    }
                                }
                            };
                            MatrixMultProduct.inner_reorder_upper = function (a, c) {
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC = i * c.numCols + i;
                                    var valAi = a.data[i];
                                    for (var j = i; j < a.numCols; j++) {
                                        c.data[indexC++] = valAi * a.data[j];
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        indexC = i * c.numCols + i;
                                        var indexB = k * a.numCols + i;
                                        valAi = a.data[indexB];
                                        for (var j = i; j < a.numCols; j++) {
                                            c.data[indexC++] += valAi * a.data[indexB++];
                                        }
                                    }
                                }
                            };
                            return MatrixMultProduct;
                        })();
                        matrix_1.MatrixMultProduct = MatrixMultProduct;
                        var MatrixVectorMult = (function () {
                            function MatrixVectorMult() {
                            }
                            MatrixVectorMult.mult = function (A, B, C) {
                                if (A.numCols == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(C, 0);
                                    return;
                                }
                                var indexA = 0;
                                var cIndex = 0;
                                var b0 = B.getValueAtIndex(0);
                                for (var i = 0; i < A.numRows; i++) {
                                    var total = A.getValueAtIndex(indexA++) * b0;
                                    for (var j = 1; j < A.numCols; j++) {
                                        total += A.getValueAtIndex(indexA++) * B.getValueAtIndex(j);
                                    }
                                    C.setValueAtIndex(cIndex++, total);
                                }
                            };
                            MatrixVectorMult.multAdd = function (A, B, C) {
                                if (A.numCols == 0) {
                                    return;
                                }
                                var indexA = 0;
                                var cIndex = 0;
                                for (var i = 0; i < A.numRows; i++) {
                                    var total = A.getValueAtIndex(indexA++) * B.getValueAtIndex(0);
                                    for (var j = 1; j < A.numCols; j++) {
                                        total += A.getValueAtIndex(indexA++) * B.getValueAtIndex(j);
                                    }
                                    C.plus(cIndex++, total);
                                }
                            };
                            MatrixVectorMult.multTransA_small = function (A, B, C) {
                                var cIndex = 0;
                                for (var i = 0; i < A.numCols; i++) {
                                    var total = 0;
                                    var indexA = i;
                                    for (var j = 0; j < A.numRows; j++) {
                                        total += A.getValueAtIndex(indexA) * B.getValueAtIndex(j);
                                        indexA += A.numCols;
                                    }
                                    C.setValueAtIndex(cIndex++, total);
                                }
                            };
                            MatrixVectorMult.multTransA_reorder = function (A, B, C) {
                                if (A.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(C, 0);
                                    return;
                                }
                                var B_val = B.getValueAtIndex(0);
                                for (var i = 0; i < A.numCols; i++) {
                                    C.setValueAtIndex(i, A.getValueAtIndex(i) * B_val);
                                }
                                var indexA = A.numCols;
                                for (var i = 1; i < A.numRows; i++) {
                                    B_val = B.getValueAtIndex(i);
                                    for (var j = 0; j < A.numCols; j++) {
                                        C.plus(j, A.getValueAtIndex(indexA++) * B_val);
                                    }
                                }
                            };
                            MatrixVectorMult.multAddTransA_small = function (A, B, C) {
                                var cIndex = 0;
                                for (var i = 0; i < A.numCols; i++) {
                                    var total = 0;
                                    var indexA = i;
                                    for (var j = 0; j < A.numRows; j++) {
                                        total += A.getValueAtIndex(indexA) * B.getValueAtIndex(j);
                                        indexA += A.numCols;
                                    }
                                    C.plus(cIndex++, total);
                                }
                            };
                            MatrixVectorMult.multAddTransA_reorder = function (A, B, C) {
                                if (A.numRows == 0) {
                                    return;
                                }
                                var indexA = 0;
                                for (var j = 0; j < A.numRows; j++) {
                                    var B_val = B.getValueAtIndex(j);
                                    for (var i = 0; i < A.numCols; i++) {
                                        C.plus(i, A.getValueAtIndex(indexA++) * B_val);
                                    }
                                }
                            };
                            return MatrixVectorMult;
                        })();
                        matrix_1.MatrixVectorMult = MatrixVectorMult;
                        var SimpleMatrix = (function () {
                            function SimpleMatrix(numRows, numCols) {
                                this.mat = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                            }
                            SimpleMatrix.prototype.getMatrix = function () {
                                return this.mat;
                            };
                            SimpleMatrix.prototype.setValue2D = function (row, col, value) {
                                this.mat.set(row, col, value);
                            };
                            SimpleMatrix.prototype.setValue1D = function (index, value) {
                                this.mat.setValueAtIndex(index, value);
                            };
                            SimpleMatrix.prototype.getValue2D = function (row, col) {
                                return this.mat.get(row, col);
                            };
                            SimpleMatrix.prototype.getValue1D = function (index) {
                                return this.mat.data[index];
                            };
                            SimpleMatrix.prototype.getIndex = function (row, col) {
                                return row * this.mat.numCols + col;
                            };
                            SimpleMatrix.prototype.mult = function (b) {
                                var ret = this.createMatrix(this.mat.numRows, b.getMatrix().numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.mult(this.mat, b.getMatrix(), ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.scale = function (val) {
                                var ret = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.scale(val, ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.plus = function (b) {
                                var ret = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.addEquals(ret.getMatrix(), b.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.copy = function () {
                                var ret = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                ret.getMatrix().setMatrix(this.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.numRows = function () {
                                return this.mat.numRows;
                            };
                            SimpleMatrix.prototype.numCols = function () {
                                return this.mat.numCols;
                            };
                            SimpleMatrix.prototype.getNumElements = function () {
                                return this.mat.getNumElements();
                            };
                            SimpleMatrix.prototype.extractDiag = function () {
                                var N = Math.min(this.mat.numCols, this.mat.numRows);
                                var diag = this.createMatrix(N, 1);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractDiag(this.mat, diag.getMatrix());
                                return diag;
                            };
                            SimpleMatrix.prototype.isIdentical = function (a, tol) {
                                return org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isIdentical(this.mat, a.getMatrix(), tol);
                            };
                            SimpleMatrix.prototype.trace = function () {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.trace(this.mat);
                            };
                            SimpleMatrix.prototype.elementMaxAbs = function () {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(this.mat);
                            };
                            SimpleMatrix.prototype.elementSum = function () {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.elementSum(this.mat);
                            };
                            SimpleMatrix.prototype.elementMult = function (b) {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementMult(this.mat, b.getMatrix(), c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.elementDiv = function (b) {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementDiv(this.mat, b.getMatrix(), c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.elementPowerMatrix = function (b) {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementPower(this.mat, b.getMatrix(), c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.elementPower = function (b) {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementPowerMat(this.mat, b, c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.elementExp = function () {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementExp(this.mat, c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.elementLog = function () {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementLog(this.mat, c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.negative = function () {
                                var A = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.changeSign(A.getMatrix());
                                return A;
                            };
                            SimpleMatrix.prototype.isInBounds = function (row, col) {
                                return row >= 0 && col >= 0 && row < this.mat.numRows && col < this.mat.numCols;
                            };
                            SimpleMatrix.prototype.printDimensions = function () {
                                System.out.println("[rows = " + this.numRows() + " , cols = " + this.numCols() + " ]");
                            };
                            SimpleMatrix.prototype.transpose = function () {
                                var ret = this.createMatrix(this.mat.numCols, this.mat.numRows);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(this.mat, ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.wrap = function (internalMat) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(internalMat.numRows, internalMat.numCols);
                                ret.mat = internalMat;
                                return ret;
                            };
                            SimpleMatrix.identity = function (width) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(width, width);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(ret.mat);
                                return ret;
                            };
                            SimpleMatrix.prototype.minus = function (b) {
                                var ret = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.subtract3mat(this.getMatrix(), b.getMatrix(), ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.invert = function () {
                                var ret = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.invert(this.mat, ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.determinant = function () {
                                var ret = org.kevoree.modeling.util.maths.matrix.CommonOps.det(this.mat);
                                return ret;
                            };
                            SimpleMatrix.prototype.createMatrix = function (numRows, numCols) {
                                var sm = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(numRows, numCols);
                                return sm;
                            };
                            SimpleMatrix.prototype.extractVector = function (extractRow, element) {
                                var length = extractRow ? this.mat.numCols : this.mat.numRows;
                                var ret = extractRow ? this.createMatrix(1, length) : this.createMatrix(length, 1);
                                if (extractRow) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.mat, element, 0, length, true, 0, ret.getMatrix());
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.mat, 0, element, length, false, 0, ret.getMatrix());
                                }
                                return ret;
                            };
                            SimpleMatrix.prototype.eig = function () {
                                return new org.kevoree.modeling.util.maths.matrix.solvers.SimpleEVD(this.mat);
                            };
                            SimpleMatrix.prototype.svd = function (compact) {
                                return new org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD(this.mat, compact);
                            };
                            SimpleMatrix.prototype.combine = function (insertRow, insertCol, B) {
                                var maxRow = insertRow + B.numRows();
                                var maxCol = insertCol + B.numCols();
                                var ret;
                                if (maxRow > this.mat.numRows || maxCol > this.mat.numCols) {
                                    var M = Math.max(maxRow, this.mat.numRows);
                                    var N = Math.max(maxCol, this.mat.numCols);
                                    ret = this.createMatrix(M, N);
                                    ret.insertIntoThis(0, 0, this);
                                }
                                else {
                                    ret = this.copy();
                                }
                                ret.insertIntoThis(insertRow, insertCol, B);
                                return ret;
                            };
                            SimpleMatrix.prototype.insertIntoThis = function (insertRow, insertCol, B) {
                                org.kevoree.modeling.util.maths.matrix.CommonOps.insert(B.getMatrix(), this.mat, insertRow, insertCol);
                            };
                            return SimpleMatrix;
                        })();
                        matrix_1.SimpleMatrix = SimpleMatrix;
                        var SimpleMatrixHashable = (function (_super) {
                            __extends(SimpleMatrixHashable, _super);
                            function SimpleMatrixHashable(m) {
                                _super.call(this, m.numRows(), m.numCols());
                                this.mat = m.getMatrix();
                            }
                            SimpleMatrixHashable.prototype.equals = function (obj) {
                                var m = obj;
                                if (m.isIdentical(this, 1E-30)) {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            };
                            SimpleMatrixHashable.prototype.hashCode = function () {
                                return this.getValue2D(this.numRows() - 1, 0);
                            };
                            return SimpleMatrixHashable;
                        })(org.kevoree.modeling.util.maths.matrix.SimpleMatrix);
                        matrix_1.SimpleMatrixHashable = SimpleMatrixHashable;
                        var TransposeAlgs = (function () {
                            function TransposeAlgs() {
                            }
                            TransposeAlgs.square = function (mat) {
                                var index = 1;
                                var indexEnd = mat.numCols;
                                for (var i = 0; i < mat.numRows;) {
                                    var indexOther = (i + 1) * mat.numCols + i;
                                    for (; index < indexEnd;) {
                                        var val = mat.data[index];
                                        mat.data[index] = mat.data[indexOther];
                                        mat.data[indexOther] = val;
                                    }
                                }
                            };
                            TransposeAlgs.block = function (A, A_tran, blockLength) {
                                for (var i = 0; i < A.numRows; i += blockLength) {
                                    var blockHeight = Math.min(blockLength, A.numRows - i);
                                    var indexSrc = i * A.numCols;
                                    var indexDst = i;
                                    for (var j = 0; j < A.numCols; j += blockLength) {
                                        var blockWidth = Math.min(blockLength, A.numCols - j);
                                        var indexSrcEnd = indexSrc + blockWidth;
                                        for (; indexSrc < indexSrcEnd; indexSrc++) {
                                            var rowSrc = indexSrc;
                                            var rowDst = indexDst;
                                            var end = rowDst + blockHeight;
                                            for (; rowDst < end; rowSrc += A.numCols) {
                                                A_tran.data[rowDst++] = A.data[rowSrc];
                                            }
                                            indexDst += A_tran.numCols;
                                        }
                                    }
                                }
                            };
                            TransposeAlgs.standard = function (A, A_tran) {
                                var index = 0;
                                for (var i = 0; i < A_tran.numRows; i++) {
                                    var index2 = i;
                                    var end = index + A_tran.numCols;
                                    while (index < end) {
                                        A_tran.data[index++] = A.data[index2];
                                        index2 += A.numCols;
                                    }
                                }
                            };
                            return TransposeAlgs;
                        })();
                        matrix_1.TransposeAlgs = TransposeAlgs;
                        var VectorVectorMult = (function () {
                            function VectorVectorMult() {
                            }
                            VectorVectorMult.innerProd = function (x, y) {
                                var m = x.getNumElements();
                                var total = 0;
                                for (var i = 0; i < m; i++) {
                                    total += x.getValueAtIndex(i) * y.getValueAtIndex(i);
                                }
                                return total;
                            };
                            VectorVectorMult.innerProdA = function (x, A, y) {
                                var n = A.numRows;
                                var m = A.numCols;
                                var result = 0;
                                for (var i = 0; i < m; i++) {
                                    var total = 0;
                                    for (var j = 0; j < n; j++) {
                                        total += x.getValueAtIndex(j) * A.get(j, i);
                                    }
                                    result += total * y.getValueAtIndex(i);
                                }
                                return result;
                            };
                            VectorVectorMult.innerProdTranA = function (x, A, y) {
                                var n = A.numRows;
                                var result = 0;
                                for (var i = 0; i < n; i++) {
                                    var total = 0;
                                    for (var j = 0; j < n; j++) {
                                        total += x.getValueAtIndex(j) * A.get(i, j);
                                    }
                                    result += total * y.getValueAtIndex(i);
                                }
                                return result;
                            };
                            VectorVectorMult.outerProd = function (x, y, A) {
                                var m = A.numRows;
                                var n = A.numCols;
                                var index = 0;
                                for (var i = 0; i < m; i++) {
                                    var xdat = x.getValueAtIndex(i);
                                    for (var j = 0; j < n; j++) {
                                        A.setValueAtIndex(index++, xdat * y.getValueAtIndex(j));
                                    }
                                }
                            };
                            VectorVectorMult.addOuterProd = function (gamma, x, y, A) {
                                var m = A.numRows;
                                var n = A.numCols;
                                var index = 0;
                                if (gamma == 1.0) {
                                    for (var i = 0; i < m; i++) {
                                        var xdat = x.getValueAtIndex(i);
                                        for (var j = 0; j < n; j++) {
                                            A.plus(index++, xdat * y.getValueAtIndex(j));
                                        }
                                    }
                                }
                                else {
                                    for (var i = 0; i < m; i++) {
                                        var xdat = x.getValueAtIndex(i);
                                        for (var j = 0; j < n; j++) {
                                            A.plus(index++, gamma * xdat * y.getValueAtIndex(j));
                                        }
                                    }
                                }
                            };
                            VectorVectorMult.householder = function (gamma, u, x, y) {
                                var n = u.getNumElements();
                                var sum = 0;
                                for (var i = 0; i < n; i++) {
                                    sum += u.getValueAtIndex(i) * x.getValueAtIndex(i);
                                }
                                for (var i = 0; i < n; i++) {
                                    y.setValueAtIndex(i, x.getValueAtIndex(i) + gamma * u.getValueAtIndex(i) * sum);
                                }
                            };
                            VectorVectorMult.rank1Update4Mat = function (gamma, A, u, w, B) {
                                var n = u.getNumElements();
                                var matrixIndex = 0;
                                for (var i = 0; i < n; i++) {
                                    var elementU = u.data[i];
                                    for (var j = 0; j < n;) {
                                        B.data[matrixIndex] = A.data[matrixIndex] + gamma * elementU * w.data[j];
                                    }
                                }
                            };
                            VectorVectorMult.rank1Update = function (gamma, A, u, w) {
                                var n = u.getNumElements();
                                var matrixIndex = 0;
                                for (var i = 0; i < n; i++) {
                                    var elementU = u.data[i];
                                    for (var j = 0; j < n; j++) {
                                        A.data[matrixIndex++] += gamma * elementU * w.data[j];
                                    }
                                }
                            };
                            return VectorVectorMult;
                        })();
                        matrix_1.VectorVectorMult = VectorVectorMult;
                        var solvers;
                        (function (solvers) {
                            var AdjLinearSolverQr = (function () {
                                function AdjLinearSolverQr() {
                                    this.maxRows = -1;
                                    this.maxCols = -1;
                                    this.decomposer = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64();
                                }
                                AdjLinearSolverQr.prototype.setA = function (A) {
                                    if (A.numRows > this.maxRows || A.numCols > this.maxCols) {
                                        this.setMaxSize(A.numRows, A.numCols);
                                    }
                                    this.numRows = A.numRows;
                                    this.numCols = A.numCols;
                                    if (!this.decomposer.decompose(A)) {
                                        return false;
                                    }
                                    this.Q.reshapeBoolean(this.numRows, this.numRows, false);
                                    this.R.reshapeBoolean(this.numRows, this.numCols, false);
                                    this.decomposer.getQ(this.Q, false);
                                    this.decomposer.getR(this.R, false);
                                    return true;
                                };
                                AdjLinearSolverQr.prototype.solveU = function (U, b, n) {
                                    for (var i = n - 1; i >= 0; i--) {
                                        var sum = b[i];
                                        var indexU = i * n + i + 1;
                                        for (var j = i + 1; j < n; j++) {
                                            sum -= U[indexU++] * b[j];
                                        }
                                        b[i] = sum / U[i * n + i];
                                    }
                                };
                                AdjLinearSolverQr.prototype.solve = function (B, X) {
                                    var BnumCols = B.numCols;
                                    this.Y.reshapeBoolean(this.numRows, 1, false);
                                    this.Z.reshapeBoolean(this.numRows, 1, false);
                                    for (var colB = 0; colB < BnumCols; colB++) {
                                        for (var i = 0; i < this.numRows; i++) {
                                            this.Y.data[i] = B.get(i, colB);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA(this.Q, this.Y, this.Z);
                                        this.solveU(this.R.data, this.Z.data, this.numCols);
                                        for (var i = 0; i < this.numCols; i++) {
                                            X.cset(i, colB, this.Z.data[i]);
                                        }
                                    }
                                };
                                AdjLinearSolverQr.prototype.setMaxSize = function (maxRows, maxCols) {
                                    maxRows += 5;
                                    this.maxRows = maxRows;
                                    this.maxCols = maxCols;
                                    this.Q = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, maxRows);
                                    this.R = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, maxCols);
                                    this.Y = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, 1);
                                    this.Z = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, 1);
                                };
                                return AdjLinearSolverQr;
                            })();
                            solvers.AdjLinearSolverQr = AdjLinearSolverQr;
                            var LUDecompositionAlt_D64 = (function () {
                                function LUDecompositionAlt_D64() {
                                    this.maxWidth = -1;
                                }
                                LUDecompositionAlt_D64.prototype.setExpectedMaxSize = function (numRows, numCols) {
                                    this.LU = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                    this.dataLU = this.LU.data;
                                    this.maxWidth = Math.max(numRows, numCols);
                                    this.vv = new Float64Array(this.maxWidth);
                                    this.indx = new Int32Array(this.maxWidth);
                                    this.pivot = new Int32Array(this.maxWidth);
                                };
                                LUDecompositionAlt_D64.prototype.getLU = function () {
                                    return this.LU;
                                };
                                LUDecompositionAlt_D64.prototype.getIndx = function () {
                                    return this.indx;
                                };
                                LUDecompositionAlt_D64.prototype.getPivot = function () {
                                    return this.pivot;
                                };
                                LUDecompositionAlt_D64.prototype.getLower = function (lower) {
                                    var numRows = this.LU.numRows;
                                    var numCols = this.LU.numRows < this.LU.numCols ? this.LU.numRows : this.LU.numCols;
                                    if (lower == null) {
                                        lower = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.fill(lower, 0);
                                    }
                                    for (var i = 0; i < numCols; i++) {
                                        lower.set(i, i, 1.0);
                                        for (var j = 0; j < i; j++) {
                                            lower.set(i, j, this.LU.get(i, j));
                                        }
                                    }
                                    if (numRows > numCols) {
                                        for (var i = numCols; i < numRows; i++) {
                                            for (var j = 0; j < numCols; j++) {
                                                lower.set(i, j, this.LU.get(i, j));
                                            }
                                        }
                                    }
                                    return lower;
                                };
                                LUDecompositionAlt_D64.prototype.getUpper = function (upper) {
                                    var numRows = this.LU.numRows < this.LU.numCols ? this.LU.numRows : this.LU.numCols;
                                    var numCols = this.LU.numCols;
                                    if (upper == null) {
                                        upper = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.fill(upper, 0);
                                    }
                                    for (var i = 0; i < numRows; i++) {
                                        for (var j = i; j < numCols; j++) {
                                            upper.set(i, j, this.LU.get(i, j));
                                        }
                                    }
                                    return upper;
                                };
                                LUDecompositionAlt_D64.prototype.decomposeCommonInit = function (a) {
                                    if (a.numRows > this.maxWidth || a.numCols > this.maxWidth) {
                                        this.setExpectedMaxSize(a.numRows, a.numCols);
                                    }
                                    this.m = a.numRows;
                                    this.n = a.numCols;
                                    this.LU.setMatrix(a);
                                    for (var i = 0; i < this.m; i++) {
                                        this.pivot[i] = i;
                                    }
                                    this.pivsign = 1;
                                };
                                LUDecompositionAlt_D64.prototype._solveVectorInternal = function (vv) {
                                    var ii = 0;
                                    for (var i = 0; i < this.n; i++) {
                                        var ip = this.indx[i];
                                        var sum = vv[ip];
                                        vv[ip] = vv[i];
                                        if (ii != 0) {
                                            var index = i * this.n + ii - 1;
                                            for (var j = ii - 1; j < i; j++) {
                                                sum -= this.dataLU[index++] * vv[j];
                                            }
                                        }
                                        else {
                                            if (sum != 0.0) {
                                                ii = i + 1;
                                            }
                                        }
                                        vv[i] = sum;
                                    }
                                    org.kevoree.modeling.util.maths.matrix.solvers.TriangularSolver.solveU2arr(this.dataLU, vv, this.n);
                                };
                                LUDecompositionAlt_D64.prototype._getVV = function () {
                                    return this.vv;
                                };
                                LUDecompositionAlt_D64.prototype.computeDeterminant = function () {
                                    var ret = this.pivsign;
                                    var total = this.m * this.n;
                                    for (var i = 0; i < total; i += this.n + 1) {
                                        ret *= this.dataLU[i];
                                    }
                                    return ret;
                                };
                                LUDecompositionAlt_D64.prototype.decompose = function (a) {
                                    this.decomposeCommonInit(a);
                                    var LUcolj = this.vv;
                                    for (var j = 0; j < this.n; j++) {
                                        for (var i = 0; i < this.m; i++) {
                                            LUcolj[i] = this.dataLU[i * this.n + j];
                                        }
                                        for (var i = 0; i < this.m; i++) {
                                            var rowIndex = i * this.n;
                                            var kmax = i < j ? i : j;
                                            var s = 0.0;
                                            for (var k = 0; k < kmax; k++) {
                                                s += this.dataLU[rowIndex + k] * LUcolj[k];
                                            }
                                            this.dataLU[rowIndex + j] = LUcolj[i] -= s;
                                        }
                                        var p = j;
                                        var max = Math.abs(LUcolj[p]);
                                        for (var i = j + 1; i < this.m; i++) {
                                            var v = Math.abs(LUcolj[i]);
                                            if (v > max) {
                                                p = i;
                                                max = v;
                                            }
                                        }
                                        if (p != j) {
                                            var rowP = p * this.n;
                                            var rowJ = j * this.n;
                                            var endP = rowP + this.n;
                                            for (; rowP < endP;) {
                                                var t = this.dataLU[rowP];
                                                this.dataLU[rowP] = this.dataLU[rowJ];
                                                this.dataLU[rowJ] = t;
                                            }
                                            var k = this.pivot[p];
                                            this.pivot[p] = this.pivot[j];
                                            this.pivot[j] = k;
                                            this.pivsign = -this.pivsign;
                                        }
                                        this.indx[j] = p;
                                        if (j < this.m) {
                                            var lujj = this.dataLU[j * this.n + j];
                                            if (lujj != 0) {
                                                for (var i = j + 1; i < this.m; i++) {
                                                    this.dataLU[i * this.n + j] /= lujj;
                                                }
                                            }
                                        }
                                    }
                                    return true;
                                };
                                return LUDecompositionAlt_D64;
                            })();
                            solvers.LUDecompositionAlt_D64 = LUDecompositionAlt_D64;
                            var LinearSolverLu_D64 = (function () {
                                function LinearSolverLu_D64(decomp) {
                                    this.doImprove = false;
                                    this.decomp = decomp;
                                }
                                LinearSolverLu_D64.prototype.getA = function () {
                                    return this.A;
                                };
                                LinearSolverLu_D64.prototype._setA = function (A) {
                                    this.A = A;
                                    this.numRows = A.numRows;
                                    this.numCols = A.numCols;
                                };
                                LinearSolverLu_D64.prototype.setA = function (A) {
                                    this._setA(A);
                                    return this.decomp.decompose(A);
                                };
                                LinearSolverLu_D64.prototype.invert = function (A_inv) {
                                    var vv = this.decomp._getVV();
                                    var LU = this.decomp.getLU();
                                    var n = this.A.numCols;
                                    var dataInv = A_inv.data;
                                    for (var j = 0; j < n; j++) {
                                        for (var i = 0; i < n; i++) {
                                            vv[i] = i == j ? 1 : 0;
                                        }
                                        this.decomp._solveVectorInternal(vv);
                                        var index = j;
                                        for (var i = 0; i < n;) {
                                            dataInv[index] = vv[i];
                                        }
                                    }
                                };
                                LinearSolverLu_D64.prototype.improveSol = function (b, x) {
                                    var dataA = this.A.data;
                                    var dataB = b.data;
                                    var dataX = x.data;
                                    var nc = b.numCols;
                                    var n = b.numCols;
                                    var vv = this.decomp._getVV();
                                    for (var k = 0; k < nc; k++) {
                                        for (var i = 0; i < n; i++) {
                                            var sdp = -dataB[i * nc + k];
                                            for (var j = 0; j < n; j++) {
                                                sdp += dataA[i * n + j] * dataX[j * nc + k];
                                            }
                                            vv[i] = sdp;
                                        }
                                        this.decomp._solveVectorInternal(vv);
                                        for (var i = 0; i < n; i++) {
                                            dataX[i * nc + k] -= vv[i];
                                        }
                                    }
                                };
                                LinearSolverLu_D64.prototype.modifiesA = function () {
                                    return false;
                                };
                                LinearSolverLu_D64.prototype.modifiesB = function () {
                                    return false;
                                };
                                LinearSolverLu_D64.prototype.solve = function (b, x) {
                                    var numCols = b.numCols;
                                    var dataB = b.data;
                                    var dataX = x.data;
                                    var vv = this.decomp._getVV();
                                    for (var j = 0; j < numCols; j++) {
                                        var index = j;
                                        for (var i = 0; i < this.numCols;) {
                                            vv[i] = dataB[index];
                                        }
                                        this.decomp._solveVectorInternal(vv);
                                        index = j;
                                        for (var i = 0; i < this.numCols;) {
                                            dataX[index] = vv[i];
                                        }
                                    }
                                    if (this.doImprove) {
                                        this.improveSol(b, x);
                                    }
                                };
                                return LinearSolverLu_D64;
                            })();
                            solvers.LinearSolverLu_D64 = LinearSolverLu_D64;
                            var SimpleEVD = (function () {
                                function SimpleEVD(mat) {
                                    this.mat = mat;
                                    this.eig = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SwitchingEigenDecomposition(mat.numCols, true, 1e-8);
                                    if (!this.eig.decompose(mat)) {
                                        throw new java.lang.RuntimeException("Eigenvalue Decomposition failed");
                                    }
                                }
                                SimpleEVD.prototype.getNumberOfEigenvalues = function () {
                                    return this.eig.getNumberOfEigenvalues();
                                };
                                SimpleEVD.prototype.getEigenvalue = function (index) {
                                    return this.eig.getEigenvalue(index);
                                };
                                SimpleEVD.prototype.getEigenVector = function (index) {
                                    return org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.eig.getEigenVector(index));
                                };
                                SimpleEVD.prototype.getEVD = function () {
                                    return this.eig;
                                };
                                SimpleEVD.prototype.getIndexMax = function () {
                                    var indexMax = 0;
                                    var max = this.getEigenvalue(0).getMagnitude2();
                                    var N = this.getNumberOfEigenvalues();
                                    for (var i = 1; i < N; i++) {
                                        var m = this.getEigenvalue(i).getMagnitude2();
                                        if (m > max) {
                                            max = m;
                                            indexMax = i;
                                        }
                                    }
                                    return indexMax;
                                };
                                SimpleEVD.prototype.getIndexMin = function () {
                                    var indexMin = 0;
                                    var min = this.getEigenvalue(0).getMagnitude2();
                                    var N = this.getNumberOfEigenvalues();
                                    for (var i = 1; i < N; i++) {
                                        var m = this.getEigenvalue(i).getMagnitude2();
                                        if (m < min) {
                                            min = m;
                                            indexMin = i;
                                        }
                                    }
                                    return indexMin;
                                };
                                return SimpleEVD;
                            })();
                            solvers.SimpleEVD = SimpleEVD;
                            var SimpleSVD = (function () {
                                function SimpleSVD(mat, compact) {
                                    this.mat = mat;
                                    this.svd = new org.kevoree.modeling.util.maths.matrix.solvers.SvdImplicitQrDecompose_D64(compact, true, true, false);
                                    if (!this.svd.decompose(mat)) {
                                        throw new java.lang.RuntimeException("Decomposition failed");
                                    }
                                    this.U = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.svd.getU(null, false));
                                    this.W = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.svd.getW(null));
                                    this.V = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.svd.getV(null, false));
                                    org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.descendingOrder(this.U.getMatrix(), false, this.W.getMatrix(), this.V.getMatrix(), false);
                                    this.tol = org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.singularThreshold(this.svd);
                                }
                                SimpleSVD.swapRowOrCol = function (M, tran, i, bigIndex) {
                                    var tmp;
                                    if (tran) {
                                        for (var col = 0; col < M.numCols; col++) {
                                            tmp = M.get(i, col);
                                            M.set(i, col, M.get(bigIndex, col));
                                            M.set(bigIndex, col, tmp);
                                        }
                                    }
                                    else {
                                        for (var row = 0; row < M.numRows; row++) {
                                            tmp = M.get(row, i);
                                            M.set(row, i, M.get(row, bigIndex));
                                            M.set(row, bigIndex, tmp);
                                        }
                                    }
                                };
                                SimpleSVD.singularThreshold = function (svd) {
                                    var largest = 0;
                                    var w = svd.getSingularValues();
                                    var N = svd.numberOfSingularValues();
                                    for (var j = 0; j < N; j++) {
                                        if (w[j] > largest) {
                                            largest = w[j];
                                        }
                                    }
                                    var M = Math.max(svd.getNumCols(), svd.getNumRows());
                                    return M * largest * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                };
                                SimpleSVD.descendingOrder = function (U, tranU, W, V, tranV) {
                                    var numSingular = Math.min(W.numRows, W.numCols);
                                    for (var i = 0; i < numSingular; i++) {
                                        var bigValue = -1;
                                        var bigIndex = -1;
                                        for (var j = i; j < numSingular; j++) {
                                            var v = W.get(j, j);
                                            if (v > bigValue) {
                                                bigValue = v;
                                                bigIndex = j;
                                            }
                                        }
                                        if (bigIndex == i) {
                                            continue;
                                        }
                                        if (bigIndex == -1) {
                                            break;
                                        }
                                        var tmp = W.get(i, i);
                                        W.set(i, i, bigValue);
                                        W.set(bigIndex, bigIndex, tmp);
                                        if (V != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.swapRowOrCol(V, tranV, i, bigIndex);
                                        }
                                        if (U != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.swapRowOrCol(U, tranU, i, bigIndex);
                                        }
                                    }
                                };
                                SimpleSVD.prototype.getU = function () {
                                    return this.U;
                                };
                                SimpleSVD.prototype.getW = function () {
                                    return this.W;
                                };
                                SimpleSVD.prototype.getV = function () {
                                    return this.V;
                                };
                                return SimpleSVD;
                            })();
                            solvers.SimpleSVD = SimpleSVD;
                            var SvdImplicitQrAlgorithm = (function () {
                                function SvdImplicitQrAlgorithm() {
                                    this.rand = new java.util.Random();
                                    this.eigenSmall = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.EigenvalueSmall();
                                    this.exceptionalThresh = 15;
                                    this.maxIterations = this.exceptionalThresh * 100;
                                    this.fastValues = false;
                                }
                                SvdImplicitQrAlgorithm.prototype.getUt = function () {
                                    return this.Ut;
                                };
                                SvdImplicitQrAlgorithm.prototype.setUt = function (ut) {
                                    this.Ut = ut;
                                };
                                SvdImplicitQrAlgorithm.prototype.getVt = function () {
                                    return this.Vt;
                                };
                                SvdImplicitQrAlgorithm.prototype.setVt = function (vt) {
                                    this.Vt = vt;
                                };
                                SvdImplicitQrAlgorithm.prototype.setMatrix = function (numRows, numCols, diag, off) {
                                    this.initParam(numRows, numCols);
                                    this.diag = diag;
                                    this.off = off;
                                    this.maxValue = Math.abs(diag[0]);
                                    for (var i = 1; i < this.N; i++) {
                                        var a = Math.abs(diag[i]);
                                        var b = Math.abs(off[i - 1]);
                                        if (a > this.maxValue) {
                                            this.maxValue = Math.abs(a);
                                        }
                                        if (b > this.maxValue) {
                                            this.maxValue = Math.abs(b);
                                        }
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.swapDiag = function (diag) {
                                    var ret = this.diag;
                                    this.diag = diag;
                                    return ret;
                                };
                                SvdImplicitQrAlgorithm.prototype.swapOff = function (off) {
                                    var ret = this.off;
                                    this.off = off;
                                    return ret;
                                };
                                SvdImplicitQrAlgorithm.prototype.setMaxValue = function (maxValue) {
                                    this.maxValue = maxValue;
                                };
                                SvdImplicitQrAlgorithm.prototype.initParam = function (M, N) {
                                    if (N > M) {
                                        throw new java.lang.RuntimeException("Must be a square or tall matrix");
                                    }
                                    this.N = N;
                                    if (this.splits == null || this.splits.length < N) {
                                        this.splits = new Int32Array(N);
                                    }
                                    this.x1 = 0;
                                    this.x2 = this.N - 1;
                                    this.steps = 0;
                                    this.totalSteps = 0;
                                    this.numSplits = 0;
                                    this.numExceptional = 0;
                                    this.nextExceptional = this.exceptionalThresh;
                                };
                                SvdImplicitQrAlgorithm.prototype.process = function () {
                                    this.followScript = false;
                                    this.findingZeros = true;
                                    return this._process();
                                };
                                SvdImplicitQrAlgorithm.prototype.processValues = function (values) {
                                    this.followScript = true;
                                    this.values = values;
                                    this.findingZeros = false;
                                    return this._process();
                                };
                                SvdImplicitQrAlgorithm.prototype._process = function () {
                                    if (this.maxValue == 0) {
                                        return true;
                                    }
                                    while (this.x2 >= 0) {
                                        if (this.steps > this.maxIterations) {
                                            return false;
                                        }
                                        if (this.x1 == this.x2) {
                                            this.resetSteps();
                                            if (!this.nextSplit()) {
                                                break;
                                            }
                                        }
                                        else {
                                            if (this.fastValues && this.x2 - this.x1 == 1) {
                                                this.resetSteps();
                                                this.eigenBB_2x2(this.x1);
                                                this.setSubmatrix(this.x2, this.x2);
                                            }
                                            else {
                                                if (this.steps >= this.nextExceptional) {
                                                    this.exceptionShift();
                                                }
                                                else {
                                                    if (!this.checkForAndHandleZeros()) {
                                                        if (this.followScript) {
                                                            this.performScriptedStep();
                                                        }
                                                        else {
                                                            this.performDynamicStep();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return true;
                                };
                                SvdImplicitQrAlgorithm.prototype.performDynamicStep = function () {
                                    if (this.findingZeros) {
                                        if (this.steps > 6) {
                                            this.findingZeros = false;
                                        }
                                        else {
                                            var scale = this.computeBulgeScale();
                                            this.performImplicitSingleStep(scale, 0, false);
                                        }
                                    }
                                    else {
                                        var scale = this.computeBulgeScale();
                                        var lambda = this.selectWilkinsonShift(scale);
                                        this.performImplicitSingleStep(scale, lambda, false);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.performScriptedStep = function () {
                                    var scale = this.computeBulgeScale();
                                    if (this.steps > SvdImplicitQrAlgorithm.giveUpOnKnown) {
                                        this.followScript = false;
                                    }
                                    else {
                                        var s = this.values[this.x2] / scale;
                                        this.performImplicitSingleStep(scale, s * s, false);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.incrementSteps = function () {
                                    this.steps++;
                                    this.totalSteps++;
                                };
                                SvdImplicitQrAlgorithm.prototype.isOffZero = function (i) {
                                    var bottom = Math.abs(this.diag[i]) + Math.abs(this.diag[i + 1]);
                                    return Math.abs(this.off[i]) <= bottom * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                };
                                SvdImplicitQrAlgorithm.prototype.isDiagonalZero = function (i) {
                                    var bottom = Math.abs(this.diag[i + 1]) + Math.abs(this.off[i]);
                                    return Math.abs(this.diag[i]) <= bottom * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                };
                                SvdImplicitQrAlgorithm.prototype.resetSteps = function () {
                                    this.steps = 0;
                                    this.nextExceptional = this.exceptionalThresh;
                                    this.numExceptional = 0;
                                };
                                SvdImplicitQrAlgorithm.prototype.nextSplit = function () {
                                    if (this.numSplits == 0) {
                                        return false;
                                    }
                                    this.x2 = this.splits[--this.numSplits];
                                    if (this.numSplits > 0) {
                                        this.x1 = this.splits[this.numSplits - 1] + 1;
                                    }
                                    else {
                                        this.x1 = 0;
                                    }
                                    return true;
                                };
                                SvdImplicitQrAlgorithm.prototype.performImplicitSingleStep = function (scale, lambda, byAngle) {
                                    this.createBulge(this.x1, lambda, scale, byAngle);
                                    for (var i = this.x1; i < this.x2 - 1 && this.bulge != 0.0; i++) {
                                        this.removeBulgeLeft(i, true);
                                        if (this.bulge == 0) {
                                            break;
                                        }
                                        this.removeBulgeRight(i);
                                    }
                                    if (this.bulge != 0) {
                                        this.removeBulgeLeft(this.x2 - 1, false);
                                    }
                                    this.incrementSteps();
                                };
                                SvdImplicitQrAlgorithm.prototype.updateRotator = function (Q, m, n, c, s) {
                                    var rowA = m * Q.numCols;
                                    var rowB = n * Q.numCols;
                                    var endA = rowA + Q.numCols;
                                    for (; rowA != endA;) {
                                        var a = Q.getValueAtIndex(rowA);
                                        var b = Q.getValueAtIndex(rowB);
                                        Q.setValueAtIndex(rowA, c * a + s * b);
                                        Q.setValueAtIndex(rowB, -s * a + c * b);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.computeBulgeScale = function () {
                                    var b11 = this.diag[this.x1];
                                    var b12 = this.off[this.x1];
                                    return Math.max(Math.abs(b11), Math.abs(b12));
                                };
                                SvdImplicitQrAlgorithm.prototype.createBulge = function (x1, p, scale, byAngle) {
                                    var b11 = this.diag[x1];
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    if (byAngle) {
                                        this.c = Math.cos(p);
                                        this.s = Math.sin(p);
                                    }
                                    else {
                                        var u1 = (b11 / scale) * (b11 / scale) - p;
                                        var u2 = (b12 / scale) * (b11 / scale);
                                        var gamma = Math.sqrt(u1 * u1 + u2 * u2);
                                        this.c = u1 / gamma;
                                        this.s = u2 / gamma;
                                    }
                                    this.diag[x1] = b11 * this.c + b12 * this.s;
                                    this.off[x1] = b12 * this.c - b11 * this.s;
                                    this.diag[x1 + 1] = b22 * this.c;
                                    this.bulge = b22 * this.s;
                                    if (this.Vt != null) {
                                        this.updateRotator(this.Vt, x1, x1 + 1, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.computeRotator = function (rise, run) {
                                    if (Math.abs(rise) < Math.abs(run)) {
                                        var k = rise / run;
                                        var bottom = Math.sqrt(1.0 + k * k);
                                        this.s = 1.0 / bottom;
                                        this.c = k / bottom;
                                    }
                                    else {
                                        var t = run / rise;
                                        var bottom = Math.sqrt(1.0 + t * t);
                                        this.c = 1.0 / bottom;
                                        this.s = t / bottom;
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.removeBulgeLeft = function (x1, notLast) {
                                    var b11 = this.diag[x1];
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    this.computeRotator(b11, this.bulge);
                                    this.diag[x1] = this.c * b11 + this.s * this.bulge;
                                    this.off[x1] = this.c * b12 + this.s * b22;
                                    this.diag[x1 + 1] = this.c * b22 - this.s * b12;
                                    if (notLast) {
                                        var b23 = this.off[x1 + 1];
                                        this.bulge = this.s * b23;
                                        this.off[x1 + 1] = this.c * b23;
                                    }
                                    if (this.Ut != null) {
                                        this.updateRotator(this.Ut, x1, x1 + 1, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.removeBulgeRight = function (x1) {
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    var b23 = this.off[x1 + 1];
                                    this.computeRotator(b12, this.bulge);
                                    this.off[x1] = b12 * this.c + this.bulge * this.s;
                                    this.diag[x1 + 1] = b22 * this.c + b23 * this.s;
                                    this.off[x1 + 1] = -b22 * this.s + b23 * this.c;
                                    var b33 = this.diag[x1 + 2];
                                    this.diag[x1 + 2] = b33 * this.c;
                                    this.bulge = b33 * this.s;
                                    if (this.Vt != null) {
                                        this.updateRotator(this.Vt, x1 + 1, x1 + 2, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.setSubmatrix = function (x1, x2) {
                                    this.x1 = x1;
                                    this.x2 = x2;
                                };
                                SvdImplicitQrAlgorithm.prototype.selectWilkinsonShift = function (scale) {
                                    var a11;
                                    var a22;
                                    if (this.x2 - this.x1 > 1) {
                                        var d1 = this.diag[this.x2 - 1] / scale;
                                        var o1 = this.off[this.x2 - 2] / scale;
                                        var d2 = this.diag[this.x2] / scale;
                                        var o2 = this.off[this.x2 - 1] / scale;
                                        a11 = o1 * o1 + d1 * d1;
                                        a22 = o2 * o2 + d2 * d2;
                                        this.eigenSmall.symm2x2_fast(a11, o2 * d1, a22);
                                    }
                                    else {
                                        var a = this.diag[this.x2 - 1] / scale;
                                        var b = this.off[this.x2 - 1] / scale;
                                        var c = this.diag[this.x2] / scale;
                                        a11 = a * a;
                                        a22 = b * b + c * c;
                                        this.eigenSmall.symm2x2_fast(a11, a * b, a22);
                                    }
                                    var diff0 = Math.abs(this.eigenSmall.value0.real - a22);
                                    var diff1 = Math.abs(this.eigenSmall.value1.real - a22);
                                    return diff0 < diff1 ? this.eigenSmall.value0.real : this.eigenSmall.value1.real;
                                };
                                SvdImplicitQrAlgorithm.signum = function (d) {
                                    if (d < 0) {
                                        return -1.0;
                                    }
                                    if (d > 0) {
                                        return 1.0;
                                    }
                                    return 0.0;
                                };
                                SvdImplicitQrAlgorithm.prototype.eigenBB_2x2 = function (x1) {
                                    var b11 = this.diag[x1];
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    var absA = Math.abs(b11);
                                    var absB = Math.abs(b12);
                                    var absC = Math.abs(b22);
                                    var scale = absA > absB ? absA : absB;
                                    if (absC > scale) {
                                        scale = absC;
                                    }
                                    if (scale == 0) {
                                        return;
                                    }
                                    b11 /= scale;
                                    b12 /= scale;
                                    b22 /= scale;
                                    this.eigenSmall.symm2x2_fast(b11 * b11, b11 * b12, b12 * b12 + b22 * b22);
                                    this.off[x1] = 0;
                                    this.diag[x1] = scale * Math.sqrt(this.eigenSmall.value0.real);
                                    var sgn = org.kevoree.modeling.util.maths.matrix.solvers.SvdImplicitQrAlgorithm.signum(this.eigenSmall.value1.real);
                                    this.diag[x1 + 1] = sgn * scale * Math.sqrt(Math.abs(this.eigenSmall.value1.real));
                                };
                                SvdImplicitQrAlgorithm.prototype.checkForAndHandleZeros = function () {
                                    for (var i = this.x2 - 1; i >= this.x1; i--) {
                                        if (this.isOffZero(i)) {
                                            this.resetSteps();
                                            this.splits[this.numSplits++] = i;
                                            this.x1 = i + 1;
                                            return true;
                                        }
                                    }
                                    for (var i = this.x2 - 1; i >= this.x1; i--) {
                                        if (this.isDiagonalZero(i)) {
                                            this.pushRight(i);
                                            this.resetSteps();
                                            this.splits[this.numSplits++] = i;
                                            this.x1 = i + 1;
                                            return true;
                                        }
                                    }
                                    return false;
                                };
                                SvdImplicitQrAlgorithm.prototype.pushRight = function (row) {
                                    if (this.isOffZero(row)) {
                                        return;
                                    }
                                    this.rotatorPushRight(row);
                                    var end = this.N - 2 - row;
                                    for (var i = 0; i < end && this.bulge != 0; i++) {
                                        this.rotatorPushRight2(row, i + 2);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.rotatorPushRight = function (m) {
                                    var b11 = this.off[m];
                                    var b21 = this.diag[m + 1];
                                    this.computeRotator(b21, -b11);
                                    this.off[m] = 0;
                                    this.diag[m + 1] = b21 * this.c - b11 * this.s;
                                    if (m + 2 < this.N) {
                                        var b22 = this.off[m + 1];
                                        this.off[m + 1] = b22 * this.c;
                                        this.bulge = b22 * this.s;
                                    }
                                    else {
                                        this.bulge = 0;
                                    }
                                    if (this.Ut != null) {
                                        this.updateRotator(this.Ut, m, m + 1, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.rotatorPushRight2 = function (m, offset) {
                                    var b11 = this.bulge;
                                    var b12 = this.diag[m + offset];
                                    this.computeRotator(b12, -b11);
                                    this.diag[m + offset] = b12 * this.c - b11 * this.s;
                                    if (m + offset < this.N - 1) {
                                        var b22 = this.off[m + offset];
                                        this.off[m + offset] = b22 * this.c;
                                        this.bulge = b22 * this.s;
                                    }
                                    if (this.Ut != null) {
                                        this.updateRotator(this.Ut, m, m + offset, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.exceptionShift = function () {
                                    this.numExceptional++;
                                    var mag = 0.05 * this.numExceptional;
                                    if (mag > 1.0) {
                                        mag = 1.0;
                                    }
                                    var angle = 2.0 * Math.PI * (this.rand.nextDouble() - 0.5) * mag;
                                    this.performImplicitSingleStep(0, angle, true);
                                    this.nextExceptional = this.steps + this.exceptionalThresh;
                                };
                                SvdImplicitQrAlgorithm.prototype.getNumberOfSingularValues = function () {
                                    return this.N;
                                };
                                SvdImplicitQrAlgorithm.prototype.getSingularValue = function (index) {
                                    return this.diag[index];
                                };
                                SvdImplicitQrAlgorithm.prototype.setFastValues = function (b) {
                                    this.fastValues = b;
                                };
                                SvdImplicitQrAlgorithm.prototype.getSingularValues = function () {
                                    return this.diag;
                                };
                                SvdImplicitQrAlgorithm.prototype.getDiag = function () {
                                    return this.diag;
                                };
                                SvdImplicitQrAlgorithm.prototype.getOff = function () {
                                    return this.off;
                                };
                                SvdImplicitQrAlgorithm.prototype.getMaxValue = function () {
                                    return this.maxValue;
                                };
                                SvdImplicitQrAlgorithm.giveUpOnKnown = 10;
                                return SvdImplicitQrAlgorithm;
                            })();
                            solvers.SvdImplicitQrAlgorithm = SvdImplicitQrAlgorithm;
                            var SvdImplicitQrDecompose_D64 = (function () {
                                function SvdImplicitQrDecompose_D64(compact, computeU, computeV, canUseTallBidiagonal) {
                                    this.qralg = new org.kevoree.modeling.util.maths.matrix.solvers.SvdImplicitQrAlgorithm();
                                    this.A_mod = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                                    this.compact = compact;
                                    this.prefComputeU = computeU;
                                    this.prefComputeV = computeV;
                                    this.canUseTallBidiagonal = canUseTallBidiagonal;
                                }
                                SvdImplicitQrDecompose_D64.prototype.getSingularValues = function () {
                                    return this.singularValues;
                                };
                                SvdImplicitQrDecompose_D64.prototype.numberOfSingularValues = function () {
                                    return this.numSingular;
                                };
                                SvdImplicitQrDecompose_D64.prototype.isCompact = function () {
                                    return this.compact;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getU = function (U, transpose) {
                                    if (!this.prefComputeU) {
                                        throw new java.lang.RuntimeException("As requested U was not computed.");
                                    }
                                    if (transpose) {
                                        if (U == null) {
                                            return this.Ut;
                                        }
                                        else {
                                            if (U.numRows != this.Ut.numRows || U.numCols != this.Ut.numCols) {
                                                throw new java.lang.RuntimeException("Unexpected shape of U");
                                            }
                                        }
                                        U.setMatrix(this.Ut);
                                    }
                                    else {
                                        if (U == null) {
                                            U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.Ut.numCols, this.Ut.numRows);
                                        }
                                        else {
                                            if (U.numRows != this.Ut.numCols || U.numCols != this.Ut.numRows) {
                                                throw new java.lang.RuntimeException("Unexpected shape of U");
                                            }
                                        }
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(this.Ut, U);
                                    }
                                    return U;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getV = function (V, transpose) {
                                    if (!this.prefComputeV) {
                                        throw new java.lang.RuntimeException("As requested V was not computed.");
                                    }
                                    if (transpose) {
                                        if (V == null) {
                                            return this.Vt;
                                        }
                                        else {
                                            if (V.numRows != this.Vt.numRows || V.numCols != this.Vt.numCols) {
                                                throw new java.lang.RuntimeException("Unexpected shape of V");
                                            }
                                        }
                                        V.setMatrix(this.Vt);
                                    }
                                    else {
                                        if (V == null) {
                                            V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.Vt.numCols, this.Vt.numRows);
                                        }
                                        else {
                                            if (V.numRows != this.Vt.numCols || V.numCols != this.Vt.numRows) {
                                                throw new java.lang.RuntimeException("Unexpected shape of V");
                                            }
                                        }
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(this.Vt, V);
                                    }
                                    return V;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getW = function (W) {
                                    var m = this.compact ? this.numSingular : this.numRows;
                                    var n = this.compact ? this.numSingular : this.numCols;
                                    if (W == null) {
                                        W = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, n);
                                    }
                                    else {
                                        W.reshapeBoolean(m, n, false);
                                        W.zero();
                                    }
                                    for (var i = 0; i < this.numSingular; i++) {
                                        W.set(i, i, this.singularValues[i]);
                                    }
                                    return W;
                                };
                                SvdImplicitQrDecompose_D64.prototype.decompose = function (orig) {
                                    if (!this.setup(orig)) {
                                        return false;
                                    }
                                    if (this.bidiagonalization(orig)) {
                                        return false;
                                    }
                                    if (this.computeUWV()) {
                                        return false;
                                    }
                                    this.makeSingularPositive();
                                    this.undoTranspose();
                                    return true;
                                };
                                SvdImplicitQrDecompose_D64.prototype.inputModified = function () {
                                    return false;
                                };
                                SvdImplicitQrDecompose_D64.prototype.bidiagonalization = function (orig) {
                                    if (this.transposed) {
                                        this.A_mod.reshapeBoolean(orig.numCols, orig.numRows, false);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(orig, this.A_mod);
                                    }
                                    else {
                                        this.A_mod.reshapeBoolean(orig.numRows, orig.numCols, false);
                                        this.A_mod.setMatrix(orig);
                                    }
                                    return !this.bidiag.decompose(this.A_mod);
                                };
                                SvdImplicitQrDecompose_D64.prototype.undoTranspose = function () {
                                    if (this.transposed) {
                                        var temp = this.Vt;
                                        this.Vt = this.Ut;
                                        this.Ut = temp;
                                    }
                                };
                                SvdImplicitQrDecompose_D64.prototype.computeUWV = function () {
                                    this.bidiag.getDiagonal(this.diag, this.off);
                                    this.qralg.setMatrix(this.numRowsT, this.numColsT, this.diag, this.off);
                                    if (this.computeU) {
                                        this.Ut = this.bidiag.getU(this.Ut, true, this.compact);
                                    }
                                    if (this.computeV) {
                                        this.Vt = this.bidiag.getV(this.Vt, true, this.compact);
                                    }
                                    this.qralg.setFastValues(false);
                                    if (this.computeU) {
                                        this.qralg.setUt(this.Ut);
                                    }
                                    else {
                                        this.qralg.setUt(null);
                                    }
                                    if (this.computeV) {
                                        this.qralg.setVt(this.Vt);
                                    }
                                    else {
                                        this.qralg.setVt(null);
                                    }
                                    var ret = !this.qralg.process();
                                    return ret;
                                };
                                SvdImplicitQrDecompose_D64.prototype.setup = function (orig) {
                                    this.transposed = orig.numCols > orig.numRows;
                                    if (this.transposed) {
                                        this.computeU = this.prefComputeV;
                                        this.computeV = this.prefComputeU;
                                        this.numRowsT = orig.numCols;
                                        this.numColsT = orig.numRows;
                                    }
                                    else {
                                        this.computeU = this.prefComputeU;
                                        this.computeV = this.prefComputeV;
                                        this.numRowsT = orig.numRows;
                                        this.numColsT = orig.numCols;
                                    }
                                    this.numRows = orig.numRows;
                                    this.numCols = orig.numCols;
                                    if (this.numRows == 0 || this.numCols == 0) {
                                        return false;
                                    }
                                    if (this.diag == null || this.diag.length < this.numColsT) {
                                        this.diag = new Float64Array(this.numColsT);
                                        this.off = new Float64Array(this.numColsT - 1);
                                    }
                                    if (this.canUseTallBidiagonal && this.numRows > this.numCols * 2 && !this.computeU) {
                                        if (this.bidiag == null || !(this.bidiag instanceof org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionTall_D64)) {
                                            this.bidiag = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionTall_D64();
                                        }
                                    }
                                    else {
                                        if (this.bidiag == null || !(this.bidiag instanceof org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64)) {
                                            this.bidiag = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64(1);
                                        }
                                    }
                                    return true;
                                };
                                SvdImplicitQrDecompose_D64.prototype.makeSingularPositive = function () {
                                    this.numSingular = this.qralg.getNumberOfSingularValues();
                                    this.singularValues = this.qralg.getSingularValues();
                                    for (var i = 0; i < this.numSingular; i++) {
                                        var val = this.qralg.getSingularValue(i);
                                        if (val < 0) {
                                            this.singularValues[i] = 0.0 - val;
                                            if (this.computeU) {
                                                var start = i * this.Ut.numCols;
                                                var stop = start + this.Ut.numCols;
                                                for (var j = start; j < stop; j++) {
                                                    this.Ut.setValueAtIndex(j, 0.0 - this.Ut.getValueAtIndex(j));
                                                }
                                            }
                                        }
                                        else {
                                            this.singularValues[i] = val;
                                        }
                                    }
                                };
                                SvdImplicitQrDecompose_D64.prototype.getNumRows = function () {
                                    return this.numRows;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getNumCols = function () {
                                    return this.numCols;
                                };
                                return SvdImplicitQrDecompose_D64;
                            })();
                            solvers.SvdImplicitQrDecompose_D64 = SvdImplicitQrDecompose_D64;
                            var TriangularSolver = (function () {
                                function TriangularSolver() {
                                }
                                TriangularSolver.invertLower = function (L, m) {
                                    for (var i = 0; i < m; i++) {
                                        var L_ii = L[i * m + i];
                                        for (var j = 0; j < i; j++) {
                                            var val = 0;
                                            for (var k = j; k < i; k++) {
                                                val += L[i * m + k] * L[k * m + j];
                                            }
                                            L[i * m + j] = -val / L_ii;
                                        }
                                        L[i * m + i] = 1.0 / L_ii;
                                    }
                                };
                                TriangularSolver.invertLower2arr = function (L, L_inv, m) {
                                    for (var i = 0; i < m; i++) {
                                        var L_ii = L[i * m + i];
                                        for (var j = 0; j < i; j++) {
                                            var val = 0;
                                            for (var k = j; k < i; k++) {
                                                val -= L[i * m + k] * L_inv[k * m + j];
                                            }
                                            L_inv[i * m + j] = val / L_ii;
                                        }
                                        L_inv[i * m + i] = 1.0 / L_ii;
                                    }
                                };
                                TriangularSolver.solveL2arr = function (L, b, n) {
                                    for (var i = 0; i < n; i++) {
                                        var sum = b[i];
                                        var indexL = i * n;
                                        for (var k = 0; k < i; k++) {
                                            sum -= L[indexL++] * b[k];
                                        }
                                        b[i] = sum / L[indexL];
                                    }
                                };
                                TriangularSolver.solveL = function (L, b, m, n) {
                                    for (var j = 0; j < n; j++) {
                                        for (var i = 0; i < m; i++) {
                                            var sum = b[i * n + j];
                                            for (var k = 0; k < i; k++) {
                                                sum -= L[i * m + k] * b[k * n + j];
                                            }
                                            b[i * n + j] = sum / L[i * m + i];
                                        }
                                    }
                                };
                                TriangularSolver.solveTranL = function (L, b, n) {
                                    for (var i = n - 1; i >= 0; i--) {
                                        var sum = b[i];
                                        for (var k = i + 1; k < n; k++) {
                                            sum -= L[k * n + i] * b[k];
                                        }
                                        b[i] = sum / L[i * n + i];
                                    }
                                };
                                TriangularSolver.solveU2arr = function (U, b, n) {
                                    for (var i = n - 1; i >= 0; i--) {
                                        var sum = b[i];
                                        var indexU = i * n + i + 1;
                                        for (var j = i + 1; j < n; j++) {
                                            sum -= U[indexU++] * b[j];
                                        }
                                        b[i] = sum / U[i * n + i];
                                    }
                                };
                                TriangularSolver.solveU = function (U, b, sideLength, minRow, maxRow) {
                                    for (var i = maxRow - 1; i >= minRow; i--) {
                                        var sum = b[i];
                                        var indexU = i * sideLength + i + 1;
                                        for (var j = i + 1; j < maxRow; j++) {
                                            sum -= U[indexU++] * b[j];
                                        }
                                        b[i] = sum / U[i * sideLength + i];
                                    }
                                };
                                TriangularSolver.solveUArray = function (U, startU, strideU, widthU, b, startB, strideB, widthB) {
                                    for (var colB = 0; colB < widthB; colB++) {
                                        for (var i = widthU - 1; i >= 0; i--) {
                                            var sum = b[startB + i * strideB + colB];
                                            for (var j = i + 1; j < widthU; j++) {
                                                sum -= U[startU + i * strideU + j] * b[startB + j * strideB + colB];
                                            }
                                            b[startB + i * strideB + colB] = sum / U[startU + i * strideU + i];
                                        }
                                    }
                                };
                                return TriangularSolver;
                            })();
                            solvers.TriangularSolver = TriangularSolver;
                            var decomposition;
                            (function (decomposition) {
                                var BidiagonalDecompositionRow_D64 = (function () {
                                    function BidiagonalDecompositionRow_D64(numElements) {
                                        this.UBV = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numElements, 1);
                                        this.gammasU = new Float64Array(numElements);
                                        this.gammasV = new Float64Array(numElements);
                                        this.b = new Float64Array(numElements);
                                        this.u = new Float64Array(numElements);
                                    }
                                    BidiagonalDecompositionRow_D64.prototype.decompose = function (A) {
                                        this.init(A);
                                        return this._decompose();
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.init = function (A) {
                                        this.UBV = A;
                                        this.m = this.UBV.numRows;
                                        this.n = this.UBV.numCols;
                                        this.min = Math.min(this.m, this.n);
                                        var max = Math.max(this.m, this.n);
                                        if (this.b.length < max + 1) {
                                            this.b = new Float64Array(max + 1);
                                            this.u = new Float64Array(max + 1);
                                        }
                                        if (this.gammasU.length < this.m) {
                                            this.gammasU = new Float64Array(this.m);
                                        }
                                        if (this.gammasV.length < this.n) {
                                            this.gammasV = new Float64Array(this.n);
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getUBV = function () {
                                        return this.UBV;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getDiagonal = function (diag, off) {
                                        diag[0] = this.UBV.getValueAtIndex(0);
                                        for (var i = 1; i < this.n; i++) {
                                            diag[i] = this.UBV.get(i, i);
                                            off[i - 1] = this.UBV.get(i - 1, i);
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getB = function (B, compact) {
                                        B = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleB(B, compact, this.m, this.n, this.min);
                                        B.set(0, 0, this.UBV.get(0, 0));
                                        for (var i = 1; i < this.min; i++) {
                                            B.set(i, i, this.UBV.get(i, i));
                                            B.set(i - 1, i, this.UBV.get(i - 1, i));
                                        }
                                        if (this.n > this.m) {
                                            B.set(this.min - 1, this.min, this.UBV.get(this.min - 1, this.min));
                                        }
                                        return B;
                                    };
                                    BidiagonalDecompositionRow_D64.handleB = function (B, compact, m, n, min) {
                                        var w = n > m ? min + 1 : min;
                                        if (compact) {
                                            if (B == null) {
                                                B = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(min, w);
                                            }
                                            else {
                                                B.reshapeBoolean(min, w, false);
                                                B.zero();
                                            }
                                        }
                                        else {
                                            if (B == null) {
                                                B = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, n);
                                            }
                                            else {
                                                B.reshapeBoolean(m, n, false);
                                                B.zero();
                                            }
                                        }
                                        return B;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getU = function (U, transpose, compact) {
                                        U = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleU(U, transpose, compact, this.m, this.n, this.min);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(U);
                                        for (var i = 0; i < this.m; i++) {
                                            this.u[i] = 0;
                                        }
                                        for (var j = this.min - 1; j >= 0; j--) {
                                            this.u[j] = 1;
                                            for (var i = j + 1; i < this.m; i++) {
                                                this.u[i] = this.UBV.get(i, j);
                                            }
                                            if (transpose) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(U, this.u, this.gammasU[j], j, j, this.m);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(U, this.u, this.gammasU[j], j, j, this.m, this.b);
                                            }
                                        }
                                        return U;
                                    };
                                    BidiagonalDecompositionRow_D64.handleU = function (U, transpose, compact, m, n, min) {
                                        if (compact) {
                                            if (transpose) {
                                                if (U == null) {
                                                    U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(min, m);
                                                }
                                                else {
                                                    U.reshapeBoolean(min, m, false);
                                                }
                                            }
                                            else {
                                                if (U == null) {
                                                    U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, min);
                                                }
                                                else {
                                                    U.reshapeBoolean(m, min, false);
                                                }
                                            }
                                        }
                                        else {
                                            if (U == null) {
                                                U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, m);
                                            }
                                            else {
                                                U.reshapeBoolean(m, m, false);
                                            }
                                        }
                                        return U;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getV = function (V, transpose, compact) {
                                        V = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleV(V, transpose, compact, this.m, this.n, this.min);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(V);
                                        for (var j = this.min - 1; j >= 0; j--) {
                                            this.u[j + 1] = 1;
                                            for (var i = j + 2; i < this.n; i++) {
                                                this.u[i] = this.UBV.get(j, i);
                                            }
                                            if (transpose) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(V, this.u, this.gammasV[j], j + 1, j + 1, this.n);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(V, this.u, this.gammasV[j], j + 1, j + 1, this.n, this.b);
                                            }
                                        }
                                        return V;
                                    };
                                    BidiagonalDecompositionRow_D64.handleV = function (V, transpose, compact, m, n, min) {
                                        var w = n > m ? min + 1 : min;
                                        if (compact) {
                                            if (transpose) {
                                                if (V == null) {
                                                    V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(w, n);
                                                }
                                                else {
                                                    V.reshapeBoolean(w, n, false);
                                                }
                                            }
                                            else {
                                                if (V == null) {
                                                    V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(n, w);
                                                }
                                                else {
                                                    V.reshapeBoolean(n, w, false);
                                                }
                                            }
                                        }
                                        else {
                                            if (V == null) {
                                                V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(n, n);
                                            }
                                            else {
                                                V.reshapeBoolean(n, n, false);
                                            }
                                        }
                                        return V;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype._decompose = function () {
                                        for (var k = 0; k < this.min; k++) {
                                            this.computeU(k);
                                            this.computeV(k);
                                        }
                                        return true;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.computeU = function (k) {
                                        var b = this.UBV.data;
                                        var max = 0;
                                        for (var i = k; i < this.m; i++) {
                                            var val = this.u[i] = b[i * this.n + k];
                                            val = Math.abs(val);
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        if (max > 0) {
                                            var tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide4arg(k, this.m, this.u, max);
                                            var nu = this.u[k] + tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements_Bcol(k + 1, this.m, this.n, this.u, b, k, nu);
                                            this.u[k] = 1.0;
                                            var gamma = nu / tau;
                                            this.gammasU[k] = gamma;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.UBV, this.u, gamma, k + 1, k, this.m, this.b);
                                            b[k * this.n + k] = -tau * max;
                                        }
                                        else {
                                            this.gammasU[k] = 0;
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.computeV = function (k) {
                                        var b = this.UBV.data;
                                        var row = k * this.n;
                                        var max = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.findMax(b, row + k + 1, this.n - k - 1);
                                        if (max > 0) {
                                            var tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide(k + 1, this.n, b, row, max);
                                            var nu = b[row + k + 1] + tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements_Brow(k + 2, this.n, this.u, b, row, nu);
                                            this.u[k + 1] = 1.0;
                                            var gamma = nu / tau;
                                            this.gammasV[k] = gamma;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.UBV, this.u, gamma, k + 1, k + 1, this.n);
                                            b[row + k + 1] = -tau * max;
                                        }
                                        else {
                                            this.gammasV[k] = 0;
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getGammasU = function () {
                                        return this.gammasU;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getGammasV = function () {
                                        return this.gammasV;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.inputModified = function () {
                                        return true;
                                    };
                                    return BidiagonalDecompositionRow_D64;
                                })();
                                decomposition.BidiagonalDecompositionRow_D64 = BidiagonalDecompositionRow_D64;
                                var BidiagonalDecompositionTall_D64 = (function () {
                                    function BidiagonalDecompositionTall_D64() {
                                        this.decompQRP = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRxColPivDecompositionHouseholderColumn_D64();
                                        this.decompBi = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64(1);
                                        this.B = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                                    }
                                    BidiagonalDecompositionTall_D64.prototype.getDiagonal = function (diag, off) {
                                        diag[0] = this.B.getValueAtIndex(0);
                                        for (var i = 1; i < this.n; i++) {
                                            diag[i] = this.B.get(i, i);
                                            off[i - 1] = this.B.get(i - 1, i);
                                        }
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.getB = function (B, compact) {
                                        B = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleB(B, compact, this.m, this.n, this.min);
                                        B.set(0, 0, this.B.get(0, 0));
                                        for (var i = 1; i < this.min; i++) {
                                            B.set(i, i, this.B.get(i, i));
                                            B.set(i - 1, i, this.B.get(i - 1, i));
                                        }
                                        if (this.n > this.m) {
                                            B.set(this.min - 1, this.min, this.B.get(this.min - 1, this.min));
                                        }
                                        return B;
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.getU = function (U, transpose, compact) {
                                        U = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleU(U, false, compact, this.m, this.n, this.min);
                                        if (compact) {
                                            var Q1 = this.decompQRP.getQ(null, true);
                                            var U1 = this.decompBi.getU(null, false, true);
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.mult(Q1, U1, U);
                                        }
                                        else {
                                            var Q = this.decompQRP.getQ(U, false);
                                            var U1 = this.decompBi.getU(null, false, true);
                                            var Q1 = org.kevoree.modeling.util.maths.matrix.CommonOps.extract4Int(Q, 0, Q.numRows, 0, this.min);
                                            var tmp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(Q1.numRows, U1.numCols);
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.mult(Q1, U1, tmp);
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.insert(tmp, Q, 0, 0);
                                        }
                                        if (transpose) {
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.transpose(U);
                                        }
                                        return U;
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.getV = function (V, transpose, compact) {
                                        return this.decompBi.getV(V, transpose, compact);
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.decompose = function (orig) {
                                        if (!this.decompQRP.decompose(orig)) {
                                            return false;
                                        }
                                        this.m = orig.numRows;
                                        this.n = orig.numCols;
                                        this.min = Math.min(this.m, this.n);
                                        this.B.reshapeBoolean(this.min, this.n, false);
                                        this.decompQRP.getR(this.B, true);
                                        var result = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.min, this.n);
                                        var P = this.decompQRP.getPivotMatrix(null);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.multTransB(this.B, P, result);
                                        this.B.setMatrix(result);
                                        return this.decompBi.decompose(this.B);
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.inputModified = function () {
                                        return this.decompQRP.inputModified();
                                    };
                                    return BidiagonalDecompositionTall_D64;
                                })();
                                decomposition.BidiagonalDecompositionTall_D64 = BidiagonalDecompositionTall_D64;
                                var EigenvalueSmall = (function () {
                                    function EigenvalueSmall() {
                                        this.value0 = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                        this.value1 = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                    }
                                    EigenvalueSmall.prototype.value2x2 = function (a11, a12, a21, a22) {
                                        var c;
                                        var s;
                                        if (a12 + a21 == 0) {
                                            c = s = 1.0 / Math.sqrt(2);
                                        }
                                        else {
                                            var aa = (a11 - a22);
                                            var bb = (a12 + a21);
                                            var t_hat = aa / bb;
                                            var t = t_hat / (1.0 + Math.sqrt(1.0 + t_hat * t_hat));
                                            c = 1.0 / Math.sqrt(1.0 + t * t);
                                            s = c * t;
                                        }
                                        var c2 = c * c;
                                        var s2 = s * s;
                                        var cs = c * s;
                                        var b11 = c2 * a11 + s2 * a22 - cs * (a12 + a21);
                                        var b12 = c2 * a12 - s2 * a21 + cs * (a11 - a22);
                                        var b21 = c2 * a21 - s2 * a12 + cs * (a11 - a22);
                                        if (b21 * b12 >= 0) {
                                            if (b12 == 0) {
                                                c = 0;
                                                s = 1;
                                            }
                                            else {
                                                s = Math.sqrt(b21 / (b12 + b21));
                                                c = Math.sqrt(b12 / (b12 + b21));
                                            }
                                            cs = c * s;
                                            a11 = b11 - cs * (b12 + b21);
                                            a22 = b11 + cs * (b12 + b21);
                                            this.value0.real = a11;
                                            this.value1.real = a22;
                                            this.value0.imaginary = this.value1.imaginary = 0;
                                        }
                                        else {
                                            this.value0.real = this.value1.real = b11;
                                            this.value0.imaginary = Math.sqrt(-b21 * b12);
                                            this.value1.imaginary = -this.value0.imaginary;
                                        }
                                    };
                                    EigenvalueSmall.prototype.value2x2_fast = function (a11, a12, a21, a22) {
                                        var left = (a11 + a22) / 2.0;
                                        var inside = 4.0 * a12 * a21 + (a11 - a22) * (a11 - a22);
                                        if (inside < 0) {
                                            this.value0.real = this.value1.real = left;
                                            this.value0.imaginary = Math.sqrt(-inside) / 2.0;
                                            this.value1.imaginary = -this.value0.imaginary;
                                        }
                                        else {
                                            var right = Math.sqrt(inside) / 2.0;
                                            this.value0.real = (left + right);
                                            this.value1.real = (left - right);
                                            this.value0.imaginary = this.value1.imaginary = 0.0;
                                        }
                                    };
                                    EigenvalueSmall.prototype.symm2x2_fast = function (a11, a12, a22) {
                                        var left = (a11 + a22) * 0.5;
                                        var b = (a11 - a22) * 0.5;
                                        var right = Math.sqrt(b * b + a12 * a12);
                                        this.value0.real = left + right;
                                        this.value1.real = left - right;
                                    };
                                    return EigenvalueSmall;
                                })();
                                decomposition.EigenvalueSmall = EigenvalueSmall;
                                var HessenbergSimilarDecomposition_D64 = (function () {
                                    function HessenbergSimilarDecomposition_D64(initialSize) {
                                        this.gammas = new Float64Array(initialSize);
                                        this.b = new Float64Array(initialSize);
                                        this.u = new Float64Array(initialSize);
                                    }
                                    HessenbergSimilarDecomposition_D64.prototype.decompose = function (A) {
                                        if (A.numRows != A.numCols) {
                                            throw new java.lang.RuntimeException("A must be square.");
                                        }
                                        if (A.numRows <= 0) {
                                            return false;
                                        }
                                        this.QH = A;
                                        this.N = A.numCols;
                                        if (this.b.length < this.N) {
                                            this.b = new Float64Array(this.N);
                                            this.gammas = new Float64Array(this.N);
                                            this.u = new Float64Array(this.N);
                                        }
                                        return this._decompose();
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.inputModified = function () {
                                        return true;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getQH = function () {
                                        return this.QH;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getH = function (H) {
                                        if (H == null) {
                                            H = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                        }
                                        else {
                                            H.zero();
                                        }
                                        System.arraycopy(this.QH.data, 0, H.data, 0, this.N);
                                        for (var i = 1; i < this.N; i++) {
                                            for (var j = i - 1; j < this.N; j++) {
                                                H.set(i, j, this.QH.get(i, j));
                                            }
                                        }
                                        return H;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getQ = function (Q) {
                                        if (Q == null) {
                                            Q = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                            for (var i = 0; i < this.N; i++) {
                                                Q.data[i * this.N + i] = 1;
                                            }
                                        }
                                        else {
                                            if (this.N != Q.numRows || this.N != Q.numCols) {
                                                throw new java.lang.RuntimeException("The provided H must have the same dimensions as the decomposed matrix.");
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                            }
                                        }
                                        for (var j = this.N - 2; j >= 0; j--) {
                                            this.u[j + 1] = 1;
                                            for (var i = j + 2; i < this.N; i++) {
                                                this.u[i] = this.QH.get(i, j);
                                            }
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(Q, this.u, this.gammas[j], j + 1, j + 1, this.N, this.b);
                                        }
                                        return Q;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype._decompose = function () {
                                        var h = this.QH.data;
                                        for (var k = 0; k < this.N - 2; k++) {
                                            var max = 0;
                                            for (var i = k + 1; i < this.N; i++) {
                                                var val = this.u[i] = h[i * this.N + k];
                                                val = Math.abs(val);
                                                if (val > max) {
                                                    max = val;
                                                }
                                            }
                                            if (max > 0) {
                                                var tau = 0;
                                                for (var i = k + 1; i < this.N; i++) {
                                                    var val = this.u[i] /= max;
                                                    tau += val * val;
                                                }
                                                tau = Math.sqrt(tau);
                                                if (this.u[k + 1] < 0) {
                                                    tau = -tau;
                                                }
                                                var nu = this.u[k + 1] + tau;
                                                this.u[k + 1] = 1.0;
                                                for (var i = k + 2; i < this.N; i++) {
                                                    h[i * this.N + k] = this.u[i] /= nu;
                                                }
                                                var gamma = nu / tau;
                                                this.gammas[k] = gamma;
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.QH, this.u, gamma, k + 1, k + 1, this.N, this.b);
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.QH, this.u, gamma, 0, k + 1, this.N);
                                                h[(k + 1) * this.N + k] = -tau * max;
                                            }
                                            else {
                                                this.gammas[k] = 0;
                                            }
                                        }
                                        return true;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getGammas = function () {
                                        return this.gammas;
                                    };
                                    return HessenbergSimilarDecomposition_D64;
                                })();
                                decomposition.HessenbergSimilarDecomposition_D64 = HessenbergSimilarDecomposition_D64;
                                var QRDecompositionHouseholderColumn_D64 = (function () {
                                    function QRDecompositionHouseholderColumn_D64() {
                                    }
                                    QRDecompositionHouseholderColumn_D64.prototype.setExpectedMaxSize = function (numRows, numCols) {
                                        this.numCols = numCols;
                                        this.numRows = numRows;
                                        this.minLength = Math.min(numCols, numRows);
                                        var maxLength = Math.max(numCols, numRows);
                                        if (this.dataQR == null || this.dataQR.nbRows() < numRows || this.dataQR.nbColumns() < numCols) {
                                            this.dataQR = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(numRows, numCols);
                                            this.v = new Float64Array(maxLength);
                                            this.gammas = new Float64Array(this.minLength);
                                        }
                                        if (this.v.length < maxLength) {
                                            this.v = new Float64Array(maxLength);
                                        }
                                        if (this.gammas.length < this.minLength) {
                                            this.gammas = new Float64Array(this.minLength);
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.getQ = function (Q, compact) {
                                        if (compact) {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.identity(this.numRows, this.minLength);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.setIdentity(Q);
                                            }
                                        }
                                        else {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.widentity(this.numRows);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.setIdentity(Q);
                                            }
                                        }
                                        for (var j = this.minLength - 1; j >= 0; j--) {
                                            var vv = this.dataQR.get(j, j);
                                            this.dataQR.set(j, j, 1);
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.rank1UpdateMultR(Q, this.dataQR, j, this.gammas[j], j, j, this.numRows, this.v);
                                            this.dataQR.set(j, j, vv);
                                        }
                                        return Q;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.getR = function (R, compact) {
                                        if (R == null) {
                                            if (compact) {
                                                R = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.minLength, this.numCols);
                                            }
                                            else {
                                                R = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.numRows, this.numCols);
                                            }
                                        }
                                        else {
                                            for (var i = 0; i < R.numRows; i++) {
                                                var min = Math.min(i, R.numCols);
                                                for (var j = 0; j < min; j++) {
                                                    R.cset(i, j, 0);
                                                }
                                            }
                                        }
                                        for (var j = 0; j < this.numCols; j++) {
                                            var l = Math.min(j, this.numRows - 1);
                                            for (var i = 0; i <= l; i++) {
                                                var val = this.dataQR.get(i, j);
                                                R.cset(i, j, val);
                                            }
                                        }
                                        return R;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.decompose = function (A) {
                                        this.setExpectedMaxSize(A.numRows, A.numCols);
                                        this.convertToColumnMajor(A);
                                        this.error = false;
                                        for (var j = 0; j < this.minLength; j++) {
                                            this.householder(j);
                                            this.updateA(j);
                                        }
                                        return !this.error;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.convertToColumnMajor = function (A) {
                                        for (var x = 0; x < this.numCols; x++) {
                                            for (var y = 0; y < this.numRows; y++) {
                                                this.dataQR.set(y, x, A.data[y * this.numCols + x]);
                                            }
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.householder = function (j) {
                                        var max = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.findMax(this.dataQR, j, j, this.numRows - j);
                                        if (max == 0.0) {
                                            this.gamma = 0;
                                            this.error = true;
                                        }
                                        else {
                                            this.tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.computeTauAndDivide(j, this.numRows, this.dataQR, j, max);
                                            var u_0 = this.dataQR.get(j, j) + this.tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.divideElements(j + 1, this.numRows, this.dataQR, j, u_0);
                                            this.gamma = u_0 / this.tau;
                                            this.tau *= max;
                                            this.dataQR.set(j, j, -this.tau);
                                        }
                                        this.gammas[j] = this.gamma;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.updateA = function (w) {
                                        for (var j = w + 1; j < this.numCols; j++) {
                                            var val = this.dataQR.get(w, j);
                                            for (var k = w + 1; k < this.numRows; k++) {
                                                val += this.dataQR.get(k, w) * this.dataQR.get(k, j);
                                            }
                                            val *= this.gamma;
                                            this.dataQR.add(w, j, -val);
                                            for (var i = w + 1; i < this.numRows; i++) {
                                                this.dataQR.add(i, j, -this.dataQR.get(i, w) * val);
                                            }
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.findMax = function (u, col, startU, length) {
                                        var max = -1;
                                        var index = startU;
                                        var stopIndex = startU + length;
                                        for (; index < stopIndex; index++) {
                                            var val = u.get(index, col);
                                            val = (val < 0.0) ? -val : val;
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        return max;
                                    };
                                    QRDecompositionHouseholderColumn_D64.divideElements = function (j, numRows, u, col, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / u_0);
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.computeTauAndDivide = function (j, numRows, u, col, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / max);
                                            var d = u.get(i, col);
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u.get(j, col) < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.inputModified = function () {
                                        return false;
                                    };
                                    QRDecompositionHouseholderColumn_D64.rank1UpdateMultR = function (A, u, col, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u.get(w0, col) * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u.get(k, col);
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u.get(i, col);
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    return QRDecompositionHouseholderColumn_D64;
                                })();
                                decomposition.QRDecompositionHouseholderColumn_D64 = QRDecompositionHouseholderColumn_D64;
                                var QRxColPivDecompositionHouseholderColumn_D64 = (function (_super) {
                                    __extends(QRxColPivDecompositionHouseholderColumn_D64, _super);
                                    function QRxColPivDecompositionHouseholderColumn_D64() {
                                        _super.call(this);
                                        this.singularThreshold = org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                    }
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.setSingularThreshold = function (threshold) {
                                        this.singularThreshold = threshold;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.setExpectedMaxSize = function (numRows, numCols) {
                                        _super.prototype.setExpectedMaxSize.call(this, numRows, numCols);
                                        if (this.pivots == null || this.pivots.length < numCols) {
                                            this.pivots = new Int32Array(numCols);
                                            this.normsCol = new Float64Array(numCols);
                                        }
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getQ = function (Q, compact) {
                                        if (compact) {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity(this.numRows, this.minLength);
                                            }
                                            else {
                                                if (Q.numRows != this.numRows || Q.numCols != this.minLength) {
                                                    throw new java.lang.RuntimeException("Unexpected matrix dimension.");
                                                }
                                                else {
                                                    org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                                }
                                            }
                                        }
                                        else {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity1D(this.numRows);
                                            }
                                            else {
                                                if (Q.numRows != this.numRows || Q.numCols != this.numRows) {
                                                    throw new java.lang.RuntimeException("Unexpected matrix dimension.");
                                                }
                                                else {
                                                    org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                                }
                                            }
                                        }
                                        for (var j = this.rank - 1; j >= 0; j--) {
                                            var vv = this.dataQR.get(j, j);
                                            this.dataQR.set(j, j, 1);
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultRArray(Q, this.dataQR, j, this.gammas[j], j, j, this.numRows, this.v);
                                            this.dataQR.set(j, j, vv);
                                        }
                                        return Q;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.decompose = function (A) {
                                        this.setExpectedMaxSize(A.numRows, A.numCols);
                                        this.convertToColumnMajor(A);
                                        this.maxAbs = org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(A);
                                        this.setupPivotInfo();
                                        for (var j = 0; j < this.minLength; j++) {
                                            if (j > 0) {
                                                this.updateNorms(j);
                                            }
                                            this.swapColumns(j);
                                            if (!this.householderPivot(j)) {
                                                break;
                                            }
                                            this.updateA(j);
                                            this.rank = j + 1;
                                        }
                                        return true;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.setupPivotInfo = function () {
                                        for (var col = 0; col < this.numCols; col++) {
                                            this.pivots[col] = col;
                                            var norm = 0;
                                            for (var row = 0; row < this.numRows; row++) {
                                                var element = this.dataQR.get(row, col);
                                                norm += element * element;
                                            }
                                            this.normsCol[col] = norm;
                                        }
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.updateNorms = function (j) {
                                        var foundNegative = false;
                                        for (var col = j; col < this.numCols; col++) {
                                            var e = this.dataQR.get(j - 1, col);
                                            this.normsCol[col] -= e * e;
                                            if (this.normsCol[col] < 0) {
                                                foundNegative = true;
                                                break;
                                            }
                                        }
                                        if (foundNegative) {
                                            for (var col = j; col < this.numCols; col++) {
                                                var actual = 0;
                                                for (var i = j; i < this.numRows; i++) {
                                                    var v = this.dataQR.get(i, col);
                                                    actual += v * v;
                                                }
                                                this.normsCol[col] = actual;
                                            }
                                        }
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.swapColumns = function (j) {
                                        var largestIndex = j;
                                        var largestNorm = this.normsCol[j];
                                        for (var col = j + 1; col < this.numCols; col++) {
                                            var n = this.normsCol[col];
                                            if (n > largestNorm) {
                                                largestNorm = n;
                                                largestIndex = col;
                                            }
                                        }
                                        var val = 0;
                                        for (var k = 0; k < this.dataQR.nbRows(); k++) {
                                            val = this.dataQR.get(k, j);
                                            this.dataQR.set(k, j, this.dataQR.get(k, largestIndex));
                                            this.dataQR.set(k, largestIndex, val);
                                        }
                                        var tempN = this.normsCol[j];
                                        this.normsCol[j] = this.normsCol[largestIndex];
                                        this.normsCol[largestIndex] = tempN;
                                        var tempP = this.pivots[j];
                                        this.pivots[j] = this.pivots[largestIndex];
                                        this.pivots[largestIndex] = tempP;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.householderPivot = function (j) {
                                        var max = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.findMaxArray(this.dataQR, j, j, this.numRows - j);
                                        if (max <= 0) {
                                            return false;
                                        }
                                        else {
                                            this.tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide4argArray(j, this.numRows, this.dataQR, j, max);
                                            var u_0 = this.dataQR.get(j, j) + this.tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements4argArray(j + 1, this.numRows, this.dataQR, j, u_0);
                                            this.gamma = u_0 / this.tau;
                                            this.tau *= max;
                                            this.dataQR.set(j, j, -this.tau);
                                            if (Math.abs(this.tau) <= this.singularThreshold) {
                                                return false;
                                            }
                                        }
                                        this.gammas[j] = this.gamma;
                                        return true;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getRank = function () {
                                        return this.rank;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getPivots = function () {
                                        return this.pivots;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getPivotMatrix = function (P) {
                                        if (P == null) {
                                            P = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.numCols, this.numCols);
                                        }
                                        else {
                                            if (P.numRows != this.numCols) {
                                                throw new java.lang.RuntimeException("Number of rows must be " + this.numCols);
                                            }
                                            else {
                                                if (P.numCols != this.numCols) {
                                                    throw new java.lang.RuntimeException("Number of columns must be " + this.numCols);
                                                }
                                                else {
                                                    P.zero();
                                                }
                                            }
                                        }
                                        for (var i = 0; i < this.numCols; i++) {
                                            P.set(this.pivots[i], i, 1);
                                        }
                                        return P;
                                    };
                                    return QRxColPivDecompositionHouseholderColumn_D64;
                                })(org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64);
                                decomposition.QRxColPivDecompositionHouseholderColumn_D64 = QRxColPivDecompositionHouseholderColumn_D64;
                                var QrHelperFunctions_D64 = (function () {
                                    function QrHelperFunctions_D64() {
                                    }
                                    QrHelperFunctions_D64.findMax = function (u, startU, length) {
                                        var max = -1;
                                        var index = startU;
                                        var stopIndex = startU + length;
                                        for (; index < stopIndex; index++) {
                                            var val = u[index];
                                            val = (val < 0.0) ? -val : val;
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        return max;
                                    };
                                    QrHelperFunctions_D64.findMaxArray = function (u, col, startU, length) {
                                        var max = -1;
                                        var index = startU;
                                        var stopIndex = startU + length;
                                        for (; index < stopIndex; index++) {
                                            var val = u.get(index, col);
                                            val = (val < 0.0) ? -val : val;
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        return max;
                                    };
                                    QrHelperFunctions_D64.divideElements4arg = function (j, numRows, u, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u[i] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements4argArray = function (j, numRows, u, col, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / u_0);
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements = function (j, numRows, u, startU, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u[i + startU] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements_Brow = function (j, numRows, u, b, startB, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u[i] = b[i + startB] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements_Bcol = function (j, numRows, numCols, u, b, startB, u_0) {
                                        var indexB = j * numCols + startB;
                                        for (var i = j; i < numRows;) {
                                            b[indexB] = u[i] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.computeTauAndDivide = function (j, numRows, u, startU, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            var d = u[startU + i] /= max;
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u[startU + j] < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QrHelperFunctions_D64.computeTauAndDivide4arg = function (j, numRows, u, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            var d = u[i] /= max;
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u[j] < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QrHelperFunctions_D64.computeTauAndDivide4argArray = function (j, numRows, u, col, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / max);
                                            var d = u.get(i, col);
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u.get(j, col) < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultR = function (A, u, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u[w0] * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u[k];
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u[i];
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultRArray = function (A, u, col, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u.get(w0, col) * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u.get(k, col);
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u.get(i, col);
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultR8param = function (A, u, offsetU, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u[w0 + offsetU] * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u[k + offsetU];
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u[i + offsetU];
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultL = function (A, u, gamma, colA0, w0, w1) {
                                        for (var i = colA0; i < A.numRows; i++) {
                                            var startIndex = i * A.numCols + w0;
                                            var sum = 0;
                                            var rowIndex = startIndex;
                                            for (var j = w0; j < w1; j++) {
                                                sum += A.data[rowIndex++] * u[j];
                                            }
                                            sum = -gamma * sum;
                                            rowIndex = startIndex;
                                            for (var j = w0; j < w1; j++) {
                                                A.data[rowIndex++] += sum * u[j];
                                            }
                                        }
                                    };
                                    return QrHelperFunctions_D64;
                                })();
                                decomposition.QrHelperFunctions_D64 = QrHelperFunctions_D64;
                                var SwitchingEigenDecomposition = (function () {
                                    function SwitchingEigenDecomposition(matrixSize, computeVectors, tol) {
                                        this.A = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                                        var decomp = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.TridiagonalDecompositionHouseholder_D64();
                                        this.symmetricAlg = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SymmetricQRAlgorithmDecomposition_D64(decomp, computeVectors);
                                        this.generalAlg = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQRDecomposition_D64(computeVectors);
                                        this.computeVectors = computeVectors;
                                        this.tol = tol;
                                    }
                                    SwitchingEigenDecomposition.prototype.getNumberOfEigenvalues = function () {
                                        return this.symmetric ? this.symmetricAlg.getNumberOfEigenvalues() : this.generalAlg.getNumberOfEigenvalues();
                                    };
                                    SwitchingEigenDecomposition.prototype.getEigenvalue = function (index) {
                                        return this.symmetric ? this.symmetricAlg.getEigenvalue(index) : this.generalAlg.getEigenvalue(index);
                                    };
                                    SwitchingEigenDecomposition.prototype.getEigenVector = function (index) {
                                        if (!this.computeVectors) {
                                            throw new java.lang.RuntimeException("Configured to not compute eignevectors");
                                        }
                                        return this.symmetric ? this.symmetricAlg.getEigenVector(index) : this.generalAlg.getEigenVector(index);
                                    };
                                    SwitchingEigenDecomposition.prototype.decompose = function (orig) {
                                        this.A.setMatrix(orig);
                                        this.symmetric = org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isSymmetricDouble(this.A, this.tol);
                                        return this.symmetric ? this.symmetricAlg.decompose(this.A) : this.generalAlg.decompose(this.A);
                                    };
                                    SwitchingEigenDecomposition.prototype.inputModified = function () {
                                        return false;
                                    };
                                    return SwitchingEigenDecomposition;
                                })();
                                decomposition.SwitchingEigenDecomposition = SwitchingEigenDecomposition;
                                var SymmetricQRAlgorithmDecomposition_D64 = (function () {
                                    function SymmetricQRAlgorithmDecomposition_D64(decomp, computeVectors) {
                                        this.computeVectorsWithValues = false;
                                        this.decomp = decomp;
                                        this.computeVectors = computeVectors;
                                        this.helper = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SymmetricQREigenHelper();
                                        this.vector = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SymmetricQrAlgorithm(this.helper);
                                    }
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.setComputeVectorsWithValues = function (computeVectorsWithValues) {
                                        if (!this.computeVectors) {
                                            throw new java.lang.RuntimeException("Compute eigenvalues has been set to false");
                                        }
                                        this.computeVectorsWithValues = computeVectorsWithValues;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.setMaxIterations = function (max) {
                                        this.vector.setMaxIterations(max);
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.getNumberOfEigenvalues = function () {
                                        return this.helper.getMatrixSize();
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.getEigenvalue = function (index) {
                                        var c = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                        c.setValues(this.values[index], 0);
                                        return c;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.getEigenVector = function (index) {
                                        return this.eigenvectors[index];
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.decompose = function (orig) {
                                        if (orig.numCols != orig.numRows) {
                                            throw new java.lang.RuntimeException("Matrix must be square.");
                                        }
                                        if (orig.numCols <= 0) {
                                            return false;
                                        }
                                        var N = orig.numRows;
                                        if (!this.decomp.decompose(orig)) {
                                            return false;
                                        }
                                        if (this.diag == null || this.diag.length < N) {
                                            this.diag = new Float64Array(N);
                                            this.off = new Float64Array(N - 1);
                                        }
                                        this.decomp.getDiagonal(this.diag, this.off);
                                        this.helper.init(this.diag, this.off, N);
                                        if (this.computeVectors) {
                                            if (this.computeVectorsWithValues) {
                                                return this.extractTogether();
                                            }
                                            else {
                                                return this.extractSeparate(N);
                                            }
                                        }
                                        else {
                                            return this.computeEigenValues();
                                        }
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.inputModified = function () {
                                        return this.decomp.inputModified();
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.extractTogether = function () {
                                        this.V = this.decomp.getQ(this.V, true);
                                        this.helper.setQ(this.V);
                                        this.vector.setFastEigenvalues(false);
                                        if (!this.vector.process3arg(-1, null, null)) {
                                            return false;
                                        }
                                        this.eigenvectors = org.kevoree.modeling.util.maths.matrix.CommonOps.rowsToVector(this.V, this.eigenvectors);
                                        this.values = this.helper.copyEigenvalues(this.values);
                                        return true;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.extractSeparate = function (numCols) {
                                        if (!this.computeEigenValues()) {
                                            return false;
                                        }
                                        this.helper.reset(numCols);
                                        this.diagSaved = this.helper.swapDiag(this.diagSaved);
                                        this.offSaved = this.helper.swapOff(this.offSaved);
                                        this.V = this.decomp.getQ(this.V, true);
                                        this.vector.setQ(this.V);
                                        if (!this.vector.process(-1, null, null, this.values)) {
                                            return false;
                                        }
                                        this.values = this.helper.copyEigenvalues(this.values);
                                        this.eigenvectors = org.kevoree.modeling.util.maths.matrix.CommonOps.rowsToVector(this.V, this.eigenvectors);
                                        return true;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.computeEigenValues = function () {
                                        this.diagSaved = this.helper.copyDiag(this.diagSaved);
                                        this.offSaved = this.helper.copyOff(this.offSaved);
                                        this.vector.setQ(null);
                                        this.vector.setFastEigenvalues(true);
                                        if (!this.vector.process3arg(-1, null, null)) {
                                            return false;
                                        }
                                        this.values = this.helper.copyEigenvalues(this.values);
                                        return true;
                                    };
                                    return SymmetricQRAlgorithmDecomposition_D64;
                                })();
                                decomposition.SymmetricQRAlgorithmDecomposition_D64 = SymmetricQRAlgorithmDecomposition_D64;
                                var SymmetricQREigenHelper = (function () {
                                    function SymmetricQREigenHelper() {
                                        this.rand = new java.util.Random();
                                        this.eigenSmall = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.EigenvalueSmall();
                                        this.splits = new Int32Array(1);
                                    }
                                    SymmetricQREigenHelper.prototype.setQ = function (q) {
                                        this.Q = q;
                                    };
                                    SymmetricQREigenHelper.prototype.incrementSteps = function () {
                                        this.steps++;
                                    };
                                    SymmetricQREigenHelper.prototype.init = function (diag, off, numCols) {
                                        this.reset(numCols);
                                        this.diag = diag;
                                        this.off = off;
                                    };
                                    SymmetricQREigenHelper.prototype.swapDiag = function (diag) {
                                        var ret = this.diag;
                                        this.diag = diag;
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.swapOff = function (off) {
                                        var ret = this.off;
                                        this.off = off;
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.reset = function (N) {
                                        this.N = N;
                                        this.diag = null;
                                        this.off = null;
                                        if (this.splits.length < N) {
                                            this.splits = new Int32Array(N);
                                        }
                                        this.numSplits = 0;
                                        this.x1 = 0;
                                        this.x2 = N - 1;
                                        this.steps = this.numExceptional = this.lastExceptional = 0;
                                        this.Q = null;
                                    };
                                    SymmetricQREigenHelper.prototype.copyDiag = function (ret) {
                                        if (ret == null || ret.length < this.N) {
                                            ret = new Float64Array(this.N);
                                        }
                                        System.arraycopy(this.diag, 0, ret, 0, this.N);
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.copyOff = function (ret) {
                                        if (ret == null || ret.length < this.N - 1) {
                                            ret = new Float64Array(this.N - 1);
                                        }
                                        System.arraycopy(this.off, 0, ret, 0, this.N - 1);
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.copyEigenvalues = function (ret) {
                                        if (ret == null || ret.length < this.N) {
                                            ret = new Float64Array(this.N);
                                        }
                                        System.arraycopy(this.diag, 0, ret, 0, this.N);
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.setSubmatrix = function (x1, x2) {
                                        this.x1 = x1;
                                        this.x2 = x2;
                                    };
                                    SymmetricQREigenHelper.prototype.isZero = function (index) {
                                        var bottom = Math.abs(this.diag[index]) + Math.abs(this.diag[index + 1]);
                                        return (Math.abs(this.off[index]) <= bottom * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS);
                                    };
                                    SymmetricQREigenHelper.prototype.performImplicitSingleStep = function (lambda, byAngle) {
                                        if (this.x2 - this.x1 == 1) {
                                            this.createBulge2by2(this.x1, lambda, byAngle);
                                        }
                                        else {
                                            this.createBulge(this.x1, lambda, byAngle);
                                            for (var i = this.x1; i < this.x2 - 2 && this.bulge != 0.0; i++) {
                                                this.removeBulge(i);
                                            }
                                            if (this.bulge != 0.0) {
                                                this.removeBulgeEnd(this.x2 - 2);
                                            }
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.updateQ = function (m, n, c, s) {
                                        var rowA = m * this.N;
                                        var rowB = n * this.N;
                                        var endA = rowA + this.N;
                                        while (rowA < endA) {
                                            var a = this.Q.data[rowA];
                                            var b = this.Q.data[rowB];
                                            this.Q.data[rowA++] = c * a + s * b;
                                            this.Q.data[rowB++] = -s * a + c * b;
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.createBulge = function (x1, p, byAngle) {
                                        var a11 = this.diag[x1];
                                        var a22 = this.diag[x1 + 1];
                                        var a12 = this.off[x1];
                                        var a23 = this.off[x1 + 1];
                                        if (byAngle) {
                                            this.c = Math.cos(p);
                                            this.s = Math.sin(p);
                                            this.c2 = this.c * this.c;
                                            this.s2 = this.s * this.s;
                                            this.cs = this.c * this.s;
                                        }
                                        else {
                                            this.computeRotation(a11 - p, a12);
                                        }
                                        this.diag[x1] = this.c2 * a11 + 2.0 * this.cs * a12 + this.s2 * a22;
                                        this.diag[x1 + 1] = this.c2 * a22 - 2.0 * this.cs * a12 + this.s2 * a11;
                                        this.off[x1] = a12 * (this.c2 - this.s2) + this.cs * (a22 - a11);
                                        this.off[x1 + 1] = this.c * a23;
                                        this.bulge = this.s * a23;
                                        if (this.Q != null) {
                                            this.updateQ(x1, x1 + 1, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.createBulge2by2 = function (x1, p, byAngle) {
                                        var a11 = this.diag[x1];
                                        var a22 = this.diag[x1 + 1];
                                        var a12 = this.off[x1];
                                        if (byAngle) {
                                            this.c = Math.cos(p);
                                            this.s = Math.sin(p);
                                            this.c2 = this.c * this.c;
                                            this.s2 = this.s * this.s;
                                            this.cs = this.c * this.s;
                                        }
                                        else {
                                            this.computeRotation(a11 - p, a12);
                                        }
                                        this.diag[x1] = this.c2 * a11 + 2.0 * this.cs * a12 + this.s2 * a22;
                                        this.diag[x1 + 1] = this.c2 * a22 - 2.0 * this.cs * a12 + this.s2 * a11;
                                        this.off[x1] = a12 * (this.c2 - this.s2) + this.cs * (a22 - a11);
                                        if (this.Q != null) {
                                            this.updateQ(x1, x1 + 1, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.computeRotation = function (run, rise) {
                                        if (Math.abs(rise) > Math.abs(run)) {
                                            var k = run / rise;
                                            var bottom = 1.0 + k * k;
                                            var bottom_sq = Math.sqrt(bottom);
                                            this.s2 = 1.0 / bottom;
                                            this.c2 = k * k / bottom;
                                            this.cs = k / bottom;
                                            this.s = 1.0 / bottom_sq;
                                            this.c = k / bottom_sq;
                                        }
                                        else {
                                            var t = rise / run;
                                            var bottom = 1.0 + t * t;
                                            var bottom_sq = Math.sqrt(bottom);
                                            this.c2 = 1.0 / bottom;
                                            this.s2 = t * t / bottom;
                                            this.cs = t / bottom;
                                            this.c = 1.0 / bottom_sq;
                                            this.s = t / bottom_sq;
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.removeBulge = function (x1) {
                                        var a22 = this.diag[x1 + 1];
                                        var a33 = this.diag[x1 + 2];
                                        var a12 = this.off[x1];
                                        var a23 = this.off[x1 + 1];
                                        var a34 = this.off[x1 + 2];
                                        this.computeRotation(a12, this.bulge);
                                        this.diag[x1 + 1] = this.c2 * a22 + 2.0 * this.cs * a23 + this.s2 * a33;
                                        this.diag[x1 + 2] = this.c2 * a33 - 2.0 * this.cs * a23 + this.s2 * a22;
                                        this.off[x1] = this.c * a12 + this.s * this.bulge;
                                        this.off[x1 + 1] = a23 * (this.c2 - this.s2) + this.cs * (a33 - a22);
                                        this.off[x1 + 2] = this.c * a34;
                                        this.bulge = this.s * a34;
                                        if (this.Q != null) {
                                            this.updateQ(x1 + 1, x1 + 2, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.removeBulgeEnd = function (x1) {
                                        var a22 = this.diag[x1 + 1];
                                        var a12 = this.off[x1];
                                        var a23 = this.off[x1 + 1];
                                        var a33 = this.diag[x1 + 2];
                                        this.computeRotation(a12, this.bulge);
                                        this.diag[x1 + 1] = this.c2 * a22 + 2.0 * this.cs * a23 + this.s2 * a33;
                                        this.diag[x1 + 2] = this.c2 * a33 - 2.0 * this.cs * a23 + this.s2 * a22;
                                        this.off[x1] = this.c * a12 + this.s * this.bulge;
                                        this.off[x1 + 1] = a23 * (this.c2 - this.s2) + this.cs * (a33 - a22);
                                        if (this.Q != null) {
                                            this.updateQ(x1 + 1, x1 + 2, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.eigenvalue2by2 = function (x1) {
                                        var a = this.diag[x1];
                                        var b = this.off[x1];
                                        var c = this.diag[x1 + 1];
                                        var absA = Math.abs(a);
                                        var absB = Math.abs(b);
                                        var absC = Math.abs(c);
                                        var scale = absA > absB ? absA : absB;
                                        if (absC > scale) {
                                            scale = absC;
                                        }
                                        if (scale == 0) {
                                            this.off[x1] = 0;
                                            this.diag[x1] = 0;
                                            this.diag[x1 + 1] = 0;
                                            return;
                                        }
                                        a /= scale;
                                        b /= scale;
                                        c /= scale;
                                        this.eigenSmall.symm2x2_fast(a, b, c);
                                        this.off[x1] = 0;
                                        this.diag[x1] = scale * this.eigenSmall.value0.real;
                                        this.diag[x1 + 1] = scale * this.eigenSmall.value1.real;
                                    };
                                    SymmetricQREigenHelper.prototype.exceptionalShift = function () {
                                        this.numExceptional++;
                                        var mag = 0.05 * this.numExceptional;
                                        if (mag > 1.0) {
                                            mag = 1.0;
                                        }
                                        var theta = 2.0 * (this.rand.nextDouble() - 0.5) * mag;
                                        this.performImplicitSingleStep(theta, true);
                                        this.lastExceptional = this.steps;
                                    };
                                    SymmetricQREigenHelper.prototype.nextSplit = function () {
                                        if (this.numSplits == 0) {
                                            return false;
                                        }
                                        this.x2 = this.splits[--this.numSplits];
                                        if (this.numSplits > 0) {
                                            this.x1 = this.splits[this.numSplits - 1] + 1;
                                        }
                                        else {
                                            this.x1 = 0;
                                        }
                                        return true;
                                    };
                                    SymmetricQREigenHelper.prototype.computeShift = function () {
                                        if (this.x2 - this.x1 >= 1) {
                                            return this.computeWilkinsonShift();
                                        }
                                        else {
                                            return this.diag[this.x2];
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.computeWilkinsonShift = function () {
                                        var a = this.diag[this.x2 - 1];
                                        var b = this.off[this.x2 - 1];
                                        var c = this.diag[this.x2];
                                        var absA = Math.abs(a);
                                        var absB = Math.abs(b);
                                        var absC = Math.abs(c);
                                        var scale = absA > absB ? absA : absB;
                                        if (absC > scale) {
                                            scale = absC;
                                        }
                                        if (scale == 0) {
                                            throw new java.lang.RuntimeException("this should never happen");
                                        }
                                        a /= scale;
                                        b /= scale;
                                        c /= scale;
                                        this.eigenSmall.symm2x2_fast(a, b, c);
                                        var diff0 = Math.abs(this.eigenSmall.value0.real - c);
                                        var diff1 = Math.abs(this.eigenSmall.value1.real - c);
                                        if (diff0 < diff1) {
                                            return scale * this.eigenSmall.value0.real;
                                        }
                                        else {
                                            return scale * this.eigenSmall.value1.real;
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.getMatrixSize = function () {
                                        return this.N;
                                    };
                                    SymmetricQREigenHelper.prototype.resetSteps = function () {
                                        this.steps = 0;
                                        this.lastExceptional = 0;
                                    };
                                    return SymmetricQREigenHelper;
                                })();
                                decomposition.SymmetricQREigenHelper = SymmetricQREigenHelper;
                                var SymmetricQrAlgorithm = (function () {
                                    function SymmetricQrAlgorithm(helper) {
                                        this.exceptionalThresh = 15;
                                        this.maxIterations = this.exceptionalThresh * 15;
                                        this.helper = helper;
                                    }
                                    SymmetricQrAlgorithm.prototype.setMaxIterations = function (maxIterations) {
                                        this.maxIterations = maxIterations;
                                    };
                                    SymmetricQrAlgorithm.prototype.getQ = function () {
                                        return this.Q;
                                    };
                                    SymmetricQrAlgorithm.prototype.setQ = function (q) {
                                        this.Q = q;
                                    };
                                    SymmetricQrAlgorithm.prototype.setFastEigenvalues = function (fastEigenvalues) {
                                        this.fastEigenvalues = fastEigenvalues;
                                    };
                                    SymmetricQrAlgorithm.prototype.getEigenvalue = function (index) {
                                        return this.helper.diag[index];
                                    };
                                    SymmetricQrAlgorithm.prototype.getNumberOfEigenvalues = function () {
                                        return this.helper.N;
                                    };
                                    SymmetricQrAlgorithm.prototype.process = function (sideLength, diag, off, eigenvalues) {
                                        if (diag != null) {
                                            this.helper.init(diag, off, sideLength);
                                        }
                                        if (this.Q == null) {
                                            this.Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity1D(this.helper.N);
                                        }
                                        this.helper.setQ(this.Q);
                                        this.followingScript = true;
                                        this.eigenvalues = eigenvalues;
                                        this.fastEigenvalues = false;
                                        return this._process();
                                    };
                                    SymmetricQrAlgorithm.prototype.process3arg = function (sideLength, diag, off) {
                                        if (diag != null) {
                                            this.helper.init(diag, off, sideLength);
                                        }
                                        this.followingScript = false;
                                        this.eigenvalues = null;
                                        return this._process();
                                    };
                                    SymmetricQrAlgorithm.prototype._process = function () {
                                        while (this.helper.x2 >= 0) {
                                            if (this.helper.steps > this.maxIterations) {
                                                return false;
                                            }
                                            if (this.helper.x1 == this.helper.x2) {
                                                this.helper.resetSteps();
                                                if (!this.helper.nextSplit()) {
                                                    break;
                                                }
                                            }
                                            else {
                                                if (this.fastEigenvalues && this.helper.x2 - this.helper.x1 == 1) {
                                                    this.helper.resetSteps();
                                                    this.helper.eigenvalue2by2(this.helper.x1);
                                                    this.helper.setSubmatrix(this.helper.x2, this.helper.x2);
                                                }
                                                else {
                                                    if (this.helper.steps - this.helper.lastExceptional > this.exceptionalThresh) {
                                                        this.helper.exceptionalShift();
                                                    }
                                                    else {
                                                        this.performStep();
                                                    }
                                                }
                                            }
                                            this.helper.incrementSteps();
                                        }
                                        return true;
                                    };
                                    SymmetricQrAlgorithm.prototype.performStep = function () {
                                        for (var i = this.helper.x2 - 1; i >= this.helper.x1; i--) {
                                            if (this.helper.isZero(i)) {
                                                this.helper.splits[this.helper.numSplits++] = i;
                                                this.helper.x1 = i + 1;
                                                return;
                                            }
                                        }
                                        var lambda;
                                        if (this.followingScript) {
                                            if (this.helper.steps > 10) {
                                                this.followingScript = false;
                                                return;
                                            }
                                            else {
                                                lambda = this.eigenvalues[this.helper.x2];
                                            }
                                        }
                                        else {
                                            lambda = this.helper.computeShift();
                                        }
                                        this.helper.performImplicitSingleStep(lambda, false);
                                    };
                                    return SymmetricQrAlgorithm;
                                })();
                                decomposition.SymmetricQrAlgorithm = SymmetricQrAlgorithm;
                                var TridiagonalDecompositionHouseholder_D64 = (function () {
                                    function TridiagonalDecompositionHouseholder_D64() {
                                        this.N = 1;
                                        this.w = new Float64Array(this.N);
                                        this.b = new Float64Array(this.N);
                                        this.gammas = new Float64Array(this.N);
                                    }
                                    TridiagonalDecompositionHouseholder_D64.prototype.getQT = function () {
                                        return this.QT;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.getDiagonal = function (diag, off) {
                                        for (var i = 0; i < this.N; i++) {
                                            diag[i] = this.QT.data[i * this.N + i];
                                            if (i + 1 < this.N) {
                                                off[i] = this.QT.data[i * this.N + i + 1];
                                            }
                                        }
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.getT = function (T) {
                                        if (T == null) {
                                            T = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                        }
                                        else {
                                            if (this.N != T.numRows || this.N != T.numCols) {
                                                throw new java.lang.RuntimeException("The provided H must have the same dimensions as the decomposed matrix.");
                                            }
                                            else {
                                                T.zero();
                                            }
                                        }
                                        T.data[0] = this.QT.data[0];
                                        for (var i = 1; i < this.N; i++) {
                                            T.set(i, i, this.QT.get(i, i));
                                            var a = this.QT.get(i - 1, i);
                                            T.set(i - 1, i, a);
                                            T.set(i, i - 1, a);
                                        }
                                        if (this.N > 1) {
                                            T.data[(this.N - 1) * this.N + this.N - 1] = this.QT.data[(this.N - 1) * this.N + this.N - 1];
                                            T.data[(this.N - 1) * this.N + this.N - 2] = this.QT.data[(this.N - 2) * this.N + this.N - 1];
                                        }
                                        return T;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.getQ = function (Q, transposed) {
                                        if (Q == null) {
                                            Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity1D(this.N);
                                        }
                                        else {
                                            if (this.N != Q.numRows || this.N != Q.numCols) {
                                                throw new java.lang.RuntimeException("The provided H must have the same dimensions as the decomposed matrix.");
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                            }
                                        }
                                        for (var i = 0; i < this.N; i++) {
                                            this.w[i] = 0;
                                        }
                                        if (transposed) {
                                            for (var j = this.N - 2; j >= 0; j--) {
                                                this.w[j + 1] = 1;
                                                for (var i = j + 2; i < this.N; i++) {
                                                    this.w[i] = this.QT.data[j * this.N + i];
                                                }
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(Q, this.w, this.gammas[j + 1], j + 1, j + 1, this.N);
                                            }
                                        }
                                        else {
                                            for (var j = this.N - 2; j >= 0; j--) {
                                                this.w[j + 1] = 1;
                                                for (var i = j + 2; i < this.N; i++) {
                                                    this.w[i] = this.QT.get(j, i);
                                                }
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(Q, this.w, this.gammas[j + 1], j + 1, j + 1, this.N, this.b);
                                            }
                                        }
                                        return Q;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.decompose = function (A) {
                                        this.init(A);
                                        for (var k = 1; k < this.N; k++) {
                                            this.similarTransform(k);
                                        }
                                        return true;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.similarTransform = function (k) {
                                        var t = this.QT.data;
                                        var max = 0;
                                        var rowU = (k - 1) * this.N;
                                        for (var i = k; i < this.N; i++) {
                                            var val = Math.abs(t[rowU + i]);
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        if (max > 0) {
                                            var tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide(k, this.N, t, rowU, max);
                                            var nu = t[rowU + k] + tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements(k + 1, this.N, t, rowU, nu);
                                            t[rowU + k] = 1.0;
                                            var gamma = nu / tau;
                                            this.gammas[k] = gamma;
                                            this.householderSymmetric(k, gamma);
                                            t[rowU + k] = -tau * max;
                                        }
                                        else {
                                            this.gammas[k] = 0;
                                        }
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.householderSymmetric = function (row, gamma) {
                                        var startU = (row - 1) * this.N;
                                        for (var i = row; i < this.N; i++) {
                                            var total = 0;
                                            for (var j = row; j < i; j++) {
                                                total += this.QT.data[j * this.N + i] * this.QT.data[startU + j];
                                            }
                                            for (var j = i; j < this.N; j++) {
                                                total += this.QT.data[i * this.N + j] * this.QT.data[startU + j];
                                            }
                                            this.w[i] = -gamma * total;
                                        }
                                        var alpha = 0;
                                        for (var i = row; i < this.N; i++) {
                                            alpha += this.QT.data[startU + i] * this.w[i];
                                        }
                                        alpha *= -0.5 * gamma;
                                        for (var i = row; i < this.N; i++) {
                                            this.w[i] += alpha * this.QT.data[startU + i];
                                        }
                                        for (var i = row; i < this.N; i++) {
                                            var ww = this.w[i];
                                            var uu = this.QT.data[startU + i];
                                            var rowA = i * this.N;
                                            for (var j = i; j < this.N; j++) {
                                                this.QT.data[rowA + j] += ww * this.QT.data[startU + j] + this.w[j] * uu;
                                            }
                                        }
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.init = function (A) {
                                        if (A.numRows != A.numCols) {
                                            throw new java.lang.RuntimeException("Must be square");
                                        }
                                        if (A.numCols != this.N) {
                                            this.N = A.numCols;
                                            if (this.w.length < this.N) {
                                                this.w = new Float64Array(this.N);
                                                this.gammas = new Float64Array(this.N);
                                                this.b = new Float64Array(this.N);
                                            }
                                        }
                                        this.QT = A;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.inputModified = function () {
                                        return true;
                                    };
                                    return TridiagonalDecompositionHouseholder_D64;
                                })();
                                decomposition.TridiagonalDecompositionHouseholder_D64 = TridiagonalDecompositionHouseholder_D64;
                                var WatchedDoubleStepQRDecomposition_D64 = (function () {
                                    function WatchedDoubleStepQRDecomposition_D64(computeVectors) {
                                        this.hessenberg = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.HessenbergSimilarDecomposition_D64(10);
                                        this.algValue = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQREigenvalue();
                                        this.algVector = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQREigenvector();
                                        this.computeVectors = computeVectors;
                                    }
                                    WatchedDoubleStepQRDecomposition_D64.prototype.decompose = function (A) {
                                        if (!this.hessenberg.decompose(A)) {
                                            return false;
                                        }
                                        this.H = this.hessenberg.getH(null);
                                        this.algValue.getImplicitQR().createR = false;
                                        if (!this.algValue.process(this.H)) {
                                            return false;
                                        }
                                        this.algValue.getImplicitQR().createR = true;
                                        if (this.computeVectors) {
                                            return this.algVector.process(this.algValue.getImplicitQR(), this.H, this.hessenberg.getQ(null));
                                        }
                                        else {
                                            return true;
                                        }
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.inputModified = function () {
                                        return this.hessenberg.inputModified();
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.getNumberOfEigenvalues = function () {
                                        return this.algValue.getEigenvalues().length;
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.getEigenvalue = function (index) {
                                        return this.algValue.getEigenvalues()[index];
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.getEigenVector = function (index) {
                                        return this.algVector.getEigenvectors()[index];
                                    };
                                    return WatchedDoubleStepQRDecomposition_D64;
                                })();
                                decomposition.WatchedDoubleStepQRDecomposition_D64 = WatchedDoubleStepQRDecomposition_D64;
                                var WatchedDoubleStepQREigen = (function () {
                                    function WatchedDoubleStepQREigen() {
                                        this.rand = new java.util.Random();
                                        this.valueSmall = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.EigenvalueSmall();
                                        this.temp = new Float64Array(9);
                                        this.printHumps = false;
                                        this.checkHessenberg = false;
                                        this.checkOrthogonal = false;
                                        this.checkUncountable = false;
                                        this.useStandardEq = false;
                                        this.useCareful2x2 = true;
                                        this.normalize = true;
                                        this.exceptionalThreshold = 20;
                                        this.maxIterations = this.exceptionalThreshold * 20;
                                        this.createR = true;
                                    }
                                    WatchedDoubleStepQREigen.prototype.incrementSteps = function () {
                                        this.steps++;
                                    };
                                    WatchedDoubleStepQREigen.prototype.setQ = function (Q) {
                                        this.Q = Q;
                                    };
                                    WatchedDoubleStepQREigen.prototype.addEigenvalue = function (v) {
                                        this.numStepsFind[this.numEigen] = this.steps;
                                        this.eigenvalues[this.numEigen].setValues(v, 0);
                                        this.numEigen++;
                                        this.steps = 0;
                                        this.lastExceptional = 0;
                                    };
                                    WatchedDoubleStepQREigen.prototype.addEigenvalue2arg = function (v, i) {
                                        this.numStepsFind[this.numEigen] = this.steps;
                                        this.eigenvalues[this.numEigen].setValues(v, i);
                                        this.numEigen++;
                                        this.steps = 0;
                                        this.lastExceptional = 0;
                                    };
                                    WatchedDoubleStepQREigen.prototype.setChecks = function (hessenberg, orthogonal, uncountable) {
                                        this.checkHessenberg = hessenberg;
                                        this.checkOrthogonal = orthogonal;
                                        this.checkUncountable = uncountable;
                                    };
                                    WatchedDoubleStepQREigen.prototype.isZero = function (x1, x2) {
                                        var target = Math.abs(this.A.get(x1, x2));
                                        var above = Math.abs(this.A.get(x1 - 1, x2));
                                        var right = Math.abs(this.A.get(x1, x2 + 1));
                                        return target <= 0.5 * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS * (above + right);
                                    };
                                    WatchedDoubleStepQREigen.prototype.setup = function (A) {
                                        if (A.numRows != A.numCols) {
                                            throw new java.lang.RuntimeException("Must be square");
                                        }
                                        if (this.N != A.numRows) {
                                            this.N = A.numRows;
                                            this.A = A.copy();
                                            this.u = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows, 1);
                                            this._temp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows, 1);
                                            this.numStepsFind = new Int32Array(A.numRows);
                                        }
                                        else {
                                            this.A.setMatrix(A);
                                        }
                                        for (var i = 2; i < this.N; i++) {
                                            for (var j = 0; j < i - 1; j++) {
                                                this.A.set(i, j, 0);
                                            }
                                        }
                                        this.eigenvalues = new Array();
                                        for (var i = 0; i < this.eigenvalues.length; i++) {
                                            this.eigenvalues[i] = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                        }
                                        this.numEigen = 0;
                                        this.lastExceptional = 0;
                                        this.numExceptional = 0;
                                        this.steps = 0;
                                    };
                                    WatchedDoubleStepQREigen.prototype.exceptionalShift = function (x1, x2) {
                                        if (this.printHumps) {
                                            System.out.println("Performing exceptional implicit double step");
                                        }
                                        var val = Math.abs(this.A.get(x2, x2));
                                        if (val == 0) {
                                            val = 1;
                                        }
                                        this.numExceptional++;
                                        var p = 1 - Math.pow(0.1, this.numExceptional);
                                        val *= p + 2.0 * (1.0 - p) * (this.rand.nextDouble() - 0.5);
                                        if (this.rand.nextBoolean()) {
                                            val = -val;
                                        }
                                        this.performImplicitSingleStep(x1, x2, val);
                                        this.lastExceptional = this.steps;
                                    };
                                    WatchedDoubleStepQREigen.prototype.implicitDoubleStep = function (x1, x2) {
                                        if (this.printHumps) {
                                            System.out.println("Performing implicit double step");
                                        }
                                        var z11 = this.A.get(x2 - 1, x2 - 1);
                                        var z12 = this.A.get(x2 - 1, x2);
                                        var z21 = this.A.get(x2, x2 - 1);
                                        var z22 = this.A.get(x2, x2);
                                        var a11 = this.A.get(x1, x1);
                                        var a21 = this.A.get(x1 + 1, x1);
                                        var a12 = this.A.get(x1, x1 + 1);
                                        var a22 = this.A.get(x1 + 1, x1 + 1);
                                        var a32 = this.A.get(x1 + 2, x1 + 1);
                                        if (this.normalize) {
                                            this.temp[0] = a11;
                                            this.temp[1] = a21;
                                            this.temp[2] = a12;
                                            this.temp[3] = a22;
                                            this.temp[4] = a32;
                                            this.temp[5] = z11;
                                            this.temp[6] = z22;
                                            this.temp[7] = z12;
                                            this.temp[8] = z21;
                                            var max = Math.abs(this.temp[0]);
                                            for (var j = 1; j < this.temp.length; j++) {
                                                if (Math.abs(this.temp[j]) > max) {
                                                    max = Math.abs(this.temp[j]);
                                                }
                                            }
                                            a11 /= max;
                                            a21 /= max;
                                            a12 /= max;
                                            a22 /= max;
                                            a32 /= max;
                                            z11 /= max;
                                            z22 /= max;
                                            z12 /= max;
                                            z21 /= max;
                                        }
                                        var b11;
                                        var b21;
                                        var b31;
                                        if (this.useStandardEq) {
                                            b11 = ((a11 - z11) * (a11 - z22) - z21 * z12) / a21 + a12;
                                            b21 = a11 + a22 - z11 - z22;
                                            b31 = a32;
                                        }
                                        else {
                                            b11 = ((a11 - z11) * (a11 - z22) - z21 * z12) + a12 * a21;
                                            b21 = (a11 + a22 - z11 - z22) * a21;
                                            b31 = a32 * a21;
                                        }
                                        this.performImplicitDoubleStep5arg(x1, x2, b11, b21, b31);
                                    };
                                    WatchedDoubleStepQREigen.prototype.performImplicitDoubleStep = function (x1, x2, real, img) {
                                        var a11 = this.A.get(x1, x1);
                                        var a21 = this.A.get(x1 + 1, x1);
                                        var a12 = this.A.get(x1, x1 + 1);
                                        var a22 = this.A.get(x1 + 1, x1 + 1);
                                        var a32 = this.A.get(x1 + 2, x1 + 1);
                                        var p_plus_t = 2.0 * real;
                                        var p_times_t = real * real + img * img;
                                        var b11;
                                        var b21;
                                        var b31;
                                        if (this.useStandardEq) {
                                            b11 = (a11 * a11 - p_plus_t * a11 + p_times_t) / a21 + a12;
                                            b21 = a11 + a22 - p_plus_t;
                                            b31 = a32;
                                        }
                                        else {
                                            b11 = (a11 * a11 - p_plus_t * a11 + p_times_t) + a12 * a21;
                                            b21 = (a11 + a22 - p_plus_t) * a21;
                                            b31 = a32 * a21;
                                        }
                                        this.performImplicitDoubleStep5arg(x1, x2, b11, b21, b31);
                                    };
                                    WatchedDoubleStepQREigen.prototype.performImplicitDoubleStep5arg = function (x1, x2, b11, b21, b31) {
                                        if (!this.bulgeDoubleStepQn6arg(x1, b11, b21, b31, 0, false)) {
                                            return;
                                        }
                                        if (this.Q != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, x1, x1 + 3, this._temp.data);
                                        }
                                        for (var i = x1; i < x2 - 2; i++) {
                                            if (this.bulgeDoubleStepQn(i) && this.Q != null) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, i + 1, i + 4, this._temp.data);
                                            }
                                        }
                                        if (x2 - 2 >= 0 && this.bulgeSingleStepQn(x2 - 2) && this.Q != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, x2 - 1, x2 + 1, this._temp.data);
                                        }
                                    };
                                    WatchedDoubleStepQREigen.prototype.performImplicitSingleStep = function (x1, x2, eigenvalue) {
                                        if (!this.createBulgeSingleStep(x1, eigenvalue)) {
                                            return;
                                        }
                                        if (this.Q != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, x1, x1 + 2, this._temp.data);
                                        }
                                        for (var i = x1; i < x2 - 1; i++) {
                                            if (this.bulgeSingleStepQn(i) && this.Q != null) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, i + 1, i + 3, this._temp.data);
                                            }
                                        }
                                    };
                                    WatchedDoubleStepQREigen.prototype.createBulgeSingleStep = function (x1, eigenvalue) {
                                        var b11 = this.A.get(x1, x1) - eigenvalue;
                                        var b21 = this.A.get(x1 + 1, x1);
                                        var threshold = Math.abs(this.A.get(x1, x1)) * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                        return this.bulgeSingleStepQn5arg(x1, b11, b21, threshold, false);
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeDoubleStepQn = function (i) {
                                        var a11 = this.A.get(i + 1, i);
                                        var a21 = this.A.get(i + 2, i);
                                        var a31 = this.A.get(i + 3, i);
                                        var threshold = Math.abs(this.A.get(i, i)) * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                        return this.bulgeDoubleStepQn6arg(i + 1, a11, a21, a31, threshold, true);
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeDoubleStepQn6arg = function (i, a11, a21, a31, threshold, set) {
                                        var max;
                                        if (this.normalize) {
                                            var absA11 = Math.abs(a11);
                                            var absA21 = Math.abs(a21);
                                            var absA31 = Math.abs(a31);
                                            max = absA11 > absA21 ? absA11 : absA21;
                                            if (absA31 > max) {
                                                max = absA31;
                                            }
                                            if (max <= threshold) {
                                                if (set) {
                                                    this.A.set(i, i - 1, 0);
                                                    this.A.set(i + 1, i - 1, 0);
                                                    this.A.set(i + 2, i - 1, 0);
                                                }
                                                return false;
                                            }
                                            a11 /= max;
                                            a21 /= max;
                                            a31 /= max;
                                        }
                                        else {
                                            max = 1;
                                        }
                                        var tau = Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31);
                                        if (a11 < 0) {
                                            tau = -tau;
                                        }
                                        var div = a11 + tau;
                                        this.u.set(i, 0, 1);
                                        this.u.set(i + 1, 0, a21 / div);
                                        this.u.set(i + 2, 0, a31 / div);
                                        this.gamma = div / tau;
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.A, this.u.data, this.gamma, 0, i, i + 3, this._temp.data);
                                        if (set) {
                                            this.A.set(i, i - 1, -max * tau);
                                            this.A.set(i + 1, i - 1, 0);
                                            this.A.set(i + 2, i - 1, 0);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.A, this.u.data, this.gamma, 0, i, i + 3);
                                        return true;
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeSingleStepQn = function (i) {
                                        var a11 = this.A.get(i + 1, i);
                                        var a21 = this.A.get(i + 2, i);
                                        var threshold = Math.abs(this.A.get(i, i)) * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                        return this.bulgeSingleStepQn5arg(i + 1, a11, a21, threshold, true);
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeSingleStepQn5arg = function (i, a11, a21, threshold, set) {
                                        var max;
                                        if (this.normalize) {
                                            max = Math.abs(a11);
                                            if (max < Math.abs(a21)) {
                                                max = Math.abs(a21);
                                            }
                                            if (max <= threshold) {
                                                if (set) {
                                                    this.A.set(i, i - 1, 0);
                                                    this.A.set(i + 1, i - 1, 0);
                                                }
                                                return false;
                                            }
                                            a11 /= max;
                                            a21 /= max;
                                        }
                                        else {
                                            max = 1;
                                        }
                                        var tau = Math.sqrt(a11 * a11 + a21 * a21);
                                        if (a11 < 0) {
                                            tau = -tau;
                                        }
                                        var div = a11 + tau;
                                        this.u.set(i, 0, 1);
                                        this.u.set(i + 1, 0, a21 / div);
                                        this.gamma = div / tau;
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.A, this.u.data, this.gamma, 0, i, i + 2, this._temp.data);
                                        if (set) {
                                            this.A.set(i, i - 1, -max * tau);
                                            this.A.set(i + 1, i - 1, 0);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.A, this.u.data, this.gamma, 0, i, i + 2);
                                        return true;
                                    };
                                    WatchedDoubleStepQREigen.prototype.eigen2by2_scale = function (a11, a12, a21, a22) {
                                        var abs11 = Math.abs(a11);
                                        var abs22 = Math.abs(a22);
                                        var abs12 = Math.abs(a12);
                                        var abs21 = Math.abs(a21);
                                        var max = abs11 > abs22 ? abs11 : abs22;
                                        if (max < abs12) {
                                            max = abs12;
                                        }
                                        if (max < abs21) {
                                            max = abs21;
                                        }
                                        if (max == 0) {
                                            this.valueSmall.value0.real = 0;
                                            this.valueSmall.value0.imaginary = 0;
                                            this.valueSmall.value1.real = 0;
                                            this.valueSmall.value1.imaginary = 0;
                                        }
                                        else {
                                            a12 /= max;
                                            a21 /= max;
                                            a11 /= max;
                                            a22 /= max;
                                            if (this.useCareful2x2) {
                                                this.valueSmall.value2x2(a11, a12, a21, a22);
                                            }
                                            else {
                                                this.valueSmall.value2x2_fast(a11, a12, a21, a22);
                                            }
                                            this.valueSmall.value0.real *= max;
                                            this.valueSmall.value0.imaginary *= max;
                                            this.valueSmall.value1.real *= max;
                                            this.valueSmall.value1.imaginary *= max;
                                        }
                                    };
                                    WatchedDoubleStepQREigen.prototype.getNumberOfEigenvalues = function () {
                                        return this.numEigen;
                                    };
                                    WatchedDoubleStepQREigen.prototype.getEigenvalues = function () {
                                        return this.eigenvalues;
                                    };
                                    WatchedDoubleStepQREigen.prototype.addComputedEigen2x2 = function (x1, x2) {
                                        this.eigen2by2_scale(this.A.get(x1, x1), this.A.get(x1, x2), this.A.get(x2, x1), this.A.get(x2, x2));
                                        if (this.checkUncountable && (java.lang.Double.isNaN(this.valueSmall.value0.real) || java.lang.Double.isNaN(this.valueSmall.value1.real))) {
                                            throw new java.lang.RuntimeException("Uncountable");
                                        }
                                        this.addEigenvalue2arg(this.valueSmall.value0.real, this.valueSmall.value0.imaginary);
                                        this.addEigenvalue2arg(this.valueSmall.value1.real, this.valueSmall.value1.imaginary);
                                    };
                                    WatchedDoubleStepQREigen.prototype.isReal2x2 = function (x1, x2) {
                                        this.eigen2by2_scale(this.A.get(x1, x1), this.A.get(x1, x2), this.A.get(x2, x1), this.A.get(x2, x2));
                                        return this.valueSmall.value0.isReal();
                                    };
                                    WatchedDoubleStepQREigen.prototype.addEigenAt = function (x1) {
                                        this.addEigenvalue(this.A.get(x1, x1));
                                    };
                                    WatchedDoubleStepQREigen.prototype.printSteps = function () {
                                        for (var i = 0; i < this.N; i++) {
                                            System.out.println("Step[" + i + "] = " + this.numStepsFind[i]);
                                        }
                                    };
                                    return WatchedDoubleStepQREigen;
                                })();
                                decomposition.WatchedDoubleStepQREigen = WatchedDoubleStepQREigen;
                                var WatchedDoubleStepQREigenvalue = (function () {
                                    function WatchedDoubleStepQREigenvalue() {
                                        this.implicitQR = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQREigen();
                                    }
                                    WatchedDoubleStepQREigenvalue.prototype.setup = function (A) {
                                        this.implicitQR.setup(A);
                                        this.implicitQR.setQ(null);
                                        this.splits = new Int32Array(A.numRows);
                                        this.numSplits = 0;
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.process = function (origA) {
                                        this.setup(origA);
                                        this.x1 = 0;
                                        this.x2 = origA.numRows - 1;
                                        while (this.implicitQR.numEigen < origA.numRows) {
                                            if (this.implicitQR.steps > this.implicitQR.maxIterations) {
                                                return false;
                                            }
                                            this.implicitQR.incrementSteps();
                                            if (this.x2 < this.x1) {
                                                this.moveToNextSplit();
                                            }
                                            else {
                                                if (this.x2 - this.x1 == 0) {
                                                    this.implicitQR.addEigenAt(this.x1);
                                                    this.x2--;
                                                }
                                                else {
                                                    if (this.x2 - this.x1 == 1) {
                                                        this.implicitQR.addComputedEigen2x2(this.x1, this.x2);
                                                        this.x2 -= 2;
                                                    }
                                                    else {
                                                        if (this.implicitQR.steps - this.implicitQR.lastExceptional > this.implicitQR.exceptionalThreshold) {
                                                            if (java.lang.Double.isNaN(this.implicitQR.A.get(this.x2, this.x2))) {
                                                                return false;
                                                            }
                                                            this.implicitQR.exceptionalShift(this.x1, this.x2);
                                                        }
                                                        else {
                                                            if (this.implicitQR.isZero(this.x2, this.x2 - 1)) {
                                                                this.implicitQR.addEigenAt(this.x2);
                                                                this.x2--;
                                                            }
                                                            else {
                                                                this.performIteration();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        return true;
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.moveToNextSplit = function () {
                                        if (this.numSplits <= 0) {
                                            throw new java.lang.RuntimeException("bad");
                                        }
                                        this.x2 = this.splits[--this.numSplits];
                                        if (this.numSplits > 0) {
                                            this.x1 = this.splits[this.numSplits - 1] + 1;
                                        }
                                        else {
                                            this.x1 = 0;
                                        }
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.performIteration = function () {
                                        var changed = false;
                                        for (var i = this.x2; i > this.x1; i--) {
                                            if (this.implicitQR.isZero(i, i - 1)) {
                                                this.x1 = i;
                                                this.splits[this.numSplits++] = i - 1;
                                                changed = true;
                                                break;
                                            }
                                        }
                                        if (!changed) {
                                            this.implicitQR.implicitDoubleStep(this.x1, this.x2);
                                        }
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.getNumberOfEigenvalues = function () {
                                        return this.implicitQR.getNumberOfEigenvalues();
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.getEigenvalues = function () {
                                        return this.implicitQR.getEigenvalues();
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.getImplicitQR = function () {
                                        return this.implicitQR;
                                    };
                                    return WatchedDoubleStepQREigenvalue;
                                })();
                                decomposition.WatchedDoubleStepQREigenvalue = WatchedDoubleStepQREigenvalue;
                                var WatchedDoubleStepQREigenvector = (function () {
                                    function WatchedDoubleStepQREigenvector() {
                                    }
                                    WatchedDoubleStepQREigenvector.prototype.process = function (implicit, A, Q_h) {
                                        this.implicit = implicit;
                                        if (this.N != A.numRows) {
                                            this.N = A.numRows;
                                            this.Q = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                            this.splits = new Int32Array(this.N);
                                            this.origEigenvalues = new Array();
                                            this.eigenvectors = new Array();
                                            this.eigenvectorTemp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, 1);
                                            this.solver = new org.kevoree.modeling.util.maths.matrix.solvers.LinearSolverLu_D64(new org.kevoree.modeling.util.maths.matrix.solvers.LUDecompositionAlt_D64());
                                        }
                                        else {
                                            this.eigenvectors = new Array();
                                        }
                                        System.arraycopy(implicit.eigenvalues, 0, this.origEigenvalues, 0, this.N);
                                        implicit.setup(A);
                                        implicit.setQ(this.Q);
                                        this.numSplits = 0;
                                        this.onscript = true;
                                        if (!this.findQandR()) {
                                            return false;
                                        }
                                        return this.extractVectors(Q_h);
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.extractVectors = function (Q_h) {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.memset(this.eigenvectorTemp.data, 0);
                                        var triangular = true;
                                        for (var i = 0; i < this.N; i++) {
                                            var c = this.implicit.eigenvalues[this.N - i - 1];
                                            if (triangular && !c.isReal()) {
                                                triangular = false;
                                            }
                                            if (c.isReal() && this.eigenvectors[this.N - i - 1] == null) {
                                                this.solveEigenvectorDuplicateEigenvalue(c.real, i, triangular);
                                            }
                                        }
                                        if (Q_h != null) {
                                            var temp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, 1);
                                            for (var i = 0; i < this.N; i++) {
                                                var v = this.eigenvectors[i];
                                                if (v != null) {
                                                    org.kevoree.modeling.util.maths.matrix.CommonOps.mult(Q_h, v, temp);
                                                    this.eigenvectors[i] = temp;
                                                    temp = v;
                                                }
                                            }
                                        }
                                        return true;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.solveEigenvectorDuplicateEigenvalue = function (real, first, isTriangle) {
                                        var scale = Math.abs(real);
                                        if (scale == 0) {
                                            scale = 1;
                                        }
                                        this.eigenvectorTemp.reshapeBoolean(this.N, 1, false);
                                        this.eigenvectorTemp.zero();
                                        if (first > 0) {
                                            if (isTriangle) {
                                                this.solveUsingTriangle(real, first, this.eigenvectorTemp);
                                            }
                                            else {
                                                this.solveWithLU(real, first, this.eigenvectorTemp);
                                            }
                                        }
                                        this.eigenvectorTemp.reshapeBoolean(this.N, 1, false);
                                        for (var i = first; i < this.N; i++) {
                                            var c = this.implicit.eigenvalues[this.N - i - 1];
                                            if (c.isReal() && Math.abs(c.real - real) / scale < 100.0 * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS) {
                                                this.eigenvectorTemp.data[i] = 1;
                                                var v = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, 1);
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.multTransA(this.Q, this.eigenvectorTemp, v);
                                                this.eigenvectors[this.N - i - 1] = v;
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.normalizeF(v);
                                                this.eigenvectorTemp.data[i] = 0;
                                            }
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.solveUsingTriangle = function (real, index, r) {
                                        for (var i = 0; i < index; i++) {
                                            this.implicit.A.add(i, i, -real);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.implicit.A, 0, index, index, false, 0, r);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.changeSign(r);
                                        org.kevoree.modeling.util.maths.matrix.solvers.TriangularSolver.solveU(this.implicit.A.data, r.data, this.implicit.A.numRows, 0, index);
                                        for (var i = 0; i < index; i++) {
                                            this.implicit.A.add(i, i, real);
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.solveWithLU = function (real, index, r) {
                                        var A = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(index, index);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.extract6M(this.implicit.A, 0, index, 0, index, A, 0, 0);
                                        for (var i = 0; i < index; i++) {
                                            A.add(i, i, -real);
                                        }
                                        r.reshapeBoolean(index, 1, false);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.implicit.A, 0, index, index, false, 0, r);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.changeSign(r);
                                        if (!this.solver.setA(A)) {
                                            throw new java.lang.RuntimeException("Solve failed");
                                        }
                                        this.solver.solve(r, r);
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.findQandR = function () {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(this.Q);
                                        this.x1 = 0;
                                        this.x2 = this.N - 1;
                                        this.indexVal = 0;
                                        while (this.indexVal < this.N) {
                                            if (!this.findNextEigenvalue()) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.findNextEigenvalue = function () {
                                        var foundEigen = false;
                                        while (!foundEigen && this.implicit.steps < this.implicit.maxIterations) {
                                            this.implicit.incrementSteps();
                                            if (this.x2 < this.x1) {
                                                this.moveToNextSplit();
                                            }
                                            else {
                                                if (this.x2 - this.x1 == 0) {
                                                    this.implicit.addEigenAt(this.x1);
                                                    this.x2--;
                                                    this.indexVal++;
                                                    foundEigen = true;
                                                }
                                                else {
                                                    if (this.x2 - this.x1 == 1 && !this.implicit.isReal2x2(this.x1, this.x2)) {
                                                        this.implicit.addComputedEigen2x2(this.x1, this.x2);
                                                        this.x2 -= 2;
                                                        this.indexVal += 2;
                                                        foundEigen = true;
                                                    }
                                                    else {
                                                        if (this.implicit.steps - this.implicit.lastExceptional > this.implicit.exceptionalThreshold) {
                                                            this.implicit.exceptionalShift(this.x1, this.x2);
                                                            this.implicit.lastExceptional = this.implicit.steps;
                                                        }
                                                        else {
                                                            if (this.implicit.isZero(this.x2, this.x2 - 1)) {
                                                                this.implicit.addEigenAt(this.x2);
                                                                foundEigen = true;
                                                                this.x2--;
                                                                this.indexVal++;
                                                            }
                                                            else {
                                                                this.checkSplitPerformImplicit();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        return foundEigen;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.checkSplitPerformImplicit = function () {
                                        for (var i = this.x2; i > this.x1; i--) {
                                            if (this.implicit.isZero(i, i - 1)) {
                                                this.x1 = i;
                                                this.splits[this.numSplits++] = i - 1;
                                                return;
                                            }
                                        }
                                        if (this.onscript) {
                                            if (this.implicit.steps > this.implicit.exceptionalThreshold / 2) {
                                                this.onscript = false;
                                            }
                                            else {
                                                var a = this.origEigenvalues[this.indexVal];
                                                if (a.isReal()) {
                                                    this.implicit.performImplicitSingleStep(this.x1, this.x2, a.getReal());
                                                }
                                                else {
                                                    if (this.x2 < this.N - 2) {
                                                        this.implicit.performImplicitDoubleStep(this.x1, this.x2, a.real, a.imaginary);
                                                    }
                                                    else {
                                                        this.onscript = false;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (this.x2 - this.x1 >= 1 && this.x2 < this.N - 2) {
                                                this.implicit.implicitDoubleStep(this.x1, this.x2);
                                            }
                                            else {
                                                this.implicit.performImplicitSingleStep(this.x1, this.x2, this.implicit.A.get(this.x2, this.x2));
                                            }
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.moveToNextSplit = function () {
                                        if (this.numSplits <= 0) {
                                            throw new java.lang.RuntimeException("bad");
                                        }
                                        this.x2 = this.splits[--this.numSplits];
                                        if (this.numSplits > 0) {
                                            this.x1 = this.splits[this.numSplits - 1] + 1;
                                        }
                                        else {
                                            this.x1 = 0;
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getQ = function () {
                                        return this.Q;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getImplicit = function () {
                                        return this.implicit;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getEigenvectors = function () {
                                        return this.eigenvectors;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getEigenvalues = function () {
                                        return this.implicit.eigenvalues;
                                    };
                                    return WatchedDoubleStepQREigenvector;
                                })();
                                decomposition.WatchedDoubleStepQREigenvector = WatchedDoubleStepQREigenvector;
                            })(decomposition = solvers.decomposition || (solvers.decomposition = {}));
                        })(solvers = matrix_1.solvers || (matrix_1.solvers = {}));
                    })(matrix = maths.matrix || (maths.matrix = {}));
                    var structure;
                    (function (structure) {
                        var impl;
                        (function (impl) {
                            var Array1D = (function () {
                                function Array1D(p_size, p_offset, p_segmentIndex, p_segment, p_metaClass) {
                                    this._size = p_size;
                                    this._offset = p_offset;
                                    this._segmentIndex = p_segmentIndex;
                                    this._segment = p_segment;
                                    this._metaClass = p_metaClass;
                                }
                                Array1D.prototype.size = function () {
                                    return this._size;
                                };
                                Array1D.prototype.get = function (p_index) {
                                    return this._segment.getDoubleArrayElem(this._segmentIndex, this._offset + p_index, this._metaClass);
                                };
                                Array1D.prototype.set = function (p_index, p_value) {
                                    this._segment.setDoubleArrayElem(this._segmentIndex, this._offset + p_index, p_value, this._metaClass);
                                    return p_value;
                                };
                                Array1D.prototype.add = function (index, value) {
                                    return this.set(index, this.get(index) + value);
                                };
                                return Array1D;
                            })();
                            impl.Array1D = Array1D;
                            var Array2D = (function () {
                                function Array2D(p_nbRows, p_nbColumns, p_offset, p_segmentIndex, p_segment, p_metaClass) {
                                    this._nbRows = p_nbRows;
                                    this._nbColumns = p_nbColumns;
                                    this._offset = p_offset;
                                    this._segment = p_segment;
                                    this._segmentIndex = p_segmentIndex;
                                    this._metaClass = p_metaClass;
                                }
                                Array2D.prototype.nbRows = function () {
                                    return this._nbRows;
                                };
                                Array2D.prototype.nbColumns = function () {
                                    return this._nbColumns;
                                };
                                Array2D.prototype.get = function (p_rowIndex, p_columnIndex) {
                                    return this._segment.getDoubleArrayElem(this._segmentIndex, this._offset + (p_rowIndex * this._nbColumns) + p_columnIndex, this._metaClass);
                                };
                                Array2D.prototype.set = function (p_rowIndex, p_columnIndex, value) {
                                    this._segment.setDoubleArrayElem(this._segmentIndex, this._offset + (p_rowIndex * this._nbColumns) + p_columnIndex, value, this._metaClass);
                                    return value;
                                };
                                Array2D.prototype.add = function (rawIndex, columnIndex, value) {
                                    return this.set(rawIndex, columnIndex, this.get(rawIndex, columnIndex) + value);
                                };
                                return Array2D;
                            })();
                            impl.Array2D = Array2D;
                            var Array3D = (function () {
                                function Array3D(p_nbrows, p_nbColumns, p_nbDeeps, p_offset, p_segmentIndex, p_segment, p_metaClass) {
                                    this._nbrows = p_nbrows;
                                    this._nbColumns = p_nbColumns;
                                    this._nbDeeps = p_nbDeeps;
                                    this._offset = p_offset;
                                    this._segmentIndex = p_segmentIndex;
                                    this._segment = p_segment;
                                    this._metaClass = p_metaClass;
                                }
                                Array3D.prototype.nbRows = function () {
                                    return this._nbrows;
                                };
                                Array3D.prototype.nbColumns = function () {
                                    return this._nbColumns;
                                };
                                Array3D.prototype.nbDeeps = function () {
                                    return this._nbDeeps;
                                };
                                Array3D.prototype.get = function (p_rowIndex, p_columnIndex, p_deepIndex) {
                                    return this._segment.getDoubleArrayElem(this._segmentIndex, this._offset + p_rowIndex * (this._nbColumns * this._nbDeeps) + p_columnIndex * this._nbDeeps + p_deepIndex, this._metaClass);
                                };
                                Array3D.prototype.set = function (p_rowIndex, p_columnIndex, p_deepIndex, p_value) {
                                    this._segment.setDoubleArrayElem(this._segmentIndex, this._offset + p_rowIndex * (this._nbColumns * this._nbDeeps) + p_columnIndex * this._nbDeeps + p_deepIndex, p_value, this._metaClass);
                                    return p_value;
                                };
                                Array3D.prototype.add = function (p_rowIndex, p_columnIndex, p_deepIndex, value) {
                                    return this.set(p_rowIndex, p_columnIndex, p_deepIndex, this.get(p_rowIndex, p_columnIndex, p_deepIndex) + value);
                                };
                                return Array3D;
                            })();
                            impl.Array3D = Array3D;
                            var NativeArray2D = (function () {
                                function NativeArray2D(p_nbRows, p_nbColumns) {
                                    this._nbRows = p_nbRows;
                                    this._nbColumns = p_nbColumns;
                                    this._back = new Float64Array(p_nbRows * p_nbColumns);
                                }
                                NativeArray2D.prototype.nbRows = function () {
                                    return this._nbRows;
                                };
                                NativeArray2D.prototype.nbColumns = function () {
                                    return this._nbColumns;
                                };
                                NativeArray2D.prototype.get = function (p_rowIndex, p_columnIndex) {
                                    return this._back[(p_rowIndex * this._nbColumns) + p_columnIndex];
                                };
                                NativeArray2D.prototype.set = function (p_rowIndex, p_columnIndex, value) {
                                    this._back[(p_rowIndex * this._nbColumns) + p_columnIndex] = value;
                                    return value;
                                };
                                NativeArray2D.prototype.add = function (rawIndex, columnIndex, value) {
                                    return this.set(rawIndex, columnIndex, this.get(rawIndex, columnIndex) + value);
                                };
                                return NativeArray2D;
                            })();
                            impl.NativeArray2D = NativeArray2D;
                        })(impl = structure.impl || (structure.impl = {}));
                    })(structure = maths.structure || (maths.structure = {}));
                })(maths = util.maths || (util.maths = {}));
            })(util = modeling.util || (modeling.util = {}));
        })(modeling = kevoree.modeling || (kevoree.modeling = {}));
    })(kevoree = org.kevoree || (org.kevoree = {}));
})(org || (org = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var smartcity;
(function (smartcity) {
    var SmartcityModel = (function (_super) {
        __extends(SmartcityModel, _super);
        function SmartcityModel(p_manager) {
            _super.call(this, p_manager);
            this._metaModel = new org.kevoree.modeling.meta.impl.MetaModel("Smartcity");
            var tempMetaClasses = new Array();
            tempMetaClasses[2] = smartcity.meta.MetaContact.getInstance();
            tempMetaClasses[0] = smartcity.meta.MetaCity.getInstance();
            tempMetaClasses[1] = smartcity.meta.MetaDistrict.getInstance();
            tempMetaClasses[3] = smartcity.meta.MetaSensor.getInstance();
            this._metaModel.init(tempMetaClasses);
        }
        SmartcityModel.prototype.internalCreateUniverse = function (key) {
            return new smartcity.SmartcityUniverse(key, this._manager);
        };
        SmartcityModel.prototype.metaModel = function () {
            return this._metaModel;
        };
        SmartcityModel.prototype.internalCreateObject = function (universe, time, uuid, p_clazz, previousUniverse, previousTime) {
            if (p_clazz == null) {
                return null;
            }
            switch (p_clazz.index()) {
                case 2:
                    return new smartcity.impl.ContactImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                case 0:
                    return new smartcity.impl.CityImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                case 1:
                    return new smartcity.impl.DistrictImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                case 3:
                    return new smartcity.impl.SensorImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                default:
                    return new org.kevoree.modeling.meta.impl.GenericObject(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
            }
        };
        SmartcityModel.prototype.createContact = function (universe, time) {
            return this.create(smartcity.meta.MetaContact.getInstance(), universe, time);
        };
        SmartcityModel.prototype.createCity = function (universe, time) {
            return this.create(smartcity.meta.MetaCity.getInstance(), universe, time);
        };
        SmartcityModel.prototype.createDistrict = function (universe, time) {
            return this.create(smartcity.meta.MetaDistrict.getInstance(), universe, time);
        };
        SmartcityModel.prototype.createSensor = function (universe, time) {
            return this.create(smartcity.meta.MetaSensor.getInstance(), universe, time);
        };
        return SmartcityModel;
    })(org.kevoree.modeling.abs.AbstractKModel);
    smartcity.SmartcityModel = SmartcityModel;
    var SmartcityUniverse = (function (_super) {
        __extends(SmartcityUniverse, _super);
        function SmartcityUniverse(p_key, p_manager) {
            _super.call(this, p_key, p_manager);
        }
        SmartcityUniverse.prototype.internal_create = function (timePoint) {
            return new smartcity.impl.SmartcityViewImpl(this._universe, timePoint, this._manager);
        };
        return SmartcityUniverse;
    })(org.kevoree.modeling.abs.AbstractKUniverse);
    smartcity.SmartcityUniverse = SmartcityUniverse;
    var impl;
    (function (impl) {
        var CityImpl = (function (_super) {
            __extends(CityImpl, _super);
            function CityImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            CityImpl.prototype.getName = function () {
                return this.get(smartcity.meta.MetaCity.ATT_NAME);
            };
            CityImpl.prototype.setName = function (p_obj) {
                this.set(smartcity.meta.MetaCity.ATT_NAME, p_obj);
                return this;
            };
            CityImpl.prototype.addDistricts = function (p_obj) {
                this.mutate(org.kevoree.modeling.KActionType.ADD, smartcity.meta.MetaCity.REF_DISTRICTS, p_obj);
                return this;
            };
            CityImpl.prototype.removeDistricts = function (p_obj) {
                this.mutate(org.kevoree.modeling.KActionType.REMOVE, smartcity.meta.MetaCity.REF_DISTRICTS, p_obj);
                return this;
            };
            CityImpl.prototype.getDistricts = function (cb) {
                if (cb == null) {
                    return;
                }
                this.ref(smartcity.meta.MetaCity.REF_DISTRICTS, function (kObjects) {
                    var casted = new Array();
                    for (var i = 0; i < kObjects.length; i++) {
                        casted[i] = kObjects[i];
                    }
                    cb(casted);
                });
            };
            CityImpl.prototype.sizeOfDistricts = function () {
                return this.size(smartcity.meta.MetaCity.REF_DISTRICTS);
            };
            return CityImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.CityImpl = CityImpl;
        var ContactImpl = (function (_super) {
            __extends(ContactImpl, _super);
            function ContactImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            ContactImpl.prototype.getName = function () {
                return this.get(smartcity.meta.MetaContact.ATT_NAME);
            };
            ContactImpl.prototype.setName = function (p_obj) {
                this.set(smartcity.meta.MetaContact.ATT_NAME, p_obj);
                return this;
            };
            ContactImpl.prototype.getEmail = function () {
                return this.get(smartcity.meta.MetaContact.ATT_EMAIL);
            };
            ContactImpl.prototype.setEmail = function (p_obj) {
                this.set(smartcity.meta.MetaContact.ATT_EMAIL, p_obj);
                return this;
            };
            return ContactImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.ContactImpl = ContactImpl;
        var DistrictImpl = (function (_super) {
            __extends(DistrictImpl, _super);
            function DistrictImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            DistrictImpl.prototype.getName = function () {
                return this.get(smartcity.meta.MetaDistrict.ATT_NAME);
            };
            DistrictImpl.prototype.setName = function (p_obj) {
                this.set(smartcity.meta.MetaDistrict.ATT_NAME, p_obj);
                return this;
            };
            DistrictImpl.prototype.addSensors = function (p_obj) {
                this.mutate(org.kevoree.modeling.KActionType.ADD, smartcity.meta.MetaDistrict.REF_SENSORS, p_obj);
                return this;
            };
            DistrictImpl.prototype.removeSensors = function (p_obj) {
                this.mutate(org.kevoree.modeling.KActionType.REMOVE, smartcity.meta.MetaDistrict.REF_SENSORS, p_obj);
                return this;
            };
            DistrictImpl.prototype.getSensors = function (cb) {
                if (cb == null) {
                    return;
                }
                this.ref(smartcity.meta.MetaDistrict.REF_SENSORS, function (kObjects) {
                    var casted = new Array();
                    for (var i = 0; i < kObjects.length; i++) {
                        casted[i] = kObjects[i];
                    }
                    cb(casted);
                });
            };
            DistrictImpl.prototype.sizeOfSensors = function () {
                return this.size(smartcity.meta.MetaDistrict.REF_SENSORS);
            };
            DistrictImpl.prototype.setContact = function (p_obj) {
                this.mutate(org.kevoree.modeling.KActionType.SET, smartcity.meta.MetaDistrict.REF_CONTACT, p_obj);
                return this;
            };
            DistrictImpl.prototype.getContact = function (cb) {
                if (cb == null) {
                    return;
                }
                this.ref(smartcity.meta.MetaDistrict.REF_CONTACT, function (kObjects) {
                    if (kObjects.length > 0) {
                        cb(kObjects[0]);
                    }
                    else {
                        cb(null);
                    }
                });
            };
            return DistrictImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.DistrictImpl = DistrictImpl;
        var SensorImpl = (function (_super) {
            __extends(SensorImpl, _super);
            function SensorImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            SensorImpl.prototype.getName = function () {
                return this.get(smartcity.meta.MetaSensor.ATT_NAME);
            };
            SensorImpl.prototype.setName = function (p_obj) {
                this.set(smartcity.meta.MetaSensor.ATT_NAME, p_obj);
                return this;
            };
            SensorImpl.prototype.getValue = function () {
                return this.get(smartcity.meta.MetaSensor.ATT_VALUE);
            };
            SensorImpl.prototype.setValue = function (p_obj) {
                this.set(smartcity.meta.MetaSensor.ATT_VALUE, p_obj);
                return this;
            };
            return SensorImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.SensorImpl = SensorImpl;
        var SmartcityViewImpl = (function (_super) {
            __extends(SmartcityViewImpl, _super);
            function SmartcityViewImpl(p_universe, _time, p_manager) {
                _super.call(this, p_universe, _time, p_manager);
            }
            SmartcityViewImpl.prototype.createContact = function () {
                return this.create(smartcity.meta.MetaContact.getInstance());
            };
            SmartcityViewImpl.prototype.createCity = function () {
                return this.create(smartcity.meta.MetaCity.getInstance());
            };
            SmartcityViewImpl.prototype.createDistrict = function () {
                return this.create(smartcity.meta.MetaDistrict.getInstance());
            };
            SmartcityViewImpl.prototype.createSensor = function () {
                return this.create(smartcity.meta.MetaSensor.getInstance());
            };
            return SmartcityViewImpl;
        })(org.kevoree.modeling.abs.AbstractKView);
        impl.SmartcityViewImpl = SmartcityViewImpl;
    })(impl = smartcity.impl || (smartcity.impl = {}));
    var meta;
    (function (meta) {
        var MetaCity = (function (_super) {
            __extends(MetaCity, _super);
            function MetaCity() {
                _super.call(this, "smartcity.City", 0, null);
                var temp_all = new Array();
                temp_all[0] = MetaCity.ATT_NAME;
                temp_all[1] = MetaCity.REF_DISTRICTS;
                this.init(temp_all);
            }
            MetaCity.getInstance = function () {
                if (MetaCity.INSTANCE == null) {
                    MetaCity.INSTANCE = new smartcity.meta.MetaCity();
                }
                return MetaCity.INSTANCE;
            };
            MetaCity.INSTANCE = null;
            MetaCity.ATT_NAME = new org.kevoree.modeling.meta.impl.MetaAttribute("name", 0, 0, false, org.kevoree.modeling.meta.KPrimitiveTypes.STRING, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaCity.REF_DISTRICTS = new org.kevoree.modeling.meta.impl.MetaReference("districts", 1, true, false, function () {
                return smartcity.meta.MetaDistrict.getInstance();
            }, "op_City_districts", function () {
                return smartcity.meta.MetaCity.getInstance();
            });
            return MetaCity;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaCity = MetaCity;
        var MetaContact = (function (_super) {
            __extends(MetaContact, _super);
            function MetaContact() {
                _super.call(this, "smartcity.Contact", 2, null);
                var temp_all = new Array();
                temp_all[0] = MetaContact.ATT_NAME;
                temp_all[1] = MetaContact.ATT_EMAIL;
                temp_all[2] = MetaContact.REF_OP_DISTRICT_CONTACT;
                this.init(temp_all);
            }
            MetaContact.getInstance = function () {
                if (MetaContact.INSTANCE == null) {
                    MetaContact.INSTANCE = new smartcity.meta.MetaContact();
                }
                return MetaContact.INSTANCE;
            };
            MetaContact.INSTANCE = null;
            MetaContact.ATT_NAME = new org.kevoree.modeling.meta.impl.MetaAttribute("name", 0, 0, false, org.kevoree.modeling.meta.KPrimitiveTypes.STRING, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaContact.ATT_EMAIL = new org.kevoree.modeling.meta.impl.MetaAttribute("email", 1, 0, false, org.kevoree.modeling.meta.KPrimitiveTypes.STRING, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaContact.REF_OP_DISTRICT_CONTACT = new org.kevoree.modeling.meta.impl.MetaReference("op_District_contact", 2, false, false, function () {
                return smartcity.meta.MetaDistrict.getInstance();
            }, "contact", function () {
                return smartcity.meta.MetaContact.getInstance();
            });
            return MetaContact;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaContact = MetaContact;
        var MetaDistrict = (function (_super) {
            __extends(MetaDistrict, _super);
            function MetaDistrict() {
                _super.call(this, "smartcity.District", 1, null);
                var temp_all = new Array();
                temp_all[0] = MetaDistrict.ATT_NAME;
                temp_all[1] = MetaDistrict.REF_SENSORS;
                temp_all[2] = MetaDistrict.REF_CONTACT;
                temp_all[3] = MetaDistrict.REF_OP_CITY_DISTRICTS;
                this.init(temp_all);
            }
            MetaDistrict.getInstance = function () {
                if (MetaDistrict.INSTANCE == null) {
                    MetaDistrict.INSTANCE = new smartcity.meta.MetaDistrict();
                }
                return MetaDistrict.INSTANCE;
            };
            MetaDistrict.INSTANCE = null;
            MetaDistrict.ATT_NAME = new org.kevoree.modeling.meta.impl.MetaAttribute("name", 0, 0, false, org.kevoree.modeling.meta.KPrimitiveTypes.STRING, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaDistrict.REF_SENSORS = new org.kevoree.modeling.meta.impl.MetaReference("sensors", 1, true, false, function () {
                return smartcity.meta.MetaSensor.getInstance();
            }, "op_District_sensors", function () {
                return smartcity.meta.MetaDistrict.getInstance();
            });
            MetaDistrict.REF_CONTACT = new org.kevoree.modeling.meta.impl.MetaReference("contact", 2, true, true, function () {
                return smartcity.meta.MetaContact.getInstance();
            }, "op_District_contact", function () {
                return smartcity.meta.MetaDistrict.getInstance();
            });
            MetaDistrict.REF_OP_CITY_DISTRICTS = new org.kevoree.modeling.meta.impl.MetaReference("op_City_districts", 3, false, false, function () {
                return smartcity.meta.MetaCity.getInstance();
            }, "districts", function () {
                return smartcity.meta.MetaDistrict.getInstance();
            });
            return MetaDistrict;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaDistrict = MetaDistrict;
        var MetaSensor = (function (_super) {
            __extends(MetaSensor, _super);
            function MetaSensor() {
                _super.call(this, "smartcity.Sensor", 3, null);
                var temp_all = new Array();
                temp_all[0] = MetaSensor.ATT_NAME;
                temp_all[1] = MetaSensor.ATT_VALUE;
                temp_all[2] = MetaSensor.REF_OP_DISTRICT_SENSORS;
                this.init(temp_all);
            }
            MetaSensor.getInstance = function () {
                if (MetaSensor.INSTANCE == null) {
                    MetaSensor.INSTANCE = new smartcity.meta.MetaSensor();
                }
                return MetaSensor.INSTANCE;
            };
            MetaSensor.INSTANCE = null;
            MetaSensor.ATT_NAME = new org.kevoree.modeling.meta.impl.MetaAttribute("name", 0, 0, false, org.kevoree.modeling.meta.KPrimitiveTypes.STRING, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaSensor.ATT_VALUE = new org.kevoree.modeling.meta.impl.MetaAttribute("value", 1, 0, false, org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaSensor.REF_OP_DISTRICT_SENSORS = new org.kevoree.modeling.meta.impl.MetaReference("op_District_sensors", 2, false, false, function () {
                return smartcity.meta.MetaDistrict.getInstance();
            }, "sensors", function () {
                return smartcity.meta.MetaSensor.getInstance();
            });
            return MetaSensor;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaSensor = MetaSensor;
    })(meta = smartcity.meta || (smartcity.meta = {}));
})(smartcity || (smartcity = {}));
